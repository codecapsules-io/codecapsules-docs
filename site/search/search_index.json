{"config":{"indexing":"full","jieba_dict":null,"jieba_dict_user":null,"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"<p>Code Capsules lets you deploy your GitHub projects to production automatically.</p> <p>Dive directly into our reference documentation or get started by following one of our tutorials.</p>","title":"Getting Started with Code Capsules"},{"location":"#deployment-guides","text":"<p>If you're looking to deploy a specific framework, you can find guides on how to do so on our deployment pages</p>","title":"Deployment guides"},{"location":"#faq","text":"<p>Visit our FAQ to get answers to the questions our new users usually ask.</p>","title":"FAQ"},{"location":"#comparisons-and-community","text":"<p>Get to know us and the services we offer better by checking out our Comparisons and Community pages.</p> <p>If you need help with anything, join our Slack commuinty.</p>","title":"Comparisons and Community"},{"location":"FAQ/how-to-add-custom-domain/","text":"<p>If you have purchased a domain from a domain registrar, you may route any application hosted on Code Capsules free of charge. To add a custom domain, navigate to the Capsule containing the application which you'd like to add a custom domain to. Find and click on the \"Overview\" tab.</p> <p>In the Overview tab, you can see your default Code Capsules URL under \"Domains\". Below, there is an \"Add a Custom Domain\" button. Click it. Then:</p> <ol> <li>Save the IP address under \"A Record Route\".</li> <li>Enter the root domain (no subdomain) of the domain you've purchased.</li> <li>Click \"Create Domain\".</li> </ol> <p>With the IP address saved previously, create an A record pointing to the IP address. Visit your domain registrar for further instructions on creating an A record. After creating an A record pointing to the IP address, allow up to four hours for the changes to propagate before your domain routes to your application. </p> <p>For further information on custom domains, refer to this document explaining the ins and outs of adding custom domains and subdomains to your applications hosted on Code Capsules.</p>","title":"How Do I Add a Custom Domain to My Application?"},{"location":"FAQ/teams-spaces-capsules/","text":"<p></p> <p>Teams, Spaces, and Capsules are the foundation of Code Capsules. \"Teams contain Spaces and Spaces contain Capsules\".</p> <p>Teams are to organize people. Multiple people can join your Team, and each member of the Team can interact with the Spaces and Capsules that the Team contains. Furthermore, Teams are associated with a payment method \u2013 you add a credit card to a Team, and Code Capsules bills this credit card when a charge incurs.</p> <p>Spaces are the second layer of organization. Spaces can contain any amount of Capsules and are excellent tools for larger projects. If your project involves complicated frontend and backend code, splitting your code into multiple Capsules \u2013 each within the same space \u2013 may help with organization.</p> <p>Capsules provide the actual computational power for running your applications. While Teams and Spaces are organizational tools, Capsules connect to GitHub repositories containing your applications and hosts them on a server. Capsules can run both frontend and backend applications.</p> <p>For a single, simple project, you would have exactly one team, containing one space, containing one capsule. If you wanted to set up a frontend only project (e.g. a React app) backed by a REST API, you would have two capsules in your space: a frontend Capsule for the React application and a backend Capsule for the REST API.</p> <p></p>","title":"Teams, Spaces, and Capsules"},{"location":"FAQ/what-is-a-capsule/","text":"<p>A Capsule provides the actual server for running your applications. Code Capsules offers two distinct Capsule types: Frontend Capsules and Backend Capsules.</p> <ul> <li> <p>Frontend Capsules deploy Angular, React, Vue, or static content from the GitHub repository housing your application.</p> </li> <li> <p>Backend Capsules deploy Node.js, Java, or Python applications from the GitHub repository containing your code.</p> </li> </ul> <p>Capsules automatically build and deploy upon creation. One can monitor the build process by navigating to the \"Logs\" tab, or by pressing \"View build log\" under the \"Build and Deploy\" tab.</p> <p>Upon deployment, an HTTPS subdomain is generated for the Capsule. The subdomain assigned to the app is available in the \"Config\" tab. Clicking on the subdomain will open the link in a new tab.</p> <p>You can turn Capsules off by toggling the switch at the top right of the Capsule view (next to \"Live Website\").</p>","title":"What is a Capsule?"},{"location":"FAQ/what-is-a-space/","text":"<p>Spaces are an organizational tool for Capsules. Each Space can contain any number of Capsules. Spaces come in handy when working with a large project \u2013 it may be useful to split the project into multiple Capsules.</p>","title":"What is a Space?"},{"location":"FAQ/what-is-a-team/","text":"<p>Code Capsules provides Teams for collaborative development. Multiple members may belong to a team.</p> <p>A Team may contain multiple Spaces and Capsules. Members of the Team can interact with these Spaces and Capsules.  </p> <p>Furthermore, Teams handle the payment for all of its Capsules. You set up a payment method for the entire Team (a credit card), and Code Capsules charges that payment method appropriately.</p>","title":"What is a Team?"},{"location":"community/codecapsules-hack-days/","text":"<p>Every Friday we run an informal \"hack day\" in our Slack from 2pm (UTC+2) onwards. This is a time where people from the dev community can come and share side projects (or main projects) that they are working on, get feedback from peers, or get help from our team on anything they need.</p> <p>Drop in to say hi or stay and work with us for a few hours - it's a safe space and supportive environment :)</p> <p>People work on everything from their dev portfolios to machine learning projects. Some people post 'live updates' of what they're working on for others to follow along, and others simply observe. For beginners, we have a series of tutorials that you can work through and get realtime help if you get stuck.</p> <p>Gareth Dwyer and Miki von Ketelhodt as well as others with expertise ranging through software engineering, design, DevOps, and startups will be available to help you out, give you feedback, or answer your questions on anything tech related.</p> <p></p> <p>Join our Slack and come say hi.</p>","title":"Code Capsules Hack Days and Free Tech Consulting"},{"location":"community/founder-fridays/","text":"<p></p> <p>Founder Fridays are weekly Zoom calls happening every Friday at 13:00 - 14:00 SAST. Anyone is welcome!</p> <p>This is an opportunity to network and share your product with fellow-creators. It is also an useful opportunity to get feedback on whatever you are working on, the underlying business or just have a set weekly timeslot to keep yourself accountable. This is a great resource for all types of product owners, startup leads or just anyone hacking on personal products. It is also open to anyone who merely wants to observe how products get built and how decisions are made around product design. </p> <p>If you are interested in attending merely submit your name and email via the following form: https://forms.gle/NLymSw5NVsLshHDX8</p>","title":"Founder Fridays"},{"location":"community/founder-fridays/#existing-projects","text":"<ul> <li>FEDSA</li> <li>JustSketchMe</li> <li>Citizen Code</li> </ul>","title":"Existing Projects"},{"location":"community/introducing-code-capsules/","text":"<p></p>","title":"Introducing Code Capsules"},{"location":"community/introducing-code-capsules/#background","text":"<p>We have been huge fans of Serverless for many years. The term exists in many forms, such as PaaS (Platform as a Service) or FaaS (Functions as a Service) and every major cloud has some form of Serverless service, which allows us as developers to continuously integrate and deploy our latest code without worrying about infrastructure.</p> <p>Over the past few years we have enjoyed deploying our backend applications to Heroku and our static Frontend applications to Netlify. We found the developer experiences to be incredible and many of my projects still easily deploy from a <code>git push</code>, even years after initially setting it up.</p>","title":"Background"},{"location":"community/introducing-code-capsules/#major-problems-we-faced-as-developers","text":"<p>Our company projects at Appstrax are generally deployed and maintained at a variety of cloud providers, from AWS or Heroku to smaller local [to South Africa] shared server environments. This caused a few problems over time for a company like ours.</p>","title":"Major Problems we faced as Developers"},{"location":"community/introducing-code-capsules/#managing-client-infrastructure-billing","text":"<p>We needed to manage the billing for all of our client projects' infrastructure each month.  We used to collect all of the invoices from the various cloud providers and divide them up to the relevant client and ultimate re-invoice to recover the costs.</p> <p>This does depend on the client, for us it was mostly non-technical clients that wanted us to manage the infrastructure on their behalf.</p> <p>It would be great if we could just have those non-technical clients enter their payment methods against the relevant cloud resources and get invoiced directly, saving us some admin time.</p>","title":"Managing Client Infrastructure Billing"},{"location":"community/introducing-code-capsules/#knowledge-transfer","text":"<p>When a team mate left the company, there was a long and involved process to hand over all the correct project information. </p> <p>We needed to make sure we had the right private keys, cloud account logins, documentation and processes to maintain and deploy to the relevant servers. </p> <p>A solution was needed going forward whereby the need for exchanging private keys and account logins was avoided to maintain a projects integrity.</p>","title":"Knowledge Transfer"},{"location":"community/introducing-code-capsules/#managing-ssl-certificates","text":"<p>Managing SSL certificates and private keys were a nightmare depending on the cloud or platform you were using for that project.</p> <p>We wanted to avoid touching any private keys or server terminals at all and just have every project automate their SSL through something like LetsEncrypt.</p>","title":"Managing SSL certificates"},{"location":"community/introducing-code-capsules/#context-switch","text":"<p>Team mates would often context switch between various cloud providers depending on where the project was located when needing to maintain or fix deployments and infrastructure.</p> <p>If we had one unified dashboard that every team mate was familiar with, our productivity as a company would be heavily improved.</p>","title":"Context Switch"},{"location":"community/introducing-code-capsules/#lack-of-south-african-paas","text":"<p>Local South African servers lack decent developer experience when it comes to anything like CI/CD (Continuous Integration &amp; Deployment) and Heroku and Netlify only targeted US or EU servers.</p> <p>We thought it would be epic if we could have one platform that would combine all of our favorite PaaS features into one, while solving some of the above problems for us, especially CI/CD to local South African servers. </p> <p>We started prototyping Code Capsules in 2019 through the use of various cloud-native and open source technologies, which has resulted in the application that is now in an Open Beta status.</p>","title":"Lack of South African PaaS"},{"location":"community/introducing-code-capsules/#deploying-a-static-frontend-app","text":"<p></p> <p>After installing our Github Application into your Code Capsules user account and team, you are able to easily create a Frontend Capsule in few simple steps.</p> <ol> <li>Select your Github Repository and Branch</li> <li>Choose which folder within your Github Repository contains your static app (Angular, React or Vue)</li> <li>Enter the Build Command, which will tell Code Capsules which command to use to generate your static HTML and JavaScript content</li> <li>Enter the resulting Static Content Folder Path (the result of the build command)</li> </ol> <p>If you enter the Build Command, you will notice that it runs through the Build Logs on the Capsule Details screen:</p> <p></p> <p>If you have a plain old HTML and JavaScript app, you may not need a Build Command. You can simply enter the folder path within your Github Repository that contains the <code>index.html</code> file, which Code Capsules will serve up once deployed.</p> <p></p>","title":"Deploying a Static Frontend App"},{"location":"community/introducing-code-capsules/#deploying-a-backend-app","text":"<p></p> <p>Similar to the Frontend Capsule workflow, a few simple steps is all it takes to get your Backend App online:</p> <ol> <li>Select your Github Repository and Branch</li> <li>Choose which folder within your Github Repository contains your static app (Node, Python, Java or .NET Core)</li> <li>Enter the Run Command, which will tell Code Capsules which command to use to start your server (ensure your app binds to a <code>PORT</code> environment variable)</li> </ol> <p></p> <p>The Backend Capsule will build your code into a container and try to serve up your application. </p> <p>It also automatically creates a new build and deploy every time push new code to your Github branch. This can be turned off if you prefer to create builds manually. </p> <p>You can view the server logs below:</p> <p></p> <p>Both Frontend and Backend Capsules will automatically create a free subdomain with an SSL certificate installed. You can choose to point a custom domain to your capsule through either a CNAME or A Record from any DNS provider you may be using.</p> <p></p>","title":"Deploying a Backend App"},{"location":"community/introducing-code-capsules/#team-management","text":"<p>We have broken down the solution to allow developers to manage their applications and cloud resources that best meets their needs. </p> <p></p> <ul> <li>You can create as many Teams as you want</li> <li>You can create as many Spaces within Teams as you want</li> <li>You can invite users into your Team</li> <li>You can add different payment methods to different teams, which is helpful if you want to link your clients credit card directly to the Team</li> <li>You can view invoices broken down by Team</li> <li>You can manage Github Repositories per Team</li> </ul> <p></p> <p>Check out our Documentation and Tutorials if you are keen to give it a go. Every Personal Team can enjoy a Free Frontend Capsule to give our new platform a try. </p> <p>We would love to hear any and all feedback (join us on our Slack Team) so that we can improve our solution and hopefully add value to other developers \ud83d\ude80.</p>","title":"Team Management"},{"location":"comparisons/","text":"<p>Welcome to the Code Capsules Comparisons guide. In this section, you can find comparison articles on common programming paradigms as well as see how Code Capsules compares with other service providers.</p>","title":"Comparisons Guide"},{"location":"comparisons/#comparison-articles","text":"<ul> <li>PaaS Providers</li> <li>SaaS vs PaaS vs IaaS</li> <li>Top 6 Heroku Alternatives</li> </ul>","title":"Comparison Articles"},{"location":"comparisons/6-heroku-alternatives/","text":"<p>Despite its popularity, Heroku can't support the use cases of all applications and developers. Issues surrounding the platform's endpoint location, pricing, and a recent security breach have had developers seeking alternatives to this platform-as-a-service (PaaS). </p>","title":"Six Heroku Alternatives"},{"location":"comparisons/6-heroku-alternatives/#why-use-a-paas","text":"<p>The advantages of using a PaaS include the infrastructure (like servers and storage) and services (such as database management, automatic scaling, and debugging tools) it provides. A PaaS can save you a lot of coding time by creating and managing many of the code components you need to run on a platform, such as security features and workflow. And PaaS pay structures often allow for a pay-as-you-go scheme, enabling you to push your application to production without a large upfront cost.</p>","title":"Why use a PaaS?"},{"location":"comparisons/6-heroku-alternatives/#how-to-choose-a-paas","text":"<p>We're going to help you find the right PaaS provider for the production of a web service or application by exploring the pros and cons of six alternatives to Heroku: - Code Capsules - Render - Fly.io - Google app engine - AWS Elastic Beanstalk - DigitalOcean App Platform</p> <p>When choosing a PaaS, you'll want to consider such things as pricing structure, database delivery, and production workflow. We're going to take a look at PaaS providers in terms of five key points: 1. Free tier availability 2. Production workflow 3. Endpoint location 4. Application accommodation (frontend only versus full stack)</p>","title":"How to choose a PaaS"},{"location":"comparisons/6-heroku-alternatives/#code-capsules","text":"","title":"Code Capsules"},{"location":"comparisons/6-heroku-alternatives/#pros","text":"<ul> <li>Free tier for both static and dynamic web applications</li> <li>Deployment from GitHub</li> <li>Endpoints in Africa</li> <li>Frontend and backend application hosting with database server support</li> </ul> <p>Code Capsules is a full platform-as-a-service provider that allows for the deployment of both frontend and backend applications. You can sign up for the free tier to use a Frontend Capsule and a Backend Capsule, allowing you to deploy a full-stack web application to test out the Code Capsules workflow free of charge. </p> <p>Code Capsules allows for an application to be pushed to production through a <code>git push</code> command to GitHub. Your application is run on a server, called a Capsule, which pulls the code from your GitHub repository, and builds it in a container created on the Code Capsules website. Once your application is set up in your GitHub repository, all it takes to deploy your code is a <code>git push</code> command. </p> <p>Code Capsules is one of the few PaaS providers that provides servers in Africa. This makes it an excellent choice for developers and companies outside of the US or EU. </p> <p>The organizational tools Code Capsules provides for teams collaborating on applications is another advantage of this service. You can set up Teams of users that share Spaces containing multiple Capsules running applications, an ideal organizational structure for a collaborative workflow.</p>","title":"Pros:"},{"location":"comparisons/6-heroku-alternatives/#render","text":"","title":"Render"},{"location":"comparisons/6-heroku-alternatives/#pros_1","text":"<ul> <li>Free tier for static sites, dynamic web services, and database usage</li> <li>Deployment from GitHub</li> <li>Full-stack support</li> </ul>","title":"Pros:"},{"location":"comparisons/6-heroku-alternatives/#cons","text":"<ul> <li>No endpoints in Africa or Asia.</li> </ul> <p>Render has a simple set up, support for full-stack applications, and a free tier account option for static sites, web services, and databases. You can take a look at how Render compares to Heroku on their website.</p> <p>With Render, you can build and update your web service or site through a <code>git push</code> command \u2013 a great plus for developer experience. Additionally, the Render dashboard's auto-suggest helps you build and start your application.</p> <p>Render's pricing structure allows for the free deployment of static sites and limited free deployment of web services. Render's free tier allows for 750 hours of runtime per month across all your web services, and, if you exceed this allocation, they have a great policy of stopping traffic until you upgrade your account or a new month begins, rather than charging you.</p> <p>With no endpoints in Africa and Asia, Render will not be able to provide the speed necessary for some developers and applications. Their website does say they are looking to extend their endpoints in the future however.</p>","title":"Cons:"},{"location":"comparisons/6-heroku-alternatives/#flyio","text":"","title":"Fly.io"},{"location":"comparisons/6-heroku-alternatives/#pros_2","text":"<ul> <li>Limited free tier</li> <li>Simple production workflow</li> <li>Postgres database</li> </ul>","title":"Pros"},{"location":"comparisons/6-heroku-alternatives/#cons_1","text":"<ul> <li>Limited free tier</li> <li>No endpoints in Africa</li> </ul> <p>Fly.io is another PaaS that allows for easy deployment. Use their CLI to manage and launch your applications with a few simple commands. Fly.io supports both frontend and full-stack applications, and has an easy-to-understand production workflow. </p> <p>Fly.io provides a limited free tier that charges you based on a monthly allowance for some resources and a total allowance for others. You can read more about these resource allowances on their website. You can split allowances across multiple applications, but when your allowance is exceeded, you will be charged for the resources you use. </p> <p>Fly.io provides many endpoints so that users' applications run quickly in the regions they are used. There are no Fly.io endpoints in Africa, but there are endpoints in Asia and Eastern Europe.</p>","title":"Cons"},{"location":"comparisons/6-heroku-alternatives/#google-app-engine","text":"","title":"Google App Engine"},{"location":"comparisons/6-heroku-alternatives/#pros_3","text":"<ul> <li>A $300 free quota for new users</li> <li>Simple deployment workflow</li> <li>Support for full-stack applications and database usage</li> </ul>","title":"Pros:"},{"location":"comparisons/6-heroku-alternatives/#cons_2","text":"<ul> <li>No free tier</li> <li>No endpoints in Africa</li> </ul> <p>Google App Engine provides a fully managed and serverless platform for web applications and products. You can deploy your app with Google App Engine in minutes with simple commands. Once your code has been set up, you can deploy from a terminal using <code>$ gcloud app deploy</code>. After deployment, Google App Engine will automatically upload code files and run the code in Google Cloud Platform. </p> <p>While there is no free tier, there is a $300 free quota for new users, which you can use to test the platform and its features before committing to it. Google App Engine is a part of Google Cloud Platform, which means you can use it with Google's suite of technologies, including in Google's infrastructure-as-a-service. MySQL and PostgreSQL databases are supported at a fee. </p> <p>While Google App Engine allows for deployment in a great number of regions, regional deployment for Africa is not supported.</p> <p>Follow this short tutorial on how to deploy an application to Goolge App Engine. </p>","title":"Cons:"},{"location":"comparisons/6-heroku-alternatives/#aws-elastic-beanstalk","text":"","title":"AWS Elastic Beanstalk"},{"location":"comparisons/6-heroku-alternatives/#pros_4","text":"<ul> <li>Simple deployment workflow</li> <li>Support for full-stack applications and database usage</li> </ul>","title":"Pros:"},{"location":"comparisons/6-heroku-alternatives/#cons_3","text":"<ul> <li>No free tier</li> <li>No endpoints in Africa</li> </ul> <p>AWS Elastic Beanstalk is a PaaS within Amazon Web Services (AWS) that you can use to deploy and scale your web applications. You can deploy your app to Elastic Beanstalk with code uploaded from the AWS management console, with a command line instruction, from a Git repository, or directly from an IDE. </p> <p>As part of AWS, you can use Elastic Beanstalk with the suite of technologies included in Amazon's infrastructure-as-a-service. Your application can connect to an external database or make use of Amazon Relational Database Service (Amazon RDS).</p> <p>Elastic Beanstalk is free to access, but you'll be charged based on resource usage.</p> <p>Elastic Beanstalk has a great number of endpoints around the world, but none in Africa.</p> <p>Take a look at this tutorial on how to deploy a web application with Elastic Beanstalk from the AWS website.</p>","title":"Cons:"},{"location":"comparisons/6-heroku-alternatives/#digitalocean-app-platform","text":"","title":"DigitalOcean App Platform"},{"location":"comparisons/6-heroku-alternatives/#pros_5","text":"<ul> <li>Free tier</li> <li>Deployment from GitHub</li> <li>Supports full-stack applications and databases</li> </ul>","title":"Pros:"},{"location":"comparisons/6-heroku-alternatives/#cons_4","text":"<ul> <li>No endpoints in Africa</li> </ul> <p>DigitalOcean App Platform provides a fully managed PaaS for app deployment. Their free tier allows for the creation of three static sites, which is ideal for testing out their workflow and UI before deciding to use their services for full app deployment. </p> <p>The process of deployment is simple too, with the ability to deploy through a GitHub repository. DigitalOcean App Platform also provides deployments with no downtime. This means that changes can be rolled out or applications can be scaled while keeping the application available and operational.</p> <p>App Platform oversees the management of operating systems, databases, infrastructure, and more. Costs are optimised according to the scaling of your application to ensure that savings are made when the application is not using a lot of resources. App Platform also allows for both vertical and horizontal scaling to ensure that applications can handle spikes in traffic. </p> <p>Take a look at DigitalOcean's tutorial on deploying a simple application. </p>","title":"Cons:"},{"location":"comparisons/6-heroku-alternatives/#making-the-change","text":"<p>Overall, a PaaS should provide you with an efficient and cost-effective solution for deploying your application. Match the features we've described for these Heroku alternatives to your project\u2019s specific requirements to find the platform that's the best fit for you. Consider the scale of your application, the location of your users, the platform's payment structures, and your security requirements to ensure that a PaaS can properly support the production of your application, and take advantage of PaaS providers' free trial services to test them out before you commit.</p>","title":"Making the Change"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/","text":"<p>Deploying a web application to a production environment is complicated. Traditionally, you need to set up a web server including the operating system and supporting software and libraries. Then you need to deploy your code, configure it, and monitor it to ensure it keeps running.</p> <p>Because most developers do not want to be so deeply involved in \"operations\", an alternative is to use a Platform-as-a-Service (PaaS) offering. These platforms need only minimal configuration and offer an integration with GitHub or similar so that you, as a developer, can simply push new code to your repository and have it deployed to a production environment automatically.</p> <p>We deployed a basic Python (Flask) web application to three PaaS providers: Heroku, DigitalOcean App Platform, and Code Capsules. In this article, we compare these for ease-of-use and show step-by-step instructions on how to get started with each.</p> <p>The platforms we tested are:</p> <ul> <li>Heroku</li> <li>DigitalOcean App Platform </li> <li>Code Capsules</li> </ul> <p>This guide will help you decide which platform to choose. We'll start with an overview of the metrics showing how long and how many clicks it took to deploy our simple \"Hello, world!\" application to each provider. </p>","title":"Comparing PaaS providers: Heroku vs DigitalOcean vs Code Capsules"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#ease-of-use-benchmarks","text":"<p>We compared each platform on:</p> <ul> <li>The time it took to deploy the web application to production on each platform.</li> <li>How complicated each platform's user interface is.</li> <li>How intuitive the platform was to use overall.</li> </ul> <p>These measurements are necessarily somewhat subjective, but by following the steps or taking a look at them below, you should be able to form your own opinion too.</p>","title":"Ease-of-use benchmarks"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#timing-results","text":"<p>To test the simplicity of each platform, we performed the platform-specific steps (as detailed later in this article) twice. Each attempt we recorded how long it took to get from GitHub to production. </p>    Attempt # Code Capsules Heroku DigitalOcean     1 7 min 30 sec 10 min 5 sec 12 min 11 sec   2 4 min 45 sec 5  min 2 sec 6  min 1  sec    <p>Code Capsules was the fastest in both runs, and also had the least difference in timing between runs, indicating that is simpler than the other two, with a smaller learning curve.</p>","title":"Timing results"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#number-of-clicks","text":"<p>We also counted the total number of UI clicks: that is, the number of clicks after creating an account to reach a deployed web application.</p>    Code Capsules Heroku DigitalOcean     8 clicks 9 clicks 11 clicks","title":"Number of clicks"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#general-impressions","text":"<p>Heroku's interface was the most complicated, providing many pricing and other options. As the most mature platform of the three, it has acquired more features over time, but these are generally a hinderance if you just want to deploy a basic application.</p> <p>DigitalOcean provided a simpler platform, but requires payment details up front which slows down the initial process. </p> <p>Code Capsules was the simplest for a first-time user. It follows a simple pipeline of three steps to get from GitHub to production.</p> <p>Finally, each platform offers a custom domain name to host your application. DigitalOcean generates a fully random name which can't be changed during the deployment process (though it can be customized later in their settings page.) Heroku allows a customized domain, but as it is the most popular platform it is hard to find an available domain. The first name we chose on Code Capsules was accepted.</p>","title":"General impressions"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#step-by-step-guide-to-deploy-to-each-provider","text":"<p>Let's take a look at how to create the web application we tested these platforms with, and how to deploy it to the platforms tested. </p>","title":"Step-by-step guide to deploy to each provider"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#prerequisites","text":"<p>To follow along you should have general programming knowledge and be able to use GitHub. This means you can send code from a local repository to a remote repository. You should also have (instructions at each link):</p> <ul> <li>Python version 3.5 or above installed.</li> <li>A GitHub account and Git installed.</li> <li>Python's virtualenv installed.</li> <li>A working credit card to test out DigitalOcean (free of charge).</li> </ul>","title":"Prerequisites"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#general-steps-for-building-the-web-application","text":"<p>The following steps need to be carried out only once for all three providers. They will show you how to install local dependencies and create the \"Hello, world!\" app.</p>","title":"General steps for building the web application"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#installing-virtualenv","text":"<p>If you already have virtualenv and know what it does, skip to the next section.</p> <p>Using virtualenv, you can create a virtual Python environment. This virtual environment will contain only the essential modules for your web application.</p> <p>To install virtualenv, open up your terminal and type:</p> <pre><code>pip3 install virtualenv\n</code></pre> <p>Now that you have a current version of Python, Git, a GitHub account, and virtualenv installed, you can create the \"Hello, world!\" application.</p>","title":"Installing virtualenv"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#setting-up-the-virtual-environment","text":"<p>First, create a directory for your project. I named my directory \"helloWorld\". Open your command line, and enter the created directory.</p> <p>Within the directory, create the virtual Python environment by typing <code>virtualenv env</code>.</p> <p>To activate the virtual environment, type the following from within the newly created directory:</p> <p>Linux/MacOSX</p> <p><code>source env/bin/activate</code></p> <p>Windows</p> <p><code>env\\Scripts\\activate.bat</code></p> <p>Your terminal should now look something like this:</p> <p></p>","title":"Setting up the virtual environment"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#installing-flask-and-gunicorn","text":"<p>For our web application we'll use two popular Python tools for web development: Flask and Gunicorn:</p> <ul> <li>Flask is a lightweight web-development framework for Python. It provides a number of easy-to-use resources and tools for building and maintaining web applications, websites, and similar services.</li> <li>Gunicorn is a WSGI server for sending code to the production environment. Check out this link to read more about WSGI servers.</li> </ul> <p>Install these tools with the following pip command. (Ensure you are in your virtual environment before running this command.)</p> <p><code>pip3 install flask gunicorn</code></p>","title":"Installing Flask and Gunicorn"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#coding-the-application","text":"<p>Now that we have set up our requirements, we can write the code for our application. Create a new Python file within the current directory and name it anything. I named mine \"helloFlask\". Next, enter the following code.</p> <pre><code>from flask import Flask\n\napp = Flask(__name__) # __name__ = name of program\n@app.route('/') # Display on main page of the domain\n\ndef hello():\n    return 'Hello, world!'\n\nif __name__ == '__main__':\n    app.run()\n</code></pre> <p>This program will display \"Hello, world!\" on the domain hosted by Code Capsules, Heroku, and DigitalOcean.</p>","title":"Coding the application"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#creating-the-procfile","text":"<p>A Procfile is necessary to tell our platform of choice what to do with our code. You can read more about what a Procfile does here.</p> <p>Create a new file within the same directory. Name it Procfile. Next, open the Procfile and enter the following code on the first line.</p> <p><code>web: gunicorn fileName:app</code></p> <p>Replace \"fileName\" with the name of your Python file. Save the Procfile.</p>","title":"Creating the Procfile"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#freezing-the-requirements","text":"<p>Our final step before uploading the web application to GitHub is to create a list of requirements for it. This is necessary for the platform to know what to install to run our web application. Luckily, pip makes this easy. In the same terminal, enter <code>pip3 freeze &gt; requirements.txt</code>.</p> <p>This will create a file titled \"requirements.txt\", that contains all the project's requirements. Your directory should look similar to this:</p> <pre><code>ProjectDirectory\n+   env\n+   helloFlask.py\n+   requirements.txt\n+   Procfile\n</code></pre>","title":"Freezing the requirements"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#uploading-to-github","text":"<p>Send the Procfile, requirements.txt, and Python files to a remote repository on GitHub. If you are unfamiliar with how to do this, read this article for further information.</p> <p>With our application on GitHub, we will be able to link the repository to each platform we test and deploy our web application.</p>","title":"Uploading to GitHub"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#provider-specific-steps","text":"<p>Each of the following steps is specific to one of the providers. If you only want to test one of them, skip to that section.</p>","title":"Provider-specific steps"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#code-capsules","text":"<p>Code Capsules is the newest of the three providers and they advertise ease of use as their unique selling point.</p>","title":"Code Capsules"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#creating-an-account-with-code-capsules-and-connecting-to-github","text":"<p>First, we need to create an account with Code Capsules. Follow these instructions to get started:</p> <ol> <li>Go to Code Capsules.</li> <li>Click <code>SIGN UP</code> in the top right corner and follow the instructions.</li> <li>Check your email and confirm your account.</li> <li>Go back to Code Capsules and log into your newly created account.</li> </ol> <p>After logging in, Code Capsules brings you to a page that will look similar to this. For now, ignore anything that you see on this picture that isn't on your account.</p> <p></p> <p>Now that we have created a Code Capsules account, we can connect Code Capsules to our GitHub account. Perform the following:</p> <ol> <li>Click your profile name on the top right corner and click <code>Edit profile</code>.</li> <li>Under \"GitHub\" details, click the GitHub button.</li> <li>Under repository access, give Code Capsules access to our recently created repository.</li> </ol> <p>We are now connected to GitHub. Navigate back to the main screen.</p>","title":"Creating an account with Code Capsules and connecting to GitHub"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#creating-a-team-space-and-a-capsule","text":"<p>Code Capsules organizes your code into three distinct containers:</p> <ul> <li>Teams</li> <li>Spaces</li> <li>Capsules</li> </ul> <p>These are different levels of organization to manage larger projects. For our purposes, we will only need one of each. </p> <p>To create a capsule, we must create a team and space. A team allows you to invite multiple people to collaborate with you. You may assign team members to different spaces, which can contain different capsules. Capsules provide cloud resources such as databases, APIs, and servers.</p> <p>Follow these steps to get your code into production:</p> <ol> <li>Create a new team and name it anything.</li> <li>Choose \"Create a New Space For Your Apps\".</li> <li>Select your region (I chose the Netherlands).</li> <li>Choose your name for the space.</li> <li>Your space is now created! Click on your newly created space.</li> <li>Create a new capsule.</li> <li>Choose the \"Backend\" Capsule.</li> <li>Select \"Sandbox\".</li> <li>Select the correct GitHub repository and click <code>Next</code>.</li> <li>Because we have a Procfile in our repository, we do not need to use a <code>run</code> command. Instead, click <code>Create Capsule</code>.</li> </ol> <p></p>","title":"Creating a team, space, and a capsule"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#viewing-your-work","text":"<p>Now that you have created a capsule, you can see your website.</p> <p></p> <p>Click on the <code>Overview</code> button. Your URL is displayed under \"domain\". Enter it into your browser to see your web application!</p>","title":"Viewing your work"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#heroku","text":"<p>Heroku provides similar services to Code Capsules and DigitalOcean. Heroku is the original Cloud platform as service (PaaS). Heroku aims to allow developers to focus on their core product, while they take care of the rest.</p>","title":"Heroku"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#creating-an-account-with-heroku-and-creating-an-application","text":"<p>We must first create a Heroku account. Do the following:</p> <ol> <li>Go to www.heroku.com.</li> <li>Register an account by clicking <code>Sign up</code> in the top right corner.</li> <li>Log into the registered account.</li> <li>Accept terms of service.</li> <li>Check your email and confirm your account.</li> </ol> <p>Now that we have created a Heroku account, we can create an application. An application is similar to a Code Capsules \"capsule\".</p> <ol> <li>Go to www.heroku.com and log in.</li> <li>Click <code>Create new app</code>.</li> <li>Choose an app name that is not in use (I chose hello-flask-tutorial).</li> <li>Choose your region (I chose the United States).</li> <li>Click <code>Create app</code>.</li> </ol> <p></p>","title":"Creating an account with Heroku and creating an application"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#connecting-to-github-and-sending-to-production","text":"<p>After creating your app, Heroku presents several options to you. Under \"Deployment method\", click <code>GitHub</code>, and follow these steps:</p> <ol> <li>Click the connect to GitHub option, and perform the required tasks.</li> <li>Now that you are connected to GitHub, type your repositories name under \"Search for a repository to connect to\". I've named mine \"flask-hello\".</li> <li>Connect to this repository.</li> </ol> <p></p> <p>After connecting, click <code>Deploy Branch</code> in the \"Manual Deploy\" section at the bottom of the page. Wait until it has finished deploying. When the deployment is finished, navigate to the top of the page and click <code>Open app</code> to see the result!</p>","title":"Connecting to GitHub and sending to production"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#digitalocean-app-platform","text":"<p>The DigitalOcean App Platform is another PaaS alternative. It contains the same key features as Code Capsules and Heroku.</p>","title":"DigitalOcean App Platform"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#creating-an-account-and-linking-your-repository","text":"<p>DigitalOcean is the only platform here that requires a credit card. At the time of writing, DigitalOcean offers a free trial worth a $100 credit on their platform, so you will not be charged until the $100 is spent. Ensure that you have canceled your billing account so that you will not be charged in the future.</p> <p>Create a new account by performing these steps:</p> <ol> <li>Visit https://www.digitalocean.com/products/app-platform/.</li> <li>Click the <code>Get Started</code> button, and sign up via email.</li> <li>You will now need to enter your payment information. (I chose a credit card.)</li> <li>Click <code>Deploy a GitHub Repo</code>.</li> <li>Click <code>Launch Your App</code>.</li> <li>Choose \"Link your GitHub account\".</li> <li>Log into your GitHub account and press the <code>Only select repositories</code> button.</li> <li>Pick the repository containing your Flask application.</li> <li>Press the <code>Authorize and Install</code> button.</li> <li>From the drop-down menu, choose the repository containing the Flask application.</li> </ol> <p></p>","title":"Creating an account and linking your repository"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#finishing-up-and-deploying-your-code","text":"<p>DigitalOcean redirects you to a new set of steps. Follow the remaining instructions carefully:</p> <ol> <li>Choose your region. (I chose New York.)</li> <li>Pick the proper branch you want to deploy from (default is \"main\").</li> <li>Change the <code>run</code> command to <code>gunicorn --worker-tmp-dir /dev/shm file:app</code></li> <li>This is important. Without performing this step, your application will not deploy.</li> <li>Change <code>file</code> to the name of your Python file (mine was <code>helloFlask</code>).</li> </ol> <p></p> <ol> <li>Select the \"Basic\" plan.</li> <li>Press <code>Launch Basic App</code> and your application will now be built.</li> </ol> <p>View the application by entering the link under the application's name in your web browser.</p>","title":"Finishing up and deploying your code"},{"location":"comparisons/comparing-paas-providers-heroku-vs-digitalocean-vs-code-capsules/#conclusion","text":"<p>All three providers provide similar features but some of them are easier to use, especially for new users. They each provide auto-deploy functionality, meaning that you can largely forget about them after setup and simply push any changes to your GitHub repository. The integration with GitHub means that the provider will get a notification about the code changes and pull these changes into the production environment.</p>","title":"Conclusion"},{"location":"comparisons/comparing-telegram-bot-hosting-providers/","text":"<p>Bots are perfect for handling repetitive tasks and have been slowly but surely increasing in popularity over the course of the last decade. In this article, we take a look at the different hosting solutions you can consider when it's time to deploy your Telegram bot. </p>","title":"Comparing Telegram Bot Hosting Providers"},{"location":"comparisons/comparing-telegram-bot-hosting-providers/#aws","text":"<ul> <li>AWS Telegram Bot Tutorial 1</li> <li>AWS Telegram Bot Tutorial 2</li> </ul> <p>AWS Lambda allows you to build serverless Telegram bots using a Function-as-a-Service (FaaS) pricing model. This means you only pay for the resources you use, excluding idle time. Furthermore, AWS also has a generous free tier that includes 400,000 GB-seconds per month, which makes it a good option if you\u2019re building the bot for fun or as a light application that will only be used by a few people. AWS is a reasonable choice from a cost perspective, but it doesn't fare well from an ease-of-use point of view. </p> <p>Developers new to AWS may find there\u2019s a steep learning curve involved in using their services, as there are more steps to getting an application up and running on AWS compared to other popular PaaS providers. </p>","title":"AWS"},{"location":"comparisons/comparing-telegram-bot-hosting-providers/#microsoft-azure","text":"<ul> <li>Azure Telegram Bot Tutorial 1</li> <li>Azure Telegram Bot Tutorial 2 </li> </ul> <p>Microsoft Azure offers two ways to build and host a Telegram bot: Azure Functions or Azure Bot Service, both of which are serverless. The main benefits of a serverless architecture is that it allows you to focus on the code and not worry about deployment issues, such as which server to use. If you plan on having a bot on other social platforms, using the Azure Bot Service will be your best bet, as you can simply add a new channel to the same bot resource for a new social platform. </p> <p>When it comes to pricing, Azure Functions beats the Azure Bot Service, as the functions are free for the first 12 months. The Azure Bot Service uses a pay-as-you-go model, so you'll only pay for what you use. </p>","title":"Microsoft Azure"},{"location":"comparisons/comparing-telegram-bot-hosting-providers/#google-app-engine","text":"<ul> <li>Google App Engine Telegram Bot Tutorial </li> </ul> <p>Google App Engine is best suited to hosting applications that have different parts working together to achieve one main purpose. As such, you can host a Telegram bot on App Engine, but you\u2019ll be committing to taking a longer route to getting your bot up and running. This is because the setup process assumes you\u2019re building a more complex app than a bot. </p> <p>Apps in App Engine can run in either a standard environment or a flexible environment. The standard environment has a free tier but the flexible environment doesn\u2019t. Both environments use a pay-as-you-go pricing model. </p>","title":"Google App Engine"},{"location":"comparisons/comparing-telegram-bot-hosting-providers/#google-cloud-functions","text":"<ul> <li>Google Cloud Functions Telegram Bot Tutorial </li> </ul> <p>Google Cloud Functions is tailor-made to run individual services that have a single purpose. This means it's a good choice for event-driven solutions such as a Telegram bot using webhooks to only invoke a function after it receives a message from a user. Cloud Functions also offers a perpetual free tier, which gives customers up to 2 million free invocations per month. If you exceed the 2 million quota, you will be charged for each million invocations thereafter. </p> <p>On the downside, Google Cloud Functions has a limited feature set when compared to its competitors like AWS Lambda, which might be a sticking point if you\u2019re planning on building a serverless function with extensive features.</p>","title":"Google Cloud Functions"},{"location":"comparisons/comparing-telegram-bot-hosting-providers/#google-cloud-run","text":"<ul> <li>Google Cloud Run Telegram Bot Tutorial </li> </ul> <p>Google Cloud Run is a cloud compute platform created to host applications that have high computational needs. It is therefore perfectly capable of hosting a Telegram bot, but turns out to be a pricier option beyond the free tier when compared to its sibling, Cloud Functions (which can do the same). This is because you\u2019ll be using more demanding resources, but this shouldn\u2019t be a concern if you aren\u2019t building an enterprise bot, since it has a generous free tier. </p>","title":"Google Cloud Run"},{"location":"comparisons/comparing-telegram-bot-hosting-providers/#heroku","text":"<ul> <li>Heroku Telegram Bot Tutorial 1</li> <li>Heroku Telegram Bot Tutorial 2</li> <li>Heroku Telegram Bot Tutorial 3</li> </ul> <p>Heroku is a PaaS provider for hosting dynamic backend applications. A Telegram bot is a backend application in one form, and so can be hosted on Heroku. Heroku is generally easy to use and is well-documented, which means you shouldn\u2019t struggle to deploy your bot. Heroku uses a more traditional architecture and doesn\u2019t offer serverless functions, so developers have to figure out how many servers \u2013 or dynos, as Heroku calls them \u2013 their application needs.  </p> <p>The platform also has a free tier that allows you to host a Telegram bot, and is fairly priced should you exceed its limits.  </p>","title":"Heroku"},{"location":"comparisons/comparing-telegram-bot-hosting-providers/#code-capsules","text":"<ul> <li>Code Capsules Telegram Bot Tutorial </li> </ul> <p>Code Capsules offers different types of capsules or servers to meet your hosting needs, from frontend and backend applications to databases. A Telegram bot can be hosted by a Backend Capsule with minimal hassle, as the platform is relatively easy to use and navigate. Code Capsules only has a free tier for Frontend Capsules, meaning you will have to pay to make use of its Backend Capsules. </p> <p>Code Capsules also supports a wide variety of languages, ensuring you have plenty of options to choose from when deciding on the tech stack for your bot.</p>","title":"Code Capsules"},{"location":"comparisons/comparing-telegram-bot-hosting-providers/#red-hat-openshift","text":"<ul> <li>OpenShift Telegram Bot Tutorial 1</li> <li>OpenShift Telegram Bot Tutorial 2 </li> </ul> <p>Red Hat OpenShift is an enterprise Kubernetes platform that\u2019s built for an open hybrid cloud strategy. Using OpenShift to host a Telegram bot might be considered overkill, since the platform was built for far more demanding enterprise use cases. There\u2019s also a learning curve involved when setting up your first OpenShift container, which you\u2019ll need to deploy your Telegram bot. </p> <p>OpenShift does have a free trial, but the process of buying it officially has a lot of steps and sometimes sales agents are involved depending on the plan you will be buying.  </p>","title":"Red Hat OpenShift"},{"location":"comparisons/comparing-telegram-bot-hosting-providers/#pythonanywhere","text":"<ul> <li>PythonAnywhere Telegram Bot Tutorial</li> </ul> <p>PythonAnywhere is an online IDE and PaaS for hosting projects you\u2019d have written in the browser. This makes it convenient and easy to use, especially for beginners who might find any project setup stage daunting. The experience is synonymous to that of other popular serverless functions providers, as the developer only has to worry about writing their code. You can host a Telegram bot with PythonAnywhere, but you're limited to developing and hosting Python projects, which leaves out other popular languages like Node.js, Java and C#. </p> <p>PythonAnywhere has a basic plan that is free, but it doesn\u2019t support applications at scale. For applications that need scaling, the Hacker plan costs $5 per month and can support apps that get up to 10,000 hits a day. </p>","title":"PythonAnywhere"},{"location":"comparisons/comparing-telegram-bot-hosting-providers/#oracle-cloud","text":"<p>Oracle Cloud is a cloud compute platform offering IaaS and PaaS products. It is more than capable of hosting a Telegram bot using its functions service in the PaaS branch. However, developers new to the platform might find it hard to navigate, as their site is flooded with the many different kinds of services they offer. Beyond that, it is a reputable platform with a 30-day free trial to allow you to test drive the service you sign up for. At the end of the free trial, you\u2019ll be billed for the resources you use on a pay-as-you-go model.   </p>","title":"Oracle Cloud"},{"location":"comparisons/comparing-telegram-bot-hosting-providers/#vercel","text":"<ul> <li>Vercel Telegram Bot Tutorial 1</li> <li>Vercel Telegram Bot Tutorial 2 </li> </ul> <p>Vercel is a PaaS provider primarily used for hosting frontend and static sites, but their serverless functions offering makes it possible to deploy a Telegram bot to their platform. The serverless functions support Node.js, Go, Python and Ruby, so you have plenty of options to choose from when it comes to deciding which language to write your bot in. Vercel is also a relatively easy-to-use platform, meaning that even new developers shouldn\u2019t struggle to host their first project with them. </p> <p>The platform has a free plan that unfortunately doesn\u2019t support functions. The package that supports functions starts at $20 per team member per month and has a 14-day free trial period.  </p>","title":"Vercel"},{"location":"comparisons/comparing-telegram-bot-hosting-providers/#joyent-triton","text":"<p>Joyent is a cloud compute platform offering an array of services from IaaS to PaaS. Users can host a Telegram bot on Joyent through their Node.js Support service, which they claim is uniquely equipped to deliver the highest level of support for powerful enterprise applications. The platform is mainly geared towards enterprise customers, so if you just want to host a Telegram bot to showcase to friends and family, this provider might be overkill. </p>","title":"Joyent Triton"},{"location":"comparisons/comparing-telegram-bot-hosting-providers/#conclusion","text":"<p>There are many providers capable of hosting a Telegram bot, but the choice as to which one is right for you will mainly depend on the tech stack you plan to use and the size of your budget. If evaluating which provider to use from an ease-of-use perspective and how quickly you can get your bot up and running, then Code Capsules and PythonAnywhere come out on top, with the latter having the disadvantage of only being able to host Python projects. </p> <p>Code Capsules supports most of the popular modern languages, including but not limited to Python, Node.js and Go, but has the disadvantage that it doesn't have a free tier for Backend Capsules, which you'll need to host a Telegram bot.</p>","title":"Conclusion"},{"location":"comparisons/saas-paas-iaas/","text":"<p>If you've spent any amount of time trying out or researching cloud services, you've probably come across acronyms like SaaS, PaaS and IaaS. Respectively, these are:</p> <ul> <li>Software as a Service</li> <li>Platform as a Service</li> <li>Infrastructure as a Service</li> </ul> <p>But what do any of these terms actually mean? And what's the difference between them? In this article, we will provide a practical, hands-on overview of the differences, strengths and weaknesses of these three types of cloud services. We will add examples of each, and the types of things you might build with them.</p> <p>Let's say we're interested in building a budgeting application. This will initially be for personal use, but we might want to let other people use it in future, or even build a business out of it. We could choose to use any of these three types of services to build our application, but each one has different pros and cons. The chosen service will determine both the skills we'll need, and the limitations we'll need to work with.</p> <p>Roughly speaking, we will need greater depth and breadth of technical expertise as you move up the ladder from SaaS to IaaS, but we'll also have more flexibility. Below, we'll go through each one and discuss how we might use it to build our budgeting application.</p>","title":"SaaS vs PaaS vs IaaS"},{"location":"comparisons/saas-paas-iaas/#software-as-a-service-saas","text":"Pros Cons     Quick to get started with. Limited flexibility.   Requires little or no programming knowledge. Significant vendor lock-in.     Likely to be inefficient and costly at scale.    <p>Just about any application that runs in your browser can be considered Software as a Service (SaaS). SaaS examples include Google Drive and its associated office suite \u2013 Google Docs, Google Sheets, and others \u2013 as well as other file management services like Dropbox, communication platforms like Slack, and knowledge management solutions like Notion and Confluence.</p> <p>If we were to build a budgeting application using SaaS, we could do it without writing a large amount of code. We could start with a simple Google Sheet, attached to a Google Form, where the user would manually enter each transaction they make during the month. The user would specify the amount, whether it's an income, expense or investment, and add a comment about what it was for: e.g. \"Monthly salary\" or \"Groceries\". We could then use macros to calculate the user's total income and expenditure for each month.</p> <p>We could make this more complex by using multiple forms and spreadsheets to do things like allowing the user to set up a budget at the beginning of each month. We could also integrate investments into our spreadsheets, using the GOOGLEFINANCE macro to fetch stock prices in real time.</p> <p>We could then expand out of spreadsheets and forms by using another SaaS platform like IFTTT or Zapier to send a monthly digest email to the user's G-mail address, or warning emails if they start coming close to their allotted budget for a particular kind of expense. And if the user is more active on Slack than on email, we could also set up Slack alerts.</p> <p>If we want something more than email and Slack alterts, we could use a SaaS platform such as Glide to build a custom application using our original spreadsheets as a data backend. With a bit of tweaking, we could make it possible for others to use it, too.</p> <p>Our full application architecture would now look like this:</p> <p></p> <p>In this way, we can get a fully functional budgetting application with multiple integrations working by using different SaaS solutions together, and without writing any code. However, if we're interested in building a business out of this application, we may soon run into problems like expensive per-user fees and a lack of flexibility and control. Glide's visual editor may not allow us to design our application in the exact way we want to, or we may run up against the limitations of what sorts of data analysis can reasonably be done using spreadsheets.</p> <p>SaaS platforms also have the strongest vendor lock-in of the three types of services discussed in this article. If the SaaS we're using closes down or radically changes its software, we may be unable to extract all of your data. And even if we are able to extract our data, it's unlikely that we'll be able to import it directly into a different SaaS and keep going.</p> <p>For example, if our budget application uses a lot of functionality specific to Google Sheets, such as the GOOGLEFINANCE macro, and Google decides to shut down Sheets, we should be able to download our sheets as XLSX files and move them to a competing platform, such as Microsoft Office 365. But we'll then have to do a lot of manual tinkering to get everything to work again on this new service. In some cases, we may even have to remove functionality that's not supported by the new service.</p> <p>And seeing as we're using multiple SaaS platforms together, as in the above architecture, we're dependent on them continuing to support each other. For example, if Slack changes its API in a way that breaks Zapier's integration with it, our budgeting application's Slack integration will be broken until Zapier updates their software. Worse still, if Slack chooses to stop supporting the kinds of integrations we want, we will have to scramble to find an alternative solution to notify users about their budgets.</p> <p>SaaS solutions provide a great way to quickly prototype ideas, but may prove unreliable and limiting if you need them to work over a long timescale or for a large number of users. Using Google Sheets and some integrations to build a budgeting app for yourself is not a bad idea, and you could even develop it to the point of accepting other users, but if you want to build a sustainable business with your application, you may be better off looking into a PaaS or IaaS solution instead.</p>","title":"Software as a Service (SaaS)"},{"location":"comparisons/saas-paas-iaas/#platform-as-a-service-paas","text":"Pros Cons     Requires no infrastructure set-up. May be inefficient or costly at scale.   The vendor is responsible for system maintenance and security patches. Less vendor lock-in than SaaS, more than IaaS.    <p>Unlike most SaaS solutions, Platform as a Service (PaaS) solutions are specifically intended for use by developers. You can think of a PaaS as anywhere you can upload code and have it automatically deployed and run. PaaS solutions include Code Capsules, Heroku, Netlify, Google App Engine and AWS Elastic Beanstalk.</p> <p>If you've deployed a Capsule before, you'll be familiar with the process of working with a PaaS. If you haven't, it generally goes like this:</p> <ol> <li>Write application code in a language and framework of your choice.</li> <li>Push code to a source code repository on a code hosting platform such as GitHub.</li> <li>Link your GitHub profile to the PaaS of your choice, locate the repository you want to deploy, and click \"Deploy\".</li> <li>Your application will be live on a URL that looks like myapp.paas.com.</li> </ol> <p>Depending on the PaaS and the type of application being deployed, the developer may need to include deployment configuration instructions with their application code. For example, in many of our tutorials, it is necessary to create files named <code>Procfile</code> and <code>requirements.txt</code> prior to deployment.</p> <p>Users of a PaaS will need to write a lot of code. In return, they get flexibility and a reduced level of vendor lock-in compared to building on SaaS solutions. Writing your own custom code gives you far more customisation options and areas where you can make specific optimisations. Users of PaaS solutions do not require system administration knowledge, as the PaaS will be responsible for configuring their code to run correctly.</p> <p>Different PaaS solutions target different parts of the standard three-layer application stack made up of frontend (HTML and JavaScript that runs in users' browsers), backend (code that runs on servers) and data persistence (databases and datastores that record information such as user login details).</p> <p>Some PaaS solutions are highly focused on a single part of the stack, while others offer solutions for multiple areas of the stack. The table below gives some examples of each.</p>    Areas of the stack PaaS solution examples     Frontend Netlify, Vercel, AWS S3, GitHub Pages, Code Capsules (Frontend capsules)   Backend Heroku, OpenShift, AWS Elastic Beanstalk, AWS Lambda, Code Capsules (Backend capsules)   Data persistence MongoDB Atlas, AWS RDS, Azure SQL Database    <p>Frontend code can be included with backend code, and some PaaS solutions offer data persistence solutions, so you may be able to deploy a complete application as a single project on a single PaaS, but you can also use multiple PaaS solutions for different stack components.</p> <p>If we were to build our budgeting application on PaaS solutions, we would start by writing the application code. We might do this in Python with a framework like Flask, in Node.js with a framework like Express, in Ruby with a framework like Sinatra, or any number of other languages, depending on PaaS support. We may also use a frontend framework such as Vue or React. We would also need to choose a data store: either a relational database like PostgreSQL or a NoSQL document store like MongoDB. Then we would need to choose one or more PaaS solutions which supports our chosen technologies.</p> <p>Let's say we developed our budgeting application using Code Capsules to host our back- and frontend code and MongoDB Atlas to store our data. We could combine the backend and frontend code into a single backend capsule. Alternatively, we could create a frontend capsule with our application frontend and have it interact with an API created in a backend capsule \u2013 we might do this if we wanted to reuse our backend for a mobile application.</p> <p>Our budgeting app would be a web application with user login. Custom functionality would need to be developed for entering transactions, setting budgets and viewing spending reports, but we would have total flexibility in how all of this worked, without being constrained by the interfaces of Google Sheets or Google Forms. For example, we could create specialised forms for common transactions with user-friendly features like autocomplete based on existing data.</p> <p>If we're feeling really ambitious, we could integrate open banking into our application and have transactions fetched automatically rather than having to enter them manually.</p> <p>Using a single backend capsule, our application architecture would look something like this:</p> <p></p> <p>Using a backend and frontend capsule, our application architecture would look like this:</p> <p></p> <p>In the above architecture, we could replace the frontend module with a Netlify site, and the backend module with a collection of AWS Lambda functions, or just about any other PaaS solution that provides the appropriate area of the stack.</p> <p>Using PaaS solutions is the middleground between using SaaS and IaaS solutions in terms of ease of setup versus flexibility and control. Using a PaaS will lead to some level of vendor lock-in, especially if you use something like AWS Lambda. However, in most cases, we will be able to move our code to a different PaaS if the one we're using shuts down or stops supporting something we rely on. We may have to do some reconfiguration, but this is likely to be less onerous than moving between SaaS solutions.</p> <p>As we are not doing our own system administration when we use a PaaS solution, we won't be able to optimise our infrastructure for the needs of our application. If we're not careful about how we design our application, it may end up being much more expensive to run than it would be on an IaaS solution.</p>","title":"Platform as a Service (PaaS)"},{"location":"comparisons/saas-paas-iaas/#infrastructure-as-a-service-iaas","text":"Pros Cons     Highly flexible. Requires programming and system administration knowledge.   Can be configured more precisely and efficiently than SaaS and PaaS solutions. Requires regular maintenance.   Very little vendor lock-in ...    <p>Infrastructure as a Service (IaaS) solutions are the most technically demanding of their users. Rather than providing end-user software or deployment for user-developed code, most IaaS solutions merely provide you with virtual machines (VMs), commonly called a \"compute instance\". These are fully capable computers that you have full control over and responsibility for. Examples of IaaS services include AWS Elastic Computing (EC) 2, Google Cloud Platform's Compute Engine, and Digital Ocean's Droplets.</p> <p>To deploy an app using an IaaS solution, we follow these general steps:</p> <ol> <li>Create a virtual machine, specifying how much CPU power, RAM and hard drive storage space you want, as well as its operating system.</li> <li>Specify firewall rules for this virtual machine \u2013 for most simple web applications, you'll need to specify that TCP ports 80 and 443 should be open, as well as port 22, for your remote access.</li> <li>Access your virtual machine over a secure shell (SSH), generally using an SSH key like you would with GitHub.</li> <li>Install a web server, database management system, and all the other requirements for your application.</li> <li>Upload your application's code to your server.</li> <li>Ensure that all of your supporting software is configured correctly and your application's code files can be located and read by your webserver, and then start your application.</li> <li>Buy a domain name and configure it to point to the IP address of your virtual server.</li> </ol> <p>This is quite a lot more effort than using a PaaS, and it requires some specialised knowledge in addition to programming.</p> <p>In our budgeting app example, we would be able to take the same code you might deploy to a PaaS and use that on an IaaS: for example, we could take code we've uploaded to Code Capsules and upload it to an AWS EC2 instance instead. We would just need to install and set up your own webserver (usually Apache or nginx), and our own database (either a traditional relational database like PostgreSQL or a NoSQL document store like MongoDB).</p> <p>We could also put the database on a second EC2 instance, and configure your networking rules to allow both instances to speak to each other over the relevant port. Our application architecture would look now look like the diagram below. Note that we would retain our open banking integration, as that is defined in code.</p> <p></p> <p>The benefit this gives you is total control over your infrastructure, which can have efficiency and cost savings over working with a PaaS. How much will depend on your level of expertise and the amount of time you can allocate to optimising and managing your infrastructure. Depending on our application's architecture, we might create more than one VM for serving the application and managing the database, using load balancers and data replication. Alternatively, we may just dynamically increase the CPU speed, RAM and disk space of one or two VMs.</p> <p>The other major benefit to using IaaS over SaaS or PaaS is that it has essentially no vendor lock-in. Just about everything you do on an AWS EC2 instance will work just as well on a virtual machine provided by Google Compute Engine or Digital Ocean, or even a physical server in a pre-cloud datacentre.</p> <p>But with great power comes great responsibility. Anything we build on an IaaS solution will require regular maintenance \u2013 we will be responsible for keeping our virtual machines' software up-to-date. This is extremely important for internet-facing infrastructure, as out-of-date software can contain security vulnerabilities which could lead to our application being hacked, even if all of our own code is completely secure.</p>","title":"Infrastructure as a Service (IaaS)"},{"location":"comparisons/saas-paas-iaas/#conclusion","text":"<p>The choice between SaaS, PaaS and IaaS solutions will depend on your and your team's depth and breadth of expertise, how you aim to manage your time, and what stage of development you're in. The same application could go from a proof-of-concept build on SaaS solutions to a custom built application running on PaaS solutions, and then move over to the IaaS to improve performance or costs.</p> <p>Or you could use a mix of all three: the choice between SaaS, PaaS and IaaS does not have to all-or-nothing. Instead, it's worth making an independent decision for each area of your application stack. For example, you can have an application that runs on an AWS EC2 instance (IaaS), stores data in an AWS RDS database (PaaS) and sends users notifications on Slack (SaaS). Or you could create a Netlify website (PaaS) that communicates with a an API deployed on Code Capsules (PaaS), which in turn uses a PostgreSQL database running on an AWS EC2 instance (IaaS). The possibilities are endless.</p>","title":"Conclusion"},{"location":"deployment/","text":"<p>Code Capsules supports most front and backend frameworks and libraries. Here are step-by-step deployment guides for some of the most popular ones, but many others are supported too. For backend frameworks, the underlying technology is GCP Buildpacks.</p>","title":"Deployment guides"},{"location":"deployment/#frontend-frameworks","text":"Angular      React      Vue      Next      Static HTML      Bootstrap      HTML5up      Svelte      Caddy Docker","title":"Frontend Frameworks"},{"location":"deployment/#backend-frameworks","text":"Django      Express      Go      Java (Spring)      Next and Express      Flask      Flask and MySQL      Flask and MongoDB      Django and MongoDB      Django and MySQL      Express and MongoDB      Java (Spring)  and MySQL      Flask Docker      Laravel Docker      PHP Docker","title":"Backend Frameworks"},{"location":"deployment/#fullstack-frameworks","text":"MEAN      MERN      Next and MongoDB      Next, Express  and MongoDB      Flask HTMx","title":"Fullstack Frameworks"},{"location":"deployment/#chatbots","text":"Node.js Telegram  Bot (Webhooks)      Python Telegram  Bot (Webhooks)      Node.js Telegram  Bot (Polling)      Python Telegram  Bot (Polling)      Python Discord  Bot      Node.js Discord  Bot      WhatsApp Bot      Slack Bot    <p>We also support other backends and fullstack frameworks. See the full list of supported languages here.</p>","title":"Chatbots"},{"location":"deployment/how-to-deploy-angular-application-to-production/","text":"<p>Deploy an Angular application and learn how to host frontend code on Code Capsules. At the end of the guide, you would have deployed the application in the screenshot below and can adapt it to meet your unique needs. </p> <p></p>","title":"How to Deploy an Angular Application to Production on Code Capsules"},{"location":"deployment/how-to-deploy-angular-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy an Angular application with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set Up"},{"location":"deployment/how-to-deploy-angular-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-angular-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button.</p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for Your Apps"},{"location":"deployment/how-to-deploy-angular-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-angular-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo. </p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-angular-application-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Frontend Capsule\".</li> <li>Under \"Product\", select \"Trial - Static Site Hosting\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Type <code>npm run build</code> in \"Build Command\" and <code>dist/ng4-complete-guide</code> in \"Static Content Folder Path\".</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message. When the build is complete, a \"Live Website\" link will appear at the top of the tab.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p> <p>Once the build is complete, a \"Live Website\" link will appear at the top of the tab. Click the link and you should see your deployed application.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-bootstrap-site-to-production/","text":"<p>Deploy a Bootstrap site and learn how to host frontend code on Code Capsules.</p>","title":"How to Deploy a Bootstrap Site to Production on Code Capsules"},{"location":"deployment/how-to-deploy-bootstrap-site-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Bootstrap site with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-bootstrap-site-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-bootstrap-site-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-bootstrap-site-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-bootstrap-site-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-bootstrap-site-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Frontend Capsule\".</li> <li>Under \"Product\", select \"Trial - Static Site Hosting\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave the \"Build command\" and \"Static content folder path\" blank. </li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section. </p> <p></p> <p>Once the build is complete, a \"Live Website\" link will appear at the top of the tab. Click the link and you should see your deployed application.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-caddy-docker-site-to-production/","text":"<p>Deploy a Caddy Docker site and learn how to host frontend code on Code Capsules.</p>","title":"How to Deploy a Caddy Docker Site to Production on Code Capsules"},{"location":"deployment/how-to-deploy-caddy-docker-site-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Bootstrap site with Code Capsules, we\u2019ve provided an example application, which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \u201cFork\u201d at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-caddy-docker-site-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \u201cSign Up\u201d button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first log in. Click on the \u201cGo To Personal Team\u201d button.</p> <p>Alternatively, if you\u2019re signing in again, click on \u201cSpaces\u201d in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-caddy-docker-site-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button.</p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \u201cCreate Space\u201d.</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-caddy-docker-site-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \u201cGitHub\u201d button under \u201cGitHub Details\u201d.</p> <p></p> <p>Click the \u201cGitHub\u201d button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-caddy-docker-site-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \u201cEdit Team Repos\u201d screen will slide in from the right. Click \u201cAdd\u201d next to the demo repo, and then \u201cConfirm\u201d. All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-caddy-docker-site-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \u201cSpaces\u201d tab and open the Space you\u2019ll be using.</p> <p>Click the \u201cCreate a New Capsule for Your Space\u201d button, and follow the instructions below:</p> <ol> <li>Choose \u201cDocker Capsule\u201d.</li> <li>Under \u201cProduct\u201d, select \u201cSandbox\u201d.</li> <li>Choose the GitHub repository you forked.</li> <li>Press \u201cNext\u201d.</li> <li>Enter \"Dockerfile\" as the input in the \"Dockerfile location\" field.</li> <li>Leave the \"Docker build context\" field blank.</li> <li>Click \u201cCreate Capsule\u201d.</li> </ol> <p></p> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \u201cView Build Progress\u201d next to the \u201cBuilding Capsule\u201d message.</p> <p>Once your application is live, you can view the build log by selecting the \u201cDeploy\u201d tab and clicking the \u201cView build log\u201d link in the \u201cBuilds\u201d section.</p> <p></p> <p>Once the build is complete, a \u201cLive Website\u201d link will appear at the top of the tab. Click the link, and you should see your deployed application.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-django-application-to-production/","text":"<p>Deploy a Django application and learn how to host backend code on Code Capsules.</p>","title":"How to Deploy a Django Application to Production on Code Capsules"},{"location":"deployment/how-to-deploy-django-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Django application with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-django-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-django-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-django-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-django-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-django-application-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p> <p>Once the build is complete, a \"Live Website\" link will appear at the top of the tab. Click the link and you should see your deployed application.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-django-mongodb-application-to-production/","text":"<p>Deploy a Django MongoDB application and learn how to host backend code on Code Capsules.</p>","title":"How to Deploy a Django MongoDB Application to Production on Code Capsules"},{"location":"deployment/how-to-deploy-django-mongodb-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Django MongoDB application with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination</p>","title":"Set up"},{"location":"deployment/how-to-deploy-django-mongodb-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-django-mongodb-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-django-mongodb-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-django-mongodb-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-django-mongodb-application-to-production/#create-the-capsules","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below to create a Data Capsule:</p> <ol> <li>Choose \"Data Capsule\".</li> <li>Under \"Data Type\", select \"MongoDB Database Cluster\".  </li> <li>Under \"Product\", select \"Standard\".</li> <li>Click \"Create Capsule\".</li> </ol> <p>Navigate to the \"Space\" containing your recently created Data Capsule and click the \"New Capsule\" button. Follow the instructions below to create a Backend Capsule:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p>","title":"Create the Capsules"},{"location":"deployment/how-to-deploy-django-mongodb-application-to-production/#binding-the-capsules","text":"<p>After the two capsules have been successfully built, the next step is to bind them together. To do this, navigate to the \"Configure\" tab of your Backend Capsule. Scroll down to the \"Bind Data Capsule\" section and click on the \"Bind\" option in the bottom left. This provides the capsule with information on how to connect to the MongoDB database. </p> <p></p>","title":"Binding the Capsules"},{"location":"deployment/how-to-deploy-django-mongodb-application-to-production/#view-application","text":"<p>You can now view the application after the two capsules have been binded together. To see how it looks, click on the \"Live Website\" link at the top of your Backend Capsule tab.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"View Application"},{"location":"deployment/how-to-deploy-django-mysql-application-to-production/","text":"<p>Deploy a Django MySQL application and learn how to host backend code on Code Capsules.</p>","title":"How to Deploy a Django MySQL Application to Production on Code Capsules"},{"location":"deployment/how-to-deploy-django-mysql-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Django MySQL application with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination</p>","title":"Set up"},{"location":"deployment/how-to-deploy-django-mysql-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-django-mysql-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-django-mysql-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-django-mysql-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-django-mysql-application-to-production/#create-the-capsules","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below to create a Data Capsule:</p> <ol> <li>Choose \"Data Capsule\".</li> <li>Under \"Data Type\", select \"Mysql Database Cluster\".  </li> <li>Under \"Product\", select \"Standard\".</li> <li>Click \"Create Capsule\".</li> </ol> <p>Navigate to the \"Space\" containing your recently created Data Capsule and click the \"New Capsule\" button. Follow the instructions below to create a Backend Capsule:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p>","title":"Create the Capsules"},{"location":"deployment/how-to-deploy-django-mysql-application-to-production/#binding-the-capsules","text":"<p>After the two capsules have been successfully built, the next step is to bind them together. To do this, navigate to the \"Configure\" tab of your Backend Capsule. Scroll down to the \"Bind Data Capsule\" section and click on the \"Bind\" option in the bottom left. This provides the capsule with information on how to connect to the MySQL database. </p> <p></p>","title":"Binding the Capsules"},{"location":"deployment/how-to-deploy-django-mysql-application-to-production/#view-application","text":"<p>You can now view the application after the two capsules have been binded together. To see how it looks, click on the \"Live Website\" link at the top of your Backend Capsule tab.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"View Application"},{"location":"deployment/how-to-deploy-docker-laravel-application-to-production/","text":"<p>Deploy a Laravel Docker API and learn how to host backend code on Code Capsules.</p>","title":"How to Deploy a Laravel Docker API to Production on Code Capsules"},{"location":"deployment/how-to-deploy-docker-laravel-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Bootstrap site with Code Capsules, we\u2019ve provided an example application, which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-docker-laravel-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first log in. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-docker-laravel-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button.</p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-docker-laravel-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-docker-laravel-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-docker-laravel-application-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Docker Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Enter \"Dockerfile\" as the input in the \"Dockerfile location\" field.</li> <li>Leave the \"Docker build context\" field blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p></p> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p> <p>Once the build is complete, navigate to the \"Configure\" tab and scroll down to the \"Network Port\" section. Enter \"8000\" as the port number and click on \"Update Capsule\".</p> <p></p> <p>The Laravel docker API will now be live, and you can click on the \"Live Website\" link at the top right of the tab and navigate to the <code>/api</code> route to view it.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-docker-php-application-to-production/","text":"<p>This guide will show you how to deploy your application build with PHP and Docker to Code Capsules. By the end of this guide, you'll have an application that looks like the one below which runs on the public internet, and you'll get a URL to share with your users.</p>","title":"How to Deploy a PHP Docker Application to Production on Code Capsules"},{"location":"deployment/how-to-deploy-docker-php-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a PHP and Docker application with Code Capsules, we\u2019ve provided some example starting code, which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-docker-php-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first log in. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-docker-php-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button.</p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-docker-php-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-docker-php-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-docker-php-application-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Docker Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Enter \"Dockerfile\" as the input in the \"Dockerfile location\" field.</li> <li>Leave the \"Docker build context\" field blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p></p> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p> <p>Once the build is complete, navigate to the \"Configure\" tab and scroll down to the \"Network Port\" section. Enter \"80\" as the port number and click on \"Update Capsule\".</p> <p></p> <p>The PHP Docker application will now be live, and you can click on the \"Live Website\" link at the top right of the tab and navigate to the <code>/api</code> route to view it.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-express-application-to-production/","text":"<p>A video for this guide can be found here if you prefer watching to reading.</p> <p>Deploy an Express.js application and learn how to host backend code on Code Capsules.</p>","title":"How to Deploy an Express.js Application to Production on Code Capsules"},{"location":"deployment/how-to-deploy-express-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy an Express.js application with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-express-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-express-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\". </p> <p></p>","title":"Create a Space for Your Apps"},{"location":"deployment/how-to-deploy-express-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-express-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-express-application-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message. When the build is complete, a \"Live Website\" link will appear at the top of the tab.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p> <p>Once the build is complete, a \"Live Website\" link will appear at the top of the tab. Click the link and you should see your deployed application.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-express-mongo-application-to-production/","text":"<p>A video for this guide can be found here if you prefer watching to reading.</p> <p>Deploy an Express.js and Mongo application and learn how to host backend code on Code Capsules.</p>","title":"How to Deploy an Express.js and Mongo Application to Production on Code Capsules"},{"location":"deployment/how-to-deploy-express-mongo-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy [a/an framework/language] application with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-express-mongo-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-express-mongo-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-express-mongo-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-express-mongo-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-express-mongo-application-to-production/#create-the-capsules","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below to create a Data Capsule:</p> <ol> <li>Choose \"Data Capsule\".</li> <li>Under \"Data Type\", select \"MongoDB Database Cluster\".  </li> <li>Under \"Product\", select \"Standard\".</li> <li>Click \"Create Capsule\".</li> </ol> <p>Navigate to the \"Space\" containing your recently created Data Capsule and click the \"New Capsule\" button. Follow the instructions below to create a Backend Capsule:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p>","title":"Create the Capsules"},{"location":"deployment/how-to-deploy-express-mongo-application-to-production/#binding-the-capsules","text":"<p>Now you need to bind the two capsules together. Navigate to the \"Configure\" tab of the Backend Capsule you've just created. Scroll to the \"Bind Data Capsule\" section and click on the \"Bind\" option in the bottom left. This enables the capsule to use the MongoDB database in the Data Capsule. </p> <p></p>","title":"Binding the Capsules"},{"location":"deployment/how-to-deploy-express-mongo-application-to-production/#view-application","text":"<p>After restarting the capsule, the application will now be ready to be viewed. Click the \"Live Website\" link at the top of the capsule tab and you should see your deployed application.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"View Application"},{"location":"deployment/how-to-deploy-flask-application-to-production/","text":"<p>Deploy a Flask application and learn how to host backend code on Code Capsules. </p>","title":"How to Deploy a Flask Application to Production on Code Capsules"},{"location":"deployment/how-to-deploy-flask-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Flask application with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-flask-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-flask-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-flask-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-flask-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-flask-application-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p> <p>Once the build is complete, a \"Live Website\" link will appear at the top of the tab. Click the link and you should see your deployed application.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-flask-docker-application-to-production/","text":"<p>Deploy a Flask Docker application and learn how to host backend code on Code Capsules.</p>","title":"How to Deploy a Flask Docker Application to Production on Code Capsules"},{"location":"deployment/how-to-deploy-flask-docker-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Bootstrap site with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-flask-docker-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-flask-docker-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button.</p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-flask-docker-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-flask-docker-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-flask-docker-application-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Docker Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Enter \"Dockerfile\" as the input in the \"Dockerfile location\" field.</li> <li>Leave the \"Docker build context\" field blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p></p> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p> <p>Once the build is complete, navigate to the \"Configure\" tab and scroll down to the \"Network Port\" section. Enter \"5000\" as the port number and click on \"Update Capsule\".</p> <p></p> <p>The Flask application will now be live, and you can click on the \"Live Website\" link at the top right of the tab to view it.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-flask-htmx-application-to-production/","text":"<p>Deploy a Flask HTMx application and learn how to host backend code on Code Capsules. </p>","title":"How to Deploy a Flask HTMx Application to Production on Code Capsules"},{"location":"deployment/how-to-deploy-flask-htmx-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Flask HTMx application with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-flask-htmx-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-flask-htmx-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-flask-htmx-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-flask-htmx-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-flask-htmx-application-to-production/#create-the-capsules","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below to create a Data Capsule:</p> <ol> <li>Choose \"Data Capsule\".</li> <li>Under \"Data Type\", select \"A persistent storage mounted directly to your capsule.\"  </li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Click \"Create Capsule\".</li> </ol> <p>Navigate to the \"Space\" containing your recently created Data Capsule and click the \"New Capsule\" button. Follow the instructions below to create a Backend Capsule:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p>","title":"Create the Capsules"},{"location":"deployment/how-to-deploy-flask-htmx-application-to-production/#binding-the-capsules","text":"<p>Now you need to bind the two capsules together. Navigate to the \"Configure\" tab of the Backend Capsule you've just created. Scroll to the \"Bind Data Capsule\" section and click on the \"Bind\" option in the bottom left. This enables the capsule to use the SQLite database in the Data Capsule. </p> <p></p>","title":"Binding the Capsules"},{"location":"deployment/how-to-deploy-flask-htmx-application-to-production/#view-application","text":"<p>After restarting the capsule, the application will now be ready to be viewed. Click the \"Live Website\" link at the top of the capsule tab and you should see your deployed application.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"View Application"},{"location":"deployment/how-to-deploy-flask-mongo-application-to-production/","text":"<p>Deploy a Flask MongoDB application and learn how to host backend code on Code Capsules. </p>","title":"How to Deploy a Flask MongoDB Application to Production on Code Capsules"},{"location":"deployment/how-to-deploy-flask-mongo-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Flask MongoDB application with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-flask-mongo-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-flask-mongo-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-flask-mongo-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-flask-mongo-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-flask-mongo-application-to-production/#create-the-capsules","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below to create a Data Capsule:</p> <ol> <li>Choose \"Data Capsule\".</li> <li>Under \"Data Type\", select \"MongoDB Database Cluster\".  </li> <li>Under \"Product\", select \"Standard\".</li> <li>Click \"Create Capsule\".</li> </ol> <p>Navigate to the \"Space\" containing your recently created Data Capsule and click the \"New Capsule\" button. Follow the instructions below to create a Backend Capsule:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p>","title":"Create the Capsules"},{"location":"deployment/how-to-deploy-flask-mongo-application-to-production/#binding-the-capsules","text":"<p>Now you need to bind the two capsules together. Navigate to the \"Configure\" tab of the Backend Capsule you've just created. Scroll to the \"Bind Data Capsule\" section and click on the \"Bind\" option in the bottom left. This enables the capsule to use the MongoDB database in the Data Capsule. </p> <p></p>","title":"Binding the Capsules"},{"location":"deployment/how-to-deploy-flask-mongo-application-to-production/#view-application","text":"<p>After restarting the capsule, the application will now be ready to be viewed. Click the \"Live Website\" link at the top of the capsule tab and you should see your deployed application.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"View Application"},{"location":"deployment/how-to-deploy-flask-mysql-application-to-production/","text":"<p>Deploy a Flask MySQL application and learn how to host backend code on Code Capsules. </p>","title":"How to Deploy a Flask MySQL Application to Production on Code Capsules"},{"location":"deployment/how-to-deploy-flask-mysql-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Flask MySQL application with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-flask-mysql-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-flask-mysql-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-flask-mysql-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-flask-mysql-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-flask-mysql-application-to-production/#create-the-capsules","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below to create a Data Capsule:</p> <ol> <li>Choose \"Data Capsule\".</li> <li>Under \"Data Type\", select \"Mysql Database Cluster\".  </li> <li>Under \"Product\", select \"Standard\".</li> <li>Click \"Create Capsule\".</li> </ol> <p>Navigate to the \"Space\" containing your recently created Data Capsule and click the \"New Capsule\" button. Follow the instructions below to create a Backend Capsule:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p>","title":"Create the Capsules"},{"location":"deployment/how-to-deploy-flask-mysql-application-to-production/#binding-the-capsules","text":"<p>After the two capsules have been successfully built, the next step is to bind them together. To do this, navigate to the \"Configure\" tab of your Backend Capsule. Scroll down to the \"Bind Data Capsule\" section and click on the \"Bind\" option in the bottom left. This provides the capsule with information on how to connect to the MySQL database. </p> <p></p>","title":"Binding the Capsules"},{"location":"deployment/how-to-deploy-flask-mysql-application-to-production/#edit-database_url-environment-variable","text":"<p>Once the binding is complete, you have to append <code>+pymysql</code> after <code>mysql</code> in the <code>DATABASE_URL</code> value under the \"Capsule parameters\" section on the \"Configure\" tab. </p> <p></p> <p>Confirm your changes by clicking on \"Update Capsule\" then restart your capsule by toggling the radio button in the top right off and on again.</p>","title":"Edit <code>DATABASE_URL</code> Environment Variable"},{"location":"deployment/how-to-deploy-flask-mysql-application-to-production/#view-application","text":"<p>After restarting the capsule, the application will now be ready to be viewed. Click the \"Live Website\" link at the top of the capsule tab and you should see your deployed application.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"View Application"},{"location":"deployment/how-to-deploy-go-application-to-production/","text":"<p>Deploy a Go application and learn how to host backend code on Code Capsules. </p>","title":"How to Deploy a Go Application to Production on Code Capsules"},{"location":"deployment/how-to-deploy-go-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Go application with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-go-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-go-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-go-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-go-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-go-application-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p> <p>Once the build is complete, a \"Live Website\" link will appear at the top of the tab. Click the link and you should see your deployed application.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-html5up-template-to-production/","text":"<p>Deploy an HTML5 template and learn how to host frontend code on Code Capsules. </p>","title":"How to Deploy an HTML5 Template to Production on Code Capsules"},{"location":"deployment/how-to-deploy-html5up-template-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy an HTML5 template to Code Capsules, we'll be using a template from HTML5 UP. Head over to the HTML5 UP site and download the zip file for any template you find there. Unzip this template file in your preferred working directory on your local machine.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-html5up-template-to-production/#create-a-repository","text":"<p>Sign in to GitHub and create a repository for the template site you downloaded.</p> <p>We'll need to push the unzipped template files to your newly created repository for Code Capsules to deploy the template site from your GitHub account. To do this, initialize a git repository in the project's root folder on your machine by running the command <code>git init</code> from a terminal window while in the root folder. </p>","title":"Create a Repository"},{"location":"deployment/how-to-deploy-html5up-template-to-production/#push-to-github","text":"<p>Before you can push to GitHub, you need to add the untracked files to your local repository. Run <code>git add -A</code> in a terminal window from the project's root folder to do so. After adding the files, commit your changes by running <code>git commit -m \"Initial app commit\"</code>.</p> <p>Run the command below to set the remote repository for your local repo. Be sure to replace <code>&lt;YOUR-REMOTE-GITHUB-URL&gt;</code> with the actual URL for your remote repository. </p> <pre><code>git remote add origin &lt;YOUR-REMOTE-GITHUB-URL&gt;\n</code></pre> <p>Push the unzipped files to your remote repository by running <code>git push origin main</code>.</p>","title":"Push to GitHub"},{"location":"deployment/how-to-deploy-html5up-template-to-production/#link-to-github","text":"<p>To link Code Capsules to your remote GitHub repository, log in to your Code Capsules account and click your profile image at the top right of the screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository you recently pushed to.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-html5up-template-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the \"Team Repos\" section. An \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-html5up-template-to-production/#create-a-space-for-your-site","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this site, or you can create a new Space. In the \"Spaces\" tab, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Site"},{"location":"deployment/how-to-deploy-html5up-template-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Frontend Capsule\".</li> <li>Under \"Product\", select \"Trial - Static Site Hosting\".</li> <li>Choose the GitHub repository with the HTML5up site.</li> <li>Press \"Next\".</li> <li>Leave the \"Build command\" and \"Static content folder path\" blank. </li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section. </p> <p></p> <p>Once the build is complete, a \"Live Website\" link will appear at the top of the tab. Click the link and you should see your deployed site.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-java-application-to-production/","text":"<p>Deploy a Java application and learn how to host backend code on Code Capsules. </p>","title":"How to Deploy a Java Application to Production on Code Capsules"},{"location":"deployment/how-to-deploy-java-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Java application with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set Up"},{"location":"deployment/how-to-deploy-java-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-java-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-java-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-java-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-java-application-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p> <p>Once the build is complete, a \"Live Website\" link will appear at the top of the tab. Click the link and you should see your deployed application.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-java-mysql-application-to-production/","text":"<p>Deploy a Java MySQL application and learn how to host backend code on Code Capsules.</p>","title":"How to Deploy a Java MySQL Application to Production on Code Capsules"},{"location":"deployment/how-to-deploy-java-mysql-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Java MySQL application with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-java-mysql-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-java-mysql-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-java-mysql-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-java-mysql-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-java-mysql-application-to-production/#create-the-capsules","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below to create a Data Capsule:</p> <ol> <li>Choose \"Data Capsule\".</li> <li>Under \"Data Type\", select \"Mysql Database Cluster\".  </li> <li>Under \"Product\", select \"Standard\".</li> <li>Click \"Create Capsule\".</li> </ol> <p>Navigate to the \"Space\" containing your recently created Data Capsule and click the \"New Capsule\" button. Follow the instructions below to create a Backend Capsule:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p>","title":"Create the Capsules"},{"location":"deployment/how-to-deploy-java-mysql-application-to-production/#binding-the-capsules","text":"<p>After the two capsules have been successfully built, the next step is to bind them together. To do this, navigate to the \"Configure\" tab of your Backend Capsule. Scroll down to the \"Bind Data Capsule\" section and click on the \"Bind\" option in the bottom left. This provides the capsule with information on how to connect to the MySQL database. </p> <p></p>","title":"Binding the Capsules"},{"location":"deployment/how-to-deploy-java-mysql-application-to-production/#view-application","text":"<p>After restarting the capsule, the application will now be ready to be viewed. Click the \"Live Website\" link at the top of the capsule tab and you should see your deployed application.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"View Application"},{"location":"deployment/how-to-deploy-mean-stack-application-to-production/","text":"<p>A video for this guide can be found here if you prefer watching to reading.</p> <p>Deploy a MEAN stack application and learn how to host backend code on Code Capsules.</p>","title":"How to Deploy a MEAN Stack Application to Production on Code Capsules"},{"location":"deployment/how-to-deploy-mean-stack-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a MEAN stack application with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-mean-stack-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-mean-stack-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-mean-stack-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-mean-stack-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-mean-stack-application-to-production/#create-the-capsules","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below to create a Data Capsule:</p> <ol> <li>Choose \"Data Capsule\".</li> <li>Under \"Data Type\", select \"MongoDB Database Cluster\".  </li> <li>Under \"Product\", select \"Standard\".</li> <li>Click \"Create Capsule\".</li> </ol> <p>Navigate to the \"Space\" containing your recently created Data Capsule and click the \"New Capsule\" button. Follow the instructions below to create a Backend Capsule:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p>","title":"Create the Capsules"},{"location":"deployment/how-to-deploy-mean-stack-application-to-production/#binding-the-capsules","text":"<p>Now you need to bind the two capsules together. Navigate to the \"Configure\" tab of the Backend Capsule you've just created. Scroll to the \"Bind Data Capsule\" section and click on the \"Bind\" option in the bottom left. This enables the capsule to use the MongoDB database in the Data Capsule. </p> <p></p>","title":"Binding the Capsules"},{"location":"deployment/how-to-deploy-mean-stack-application-to-production/#edit-database_url-environment-variable","text":"<p>Once the binding is complete, you have to append <code>/app?authSource=admin</code> to the <code>DATABASE_URL</code> value under the \"Capsule parameters\" section on the \"Configure\" tab. </p> <p></p> <p>Confirm your changes by clicking on \"Update Capsule\" then restart your capsule by toggling the radio button in the top right off and on again.</p>","title":"Edit <code>DATABASE_URL</code> Environment Variable"},{"location":"deployment/how-to-deploy-mean-stack-application-to-production/#view-application","text":"<p>After restarting the capsule, the application will now be ready to be viewed. Click the \"Live Website\" link at the top of the capsule tab and you should see your deployed application.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"View Application"},{"location":"deployment/how-to-deploy-mern-stack-application-to-production/","text":"<p>A video for this guide can be found here if you prefer watching to reading.</p> <p>Deploy a MERN stack application and learn how to host backend code on Code Capsules.</p>","title":"How to Deploy a MERN Stack Application to Production on Code Capsules"},{"location":"deployment/how-to-deploy-mern-stack-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a MERN stack application with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-mern-stack-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-mern-stack-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-mern-stack-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-mern-stack-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-mern-stack-application-to-production/#create-the-capsules","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below to create a Data Capsule:</p> <ol> <li>Choose \"Data Capsule\".</li> <li>Under \"Data Type\", select \"MongoDB Database Cluster\".  </li> <li>Under \"Product\", select \"Standard\".</li> <li>Click \"Create Capsule\".</li> </ol> <p>Navigate to the \"Space\" containing your recently created Data Capsule and click the \"New Capsule\" button. Follow the instructions below to create a Backend Capsule:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p>","title":"Create the Capsules"},{"location":"deployment/how-to-deploy-mern-stack-application-to-production/#binding-the-capsules","text":"<p>Now you need to bind the two capsules together. Navigate to the \"Configure\" tab of the Backend Capsule you've just created. Scroll to the \"Bind Data Capsule\" section and click on the \"Bind\" option in the bottom left. This enables the capsule to use the MongoDB database in the Data Capsule. </p> <p></p>","title":"Binding the Capsules"},{"location":"deployment/how-to-deploy-mern-stack-application-to-production/#edit-database_url-environment-variable","text":"<p>Once the binding is complete, you have to append <code>/app?authSource=admin</code> to the <code>DATABASE_URL</code> value under the \"Capsule parameters\" section on the \"Configure\" tab. </p> <p></p> <p>Confirm your changes by clicking on \"Update Capsule\" then restart your capsule by toggling the radio button in the top right off and on again.</p>","title":"Edit <code>DATABASE_URL</code> Environment Variable"},{"location":"deployment/how-to-deploy-mern-stack-application-to-production/#view-application","text":"<p>After restarting the capsule, the application will now be ready to be viewed. Click the \"Live Website\" link at the top of the capsule tab and you should see your deployed application.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"View Application"},{"location":"deployment/how-to-deploy-next-application-to-production/","text":"<p>Deploy a Next application and learn how to host backend code on Code Capsules.</p>","title":"How to Deploy a Next Application to Production on Code Capsules"},{"location":"deployment/how-to-deploy-next-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Next application with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-next-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-next-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-next-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-next-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-next-application-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p> <p>Once the build is complete, a \"Live Website\" link will appear at the top of the tab. Click the link and you should see your deployed application.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-next-express-application-to-production/","text":"<p>Deploy a Next.js and Express.js application and learn how to host backend code on Code Capsules.</p>","title":"How to Deploy a Next.js and Express.js Application to Production on Code Capsules"},{"location":"deployment/how-to-deploy-next-express-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Next.js and Express.js application with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-next-express-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-next-express-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-next-express-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-next-express-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-next-express-application-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p> <p>Once the build is complete, a \"Live Website\" link will appear at the top of the tab. Click the link and you should see your deployed application.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-next-express-mongo-application-to-production/","text":"<p>Deploy a Next.js, Express.js and Mongo application and learn how to host backend code on Code Capsules.</p>","title":"How to Deploy a Next.js, Express.js and Mongo Application to Production on Code Capsules"},{"location":"deployment/how-to-deploy-next-express-mongo-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Next.js, Express.js and Mongo application with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-next-express-mongo-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-next-express-mongo-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-next-express-mongo-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-next-express-mongo-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-next-express-mongo-application-to-production/#create-the-capsules","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below to create a Data Capsule:</p> <ol> <li>Choose \"Data Capsule\".</li> <li>Under \"Data Type\", select \"MongoDB Database Cluster\".  </li> <li>Under \"Product\", select \"Standard\".</li> <li>Click \"Create Capsule\".</li> </ol> <p>Navigate to the \"Space\" containing your recently created Data Capsule and click the \"New Capsule\" button. Follow the instructions below to create a Backend Capsule:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p>","title":"Create the Capsules"},{"location":"deployment/how-to-deploy-next-express-mongo-application-to-production/#binding-the-capsules","text":"<p>Now you need to bind the two capsules together. Navigate to the \"Configure\" tab of the Backend Capsule you've just created. Scroll to the \"Bind Data Capsule\" section and click on the \"Bind\" option in the bottom left. This enables the capsule to use the MongoDB database in the Data Capsule. </p> <p></p>","title":"Binding the Capsules"},{"location":"deployment/how-to-deploy-next-express-mongo-application-to-production/#edit-database_url-environment-variable","text":"<p>Once the binding is complete, you have to append <code>/app?authSource=admin</code> to the <code>DATABASE_URL</code> value under the \"Capsule parameters\" section on the \"Configure\" tab. </p> <p></p> <p>Confirm your changes by clicking on \"Update Capsule\" then restart your capsule by toggling the radio button in the top right off and on again.</p>","title":"Edit <code>DATABASE_URL</code> Environment Variable"},{"location":"deployment/how-to-deploy-next-express-mongo-application-to-production/#view-application","text":"<p>After restarting the capsule, the application will now be ready to be viewed. Click the \"Live Website\" link at the top of the capsule tab and you should see your deployed application.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"View Application"},{"location":"deployment/how-to-deploy-next-mongo-application-to-production/","text":"<p>Deploy a Next.js and Mongo application and learn how to host backend code on Code Capsules.</p>","title":"How to Deploy a Next.js and Mongo Application to Production on Code Capsules"},{"location":"deployment/how-to-deploy-next-mongo-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy [a/an framework/language] application with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-next-mongo-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-next-mongo-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-next-mongo-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-next-mongo-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-next-mongo-application-to-production/#create-the-capsules","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below to create a Data Capsule:</p> <ol> <li>Choose \"Data Capsule\".</li> <li>Under \"Data Type\", select \"MongoDB Database Cluster\".  </li> <li>Under \"Product\", select \"Standard\".</li> <li>Click \"Create Capsule\".</li> </ol> <p>Navigate to the \"Space\" containing your recently created Data Capsule and click the \"New Capsule\" button. Follow the instructions below to create a Backend Capsule:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p>","title":"Create the Capsules"},{"location":"deployment/how-to-deploy-next-mongo-application-to-production/#binding-the-capsules","text":"<p>Now you need to bind the two capsules together. Navigate to the \"Configure\" tab of the Backend Capsule you've just created. Scroll to the \"Bind Data Capsule\" section and click on the \"Bind\" option in the bottom left. This enables the capsule to use the MongoDB database in the Data Capsule. </p> <p></p>","title":"Binding the Capsules"},{"location":"deployment/how-to-deploy-next-mongo-application-to-production/#view-application","text":"<p>After restarting the capsule, the application will now be ready to be viewed. Click the \"Live Website\" link at the top of the capsule tab and you should see your deployed application.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"View Application"},{"location":"deployment/how-to-deploy-node-discord-bot-to-production/","text":"<p>Deploy a Node.js Discord Bot and learn how to host backend code on Code Capsules.</p>","title":"How to Deploy a Node.js Discord Bot to Production on Code Capsules in 5 Minutes"},{"location":"deployment/how-to-deploy-node-discord-bot-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Node.js Discord Bot with Code Capsules, we\u2019ve provided an example bot which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example bot repository by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-node-discord-bot-to-production/#create-a-space-for-your-bot","text":"<p>Log in to your Code Capsules account and navigate to the \"Spaces\" tab. Once there, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Bot"},{"location":"deployment/how-to-deploy-node-discord-bot-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-node-discord-bot-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the \"Team Repos\" section. An \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the bot repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-node-discord-bot-to-production/#register-the-bot","text":"<p>You'll need a Discord user account before you can create a Discord bot. Head over to Discord and create an account if you don't already have one.</p> <p>When you've signed in to Discord, follow the steps below:</p> <ol> <li>Click on the \"+\" icon in the left toolbar to create a server to contain your channels. </li> <li>Navigate to the Application Page.</li> <li>Click on the \"New Application\" button.</li> <li>Give the application a name and click \"Create\".</li> <li>Go to the \"Bot\" tab and click \"Add Bot\". Confirm your decision by clicking, \"Yes, do it!\" </li> <li>Click the \"Copy\" button under the \"TOKEN\" section to copy your bot's token.  </li> <li>Go to the \"OAuth2/URL Generator\" tab and select the \"bot\" option under the \"Scopes\" section.  </li> <li>Select all the text permission options under the \"Bot Permissions\" section. </li> <li>Click the \"Copy\" button under the, \"Generated URL\" section </li> <li>Paste the url you copied in the previous step in another browser tab and add the bot to the server you created in the first step. Click \"Continue\" to confirm your changes. </li> </ol> <p>After actioning these steps, your bot will now have access to all the channels in the server you added it to.</p>","title":"Register the Bot"},{"location":"deployment/how-to-deploy-node-discord-bot-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-node-discord-bot-to-production/#add-a-token-environment-variable","text":"<p>Once the build is complete, you have to add a <code>TOKEN</code> environment variable on the \"Configure\" tab under the \"Capsule parameters\" section. Assign it the value of the token you copied in step 6 of the Register the Bot section above. </p> <p></p> <p>Confirm your changes by clicking on \"Update Capsule\", then restart your Capsule by toggling the radio button in the top right off and on again.</p>","title":"Add a <code>TOKEN</code> Environment Variable"},{"location":"deployment/how-to-deploy-node-discord-bot-to-production/#chat-with-the-bot","text":"<p>The bot will be able to respond to messages after Code Capsules finishes building it. When this is done, you cand send messages in the general channel of your Discord server and the bot will echo them.</p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Chat with the Bot"},{"location":"deployment/how-to-deploy-node-telegram-bot-to-production/","text":"<p>Deploy a Node.js Telegram Bot and learn how to host backend code on Code Capsules for free.</p>","title":"How to Deploy a Node.js Telegram Bot to Production on Code Capsules For Free in 5 Minutes"},{"location":"deployment/how-to-deploy-node-telegram-bot-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Node.js Telegram Bot with Code Capsules, we\u2019ve provided an example bot which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example bot repository by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-node-telegram-bot-to-production/#create-a-space-for-your-bot","text":"<p>Log into your Code Capsules account and navigate to the \"Spaces\" tab. Once there, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Bot"},{"location":"deployment/how-to-deploy-node-telegram-bot-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-node-telegram-bot-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the \"Team Repos\" section. An \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-node-telegram-bot-to-production/#register-the-bot","text":"<p>You'll need a Telegram user account before you can create a Telegram bot. Head over to Telegram and create an account if you don't already have one.</p> <p>When you've signed in to Telegram, search for \"BotFather\" (a bot for managing all other Telegram bots) and start a new chat with it. Follow the steps below to register a new bot with the BotFather:</p> <ol> <li>Type <code>/start</code> and press send.</li> <li>Type <code>/newbot</code> and press send.</li> <li>Choose a name for your bot.</li> <li>Choose a username for your bot that ends in \"bot\".</li> </ol> <p>The BotFather will respond with a message containing an access token for your newly created bot. This access token will allow our application to access the Telegram API and tell our bot what to do when receiving different messages from users.</p> <p>To confirm that your bot was created successfully, search for the bot's username. You should be able to see it and start a conversation with it, although it won't respond as we haven't written the bot's logic yet.</p>","title":"Register the Bot"},{"location":"deployment/how-to-deploy-node-telegram-bot-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-node-telegram-bot-to-production/#add-a-bot_token-environment-variable","text":"<p>Once the build is complete, you have to add a <code>BOT_TOKEN</code> environment variable on the \"Configure\" tab under the \"Capsule parameters\" section. Assign it the value of the access token you were given by the BotFather when you registered the bot.</p> <p></p> <p>Confirm your changes by clicking on \"Update Capsule\", then restart your Capsule by toggling the radio button in the top right off and on again.</p>","title":"Add a <code>BOT_TOKEN</code> Environment Variable"},{"location":"deployment/how-to-deploy-node-telegram-bot-to-production/#add-webhook-url","text":"<p>The next step is to add a webhook URL in the bot's logic to tell Telegram how to notify your bot when it receives a message. Clone the repository you forked in the first step of this guide to your local development environment. Open <code>index.js</code> and edit the code snippet below by replacing <code>&lt;YOUR-CAPSULE-URL-HERE&gt;</code> with the actual value for your Capsule's URL. To get this value, navigate to your Capsule's \"Overview\" tab. Copy the value under the \"Domains\" section and paste it in place of <code>&lt;YOUR-CAPSULE-URL-HERE&gt;</code> in the code snippet below.</p> <pre><code>bot.launch({\n    webhook: {\n      domain: '&lt;YOUR-CAPSULE-URL-HERE&gt;',\n      port: process.env.PORT\n    }\n})\n</code></pre> <p>Push your changes to GitHub by running <code>git push</code> in a terminal window while in the project's root folder. Code Capsules will automatically rebuild your bot after it notices changes to the <code>main</code> branch of your forked repository.</p>","title":"Add Webhook URL"},{"location":"deployment/how-to-deploy-node-telegram-bot-to-production/#chat-with-the-bot","text":"<p>The bot will be able to respond to messages after Code Capsules finishes building it. When this is done, search for your bot on Telegram using the username you assigned it and start a chat with it. The bot has been programmed to respond to <code>/start</code> and echo any messages you send it.</p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Chat with the Bot"},{"location":"deployment/how-to-deploy-polling-node-telegram-bot-to-production/","text":"<p>This guide uses polling, which is easier to deploy but not recommended. See this guide for how to implement the same bot using webhooks.</p> <p>Deploy a Node.js Telegram Bot and learn how to host backend code on Code Capsules for free.</p>","title":"How to Deploy a Node.js Telegram Bot to Production on Code Capsules For Free in 5 Minutes"},{"location":"deployment/how-to-deploy-polling-node-telegram-bot-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Node.js Telegram Bot with Code Capsules, we\u2019ve provided an example bot which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example bot repository by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-polling-node-telegram-bot-to-production/#create-a-space-for-your-bot","text":"<p>Log in to your Code Capsules account and navigate to the \"Spaces\" tab. Once there, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Bot"},{"location":"deployment/how-to-deploy-polling-node-telegram-bot-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-polling-node-telegram-bot-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the \"Team Repos\" section. An \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-polling-node-telegram-bot-to-production/#register-the-bot","text":"<p>You'll need a Telegram user account before you can create a Telegram bot. Head over to Telegram and create an account if you don't already have one.</p> <p>When you've signed in to Telegram, search for \"BotFather\" (a bot for managing all other Telegram bots) and start a new chat with it. Follow the steps below to register a new bot with the BotFather:</p> <ol> <li>Type <code>/start</code> and press send.</li> <li>Type <code>/newbot</code> and press send.</li> <li>Choose a name for your bot.</li> <li>Choose a username for your bot that ends in \"bot\".</li> </ol> <p>The BotFather will respond with a message containing an access token for your newly created bot. This access token will allow our application to access the Telegram API and tell our bot what to do when receiving different messages from users.</p> <p>To confirm that your bot was created successfully, search for the bot's username. You should be able to see it and start a conversation with it, although it won't respond as we haven't written the bot's logic yet.</p>","title":"Register the Bot"},{"location":"deployment/how-to-deploy-polling-node-telegram-bot-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-polling-node-telegram-bot-to-production/#add-a-bot_token-environment-variable","text":"<p>Once the build is complete, you have to add a <code>BOT_TOKEN</code> environment variable on the \"Configure\" tab under the \"Capsule parameters\" section. Assign it the value of the access token you were given by the BotFather when you registered the bot.</p> <p></p> <p>Confirm your changes by clicking on \"Update Capsule\" then restart your Capsule by toggling the radio button in the top right off and on again.</p>","title":"Add a <code>BOT_TOKEN</code> Environment Variable"},{"location":"deployment/how-to-deploy-polling-node-telegram-bot-to-production/#chat-with-the-bot","text":"<p>The bot will be able to respond to messages after restarting the Capsule. When this is done, search for your bot on Telegram using the username you assigned it and start a chat with it. The bot has been programmed to respond to <code>/start</code> and echo any messages you send it.</p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Chat with the Bot"},{"location":"deployment/how-to-deploy-polling-python-telegram-bot-to-production/","text":"<p>This guide uses polling, which is easier to deploy but not recommended. See this guide for how to implement the same bot using webhooks.</p> <p>Deploy a Python Telegram Bot and learn how to host backend code on Code Capsules for free.</p>","title":"How to Deploy a Python Telegram Bot to Production on Code Capsules For Free in 5 Minutes"},{"location":"deployment/how-to-deploy-polling-python-telegram-bot-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Python Telegram Bot with Code Capsules, we\u2019ve provided an example bot which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example bot repository by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-polling-python-telegram-bot-to-production/#create-a-space-for-your-bot","text":"<p>Log into your Code Capsules account and navigate to the \"Spaces\" tab. Once there, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Bot"},{"location":"deployment/how-to-deploy-polling-python-telegram-bot-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-polling-python-telegram-bot-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the \"Team Repos\" section. An \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-polling-python-telegram-bot-to-production/#register-the-bot","text":"<p>You'll need a Telegram user account before you can create a Telegram bot. Head over to Telegram and create an account if you don't already have one.</p> <p>When you've signed in to Telegram, search for \"BotFather\" (a bot for managing all other Telegram bots) and start a new chat with it. Follow the steps below to register a new bot with the BotFather:</p> <ol> <li>Type <code>/start</code> and press send.</li> <li>Type <code>/newbot</code> and press send.</li> <li>Choose a name for your bot.</li> <li>Choose a username for your bot that ends in \"bot\".</li> </ol> <p>The BotFather will respond with a message containing an access token for your newly created bot. This access token will allow our application to access the Telegram API and tell our bot what to do when receiving different messages from users.</p> <p>To confirm that your bot was created successfully, search for the bot's username. You should be able to see it and start a conversation with it, although it won't respond as we haven't written the bot's logic yet.</p>","title":"Register the Bot"},{"location":"deployment/how-to-deploy-polling-python-telegram-bot-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-polling-python-telegram-bot-to-production/#add-a-bot_token-environment-variable","text":"<p>Once the build is complete, you have to add a <code>BOT_TOKEN</code> environment variable on the \"Configure\" tab under the \"Capsule parameters\" section. Assign it the value of the access token you were given by the BotFather when you registered the bot.</p> <p></p> <p>Confirm your changes by clicking on \"Update Capsule\", then restart your capsule by toggling the radio button in the top right off and on again.</p>","title":"Add a <code>BOT_TOKEN</code> Environment Variable"},{"location":"deployment/how-to-deploy-polling-python-telegram-bot-to-production/#chat-with-the-bot","text":"<p>The bot will be able to respond to messages after restarting the Capsule. When this is done, search for your bot on Telegram using the username you assigned it and start a chat with it. The bot has been programmed to respond to <code>/start</code> and echo any messages you send it.</p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Chat with the Bot"},{"location":"deployment/how-to-deploy-python-discord-bot-to-production/","text":"<p>Deploy a Python Discord Bot and learn how to host backend code on Code Capsules.</p>","title":"How to Deploy a Python Discord Bot to Production on Code Capsules in 5 Minutes"},{"location":"deployment/how-to-deploy-python-discord-bot-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Python Discord Bot with Code Capsules, we\u2019ve provided an example bot which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example bot repository by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-python-discord-bot-to-production/#create-a-space-for-your-bot","text":"<p>Log in to your Code Capsules account and navigate to the \"Spaces\" tab. Once there, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Bot"},{"location":"deployment/how-to-deploy-python-discord-bot-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-python-discord-bot-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the \"Team Repos\" section. An \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the bot repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-python-discord-bot-to-production/#register-the-bot","text":"<p>You'll need a Discord user account before you can create a Discord bot. Head over to Discord and create an account if you don't already have one.</p> <p>When you've signed in to Discord, follow the steps below:</p> <ol> <li>Click on the \"+\" icon in the left toolbar to create a server to contain your channels. </li> <li>Navigate to the Application Page.</li> <li>Click on the \"New Application\" button.</li> <li>Give the application a name and click \"Create\".</li> <li>Go to the \"Bot\" tab and click \"Add Bot\". Confirm your decision by clicking, \"Yes, do it!\" </li> <li>Click the \"Copy\" button under the \"TOKEN\" section to copy your bot's token.  </li> <li>Go to the \"OAuth2/URL Generator\" tab and select the \"bot\" option under the \"Scopes\" section.  </li> <li>Select all the text permission options under the \"Bot Permissions\" section. </li> <li>Click the \"Copy\" button under the, \"Generated URL\" section </li> <li>Paste the url you copied in the previous step in another browser tab and add the bot to the server you created in the first step. Click \"Continue\" to confirm your changes. </li> </ol> <p>After actioning these steps, your bot will now have access to all the channels in the server you added it to.</p>","title":"Register the Bot"},{"location":"deployment/how-to-deploy-python-discord-bot-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-python-discord-bot-to-production/#add-a-token-environment-variable","text":"<p>Once the build is complete, you have to add a <code>TOKEN</code> environment variable on the \"Configure\" tab under the \"Capsule parameters\" section. Assign it the value of the token you copied in step 6 of the Register the Bot section above. </p> <p></p> <p>Confirm your changes by clicking on \"Update Capsule\", then restart your Capsule by toggling the radio button in the top right off and on again.</p>","title":"Add a <code>TOKEN</code> Environment Variable"},{"location":"deployment/how-to-deploy-python-discord-bot-to-production/#chat-with-the-bot","text":"<p>The bot will be able to respond to messages after Code Capsules finishes building it. When this is done, you cand send messages in the general channel of your Discord server and the bot will echo them.</p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Chat with the Bot"},{"location":"deployment/how-to-deploy-python-telegram-bot-to-production/","text":"<p>A video for this guide can be found here if you prefer watching to reading.</p> <p>Deploy a Python Telegram Bot and learn how to host backend code on Code Capsules for free.</p>","title":"How to Deploy a Python Telegram Bot to Production on Code Capsules For Free in 5 Minutes"},{"location":"deployment/how-to-deploy-python-telegram-bot-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Python Telegram Bot with Code Capsules, we\u2019ve provided an example bot which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example bot repository by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-python-telegram-bot-to-production/#create-a-space-for-your-bot","text":"<p>Log in to your Code Capsules account and navigate to the \"Spaces\" tab. Once there, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Bot"},{"location":"deployment/how-to-deploy-python-telegram-bot-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-python-telegram-bot-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the \"Team Repos\" section. An \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-python-telegram-bot-to-production/#register-the-bot","text":"<p>You'll need a Telegram user account before you can create a Telegram bot. Head over to Telegram and create an account if you don't already have one.</p> <p>When you've signed in to Telegram, search for \"BotFather\" (a bot for managing all other Telegram bots) and start a new chat with it. Follow the steps below to register a new bot with the BotFather:</p> <ol> <li>Type <code>/start</code> and press send.</li> <li>Type <code>/newbot</code> and press send.</li> <li>Choose a name for your bot.</li> <li>Choose a username for your bot that ends in \"bot\".</li> </ol> <p>The BotFather will respond with a message containing an access token for your newly created bot. This access token will allow our application to access the Telegram API and tell our bot what to do when receiving different messages from users.</p> <p>To confirm that your bot was created successfully, search for the bot's username. You should be able to see it and start a conversation with it, although it won't respond as we haven't written the bot's logic yet.</p>","title":"Register the Bot"},{"location":"deployment/how-to-deploy-python-telegram-bot-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-python-telegram-bot-to-production/#add-environment-variables","text":"<p>Once the build is complete, you have to add <code>BOT_TOKEN</code> and <code>URL</code> environment variables on the \"Configure\" tab under the \"Capsule parameters\" section.</p>","title":"Add Environment Variables"},{"location":"deployment/how-to-deploy-python-telegram-bot-to-production/#bot_token","text":"<p>Assign the <code>BOT_TOKEN</code> variable the value of the access token you were given by the BotFather when you registered the bot.</p> <p></p>","title":"<code>BOT_TOKEN</code>"},{"location":"deployment/how-to-deploy-python-telegram-bot-to-production/#url","text":"<p>For the <code>URL</code> variable, set it to the value of your bot's domain. You can get it by clicking the \"Live Website\" link to the left of the capsule's toggle button and copying the url in the new tab that opens. Paste the url you copied in the value field for the <code>URL</code> environment variable. </p> <p></p> <p>Confirm your changes by clicking on \"Update Capsule\", then restart your Capsule by toggling the radio button in the top right off and on again.</p>","title":"<code>URL</code>"},{"location":"deployment/how-to-deploy-python-telegram-bot-to-production/#setup-webhook","text":"<p>The next step is to setup a webhook for your bot. Do this by clicking the \"Live Website\" link at the top of the capsule's page. On the new tab that opens add <code>/setwebhook</code> to the url and press enter/return to visit the url. If you see <code>webhook setup ok</code> then your bot is ready to chat!</p>","title":"Setup Webhook"},{"location":"deployment/how-to-deploy-python-telegram-bot-to-production/#chat-with-the-bot","text":"<p>The bot will be able to respond to messages after actioning the above steps. When this is done, search for your bot on Telegram using the username you assigned it and start a chat with it. The bot has been programmed to respond to <code>/start</code> and echo any messages you send it.</p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Chat with the Bot"},{"location":"deployment/how-to-deploy-react-application-to-production/","text":"<p>A video for this guide can be found here if you prefer watching to reading.</p> <p>Deploy a React application and learn how to host frontend code on Code Capsules.</p>","title":"How to Deploy a React Application to Production on Code Capsules"},{"location":"deployment/how-to-deploy-react-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a React application with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-react-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-react-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-react-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-react-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-react-application-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Frontend Capsule\".</li> <li>Under \"Product\", select \"Trial - Static Site Hosting\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Type <code>npm run build</code> in \"Build Command\" and <code>build</code> in \"Static Content Folder Path\". </li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p> <p>Once the build is complete, a \"Live Website\" link will appear at the top of the tab. Click the link and you should see your deployed application.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-slack-bot-to-production/","text":"<p>Deploy a Node.js Slack Bot and learn how to host backend code on Code Capsules.</p>","title":"How to Deploy a Node.js Slack Bot to Production on Code Capsules"},{"location":"deployment/how-to-deploy-slack-bot-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Node.js Slack Bot with Code Capsules, we\u2019ve provided an example bot which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example bot repository by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-slack-bot-to-production/#create-a-space-for-your-bot","text":"<p>Log in to your Code Capsules account and navigate to the \"Spaces\" tab. Once there, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Bot"},{"location":"deployment/how-to-deploy-slack-bot-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-slack-bot-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the \"Team Repos\" section. An \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the bot repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-slack-bot-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-slack-bot-to-production/#register-the-bot","text":"<p>You'll need a Slack user account and to log into a workspace before you can create a Slack bot. After you have logged into a workspace head over to the Slack API page and click on \"Create an app\".</p> <ol> <li>On the popup that displays, choose the \"From scratch\" option, give your app a name and choose the workspace you want to add it to then click \"Create App\".</li> <li>Click \"OAuth &amp; Permissions\" on the left panel and scroll down to the Scopes section and click \"Add an OAuth Scope\" under the Bot Token Scopes section. </li> <li>Choose \"chat:write\" from the options list.</li> <li>Click on the \"Slash Commands\" menu item on the left, under Features then click \"Create a new Command\". </li> <li>Give the command the name <code>/stats</code>.</li> <li>For the Request URL, head over to your Capsule Overview page on Code Capsules and copy the Domain name under the Domains section. </li> <li>Paste your domain into the Request URL box on Slack, and add <code>/slack/command/stats</code> to the end of it.</li> <li>Fill in the description with 'Returns key stats from the app'. </li> <li>Click \"Save\". </li> </ol>","title":"Register the Bot"},{"location":"deployment/how-to-deploy-slack-bot-to-production/#add-environment-variables","text":"<p>Our bot's logic makes use of environment variables to function securely. You'll need to add the variables to your capsule's \"Configure\" tab before the bot can send/receive messages from your workspace. </p> <p>For the first environment variable, <code>SLACK_BOT_TOKEN</code>: </p> <ol> <li>Head over to your app dashboard on Slack, and click on the \"OAuth &amp; Permissions\" menu item on the left-hand side. </li> <li>Click the \"Install to Workspace\" button followed by the \"Allow\" button. </li> <li>Actioning the preceeding 2 steps should reveal a newly generated \"Bot User OAuth Token\". Copy this token. </li> <li>On your capsule's \"Configure\" tab, add a new environment variable with the name <code>SLACK_BOT_TOKEN</code> and set its value to the token you copied in the previous step.  </li> <li>Click the \"Update Capsule\" button to save your changes.</li> </ol> <p>For the second environment variable, <code>SLACK_CHANNEL_ID</code>:</p> <ol> <li>Open Slack and right-click on the channel name of the channel you want to send messages to.</li> <li>On the context menu that appears, choose \"Copy Link\". </li> <li>Paste the link in a browser tab but don't press \"enter\" or \"return\".</li> <li>The link should follow the format, <code>https://&lt;workspace-name&gt;.slack.com/archives/C01SZ6Z3TCY</code>. The last part of that URL is the channel ID; in this example case, <code>C01SZ6Z3TCY</code>.</li> <li>Add the channel ID to the environment variables with the name <code>SLACK_CHANNEL_ID</code>. </li> <li>Click the \"Update Capsule\" button to save your changes.</li> </ol> <p>For the third environment variable, <code>SLACK_SIGNING_SECRET</code>:</p> <ol> <li>Head over to your Slack app dashboard and click on \"Basic Information\" on the left-hand side.</li> <li>Scroll down to App Credentials and look for the Signing Secret. Click \"Show\" and copy the secret. </li> <li>Add a new environment variable with the name <code>SLACK_SIGNING_SECRET</code> on your capsule's \"Configure\" tab and set its value to the secret you copied in the previous step. </li> <li>Click the \"Update Capsule\" button to save your changes.</li> </ol>","title":"Add Environment Variables"},{"location":"deployment/how-to-deploy-slack-bot-to-production/#invite-bot-to-channel","text":"<p>You need to invite the bot to the chosen channel so that it'll be able to post there. To do this, send a message mentioning <code>@&lt;bot-name&gt;</code> the bot in the channel you added it to. Click \"Invite Them\" when Slack prompts you.</p> <p></p>","title":"Invite Bot to Channel"},{"location":"deployment/how-to-deploy-slack-bot-to-production/#chat-with-the-bot","text":"<p>The bot can now send messages to the channel everytime it starts. You can restart the capsule to see this functionality in action or alternatively send a <code>/stats</code> message in the channel to get a report about the bot's status on Code Capsules.</p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Chat with the Bot"},{"location":"deployment/how-to-deploy-static-html-to-production/","text":"<p>Deploy a static HTML site and learn how to host frontend code on Code Capsules.</p>","title":"How to Deploy an HTML Site to Production on Code Capsules"},{"location":"deployment/how-to-deploy-static-html-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a static HTML site with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-static-html-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-static-html-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-static-html-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-static-html-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-static-html-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Frontend Capsule\".</li> <li>Under \"Product\", select \"Trial - Static Site Hosting\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave the \"Build command\" and \"Static content folder path\" blank. </li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section. </p> <p></p> <p>Once the build is complete, a \"Live Website\" link will appear at the top of the tab. Click the link and you should see your deployed application.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-svelte-application-to-production/","text":"<p>Deploy a Svelte application and learn how to host frontend code on Code Capsules. </p>","title":"How to Deploy a Svelte Application to Production on Code Capsules"},{"location":"deployment/how-to-deploy-svelte-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Svelte application with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set Up"},{"location":"deployment/how-to-deploy-svelte-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-svelte-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button.</p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for Your Apps"},{"location":"deployment/how-to-deploy-svelte-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-svelte-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo. </p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-svelte-application-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Frontend Capsule\".</li> <li>Under \"Product\", select \"Trial - Static Site Hosting\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Type <code>npm run build</code> in \"Build Command\" and <code>public</code> in \"Static Content Folder Path\".</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message. When the build is complete, a \"Live Website\" link will appear at the top of the tab.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p> <p>Once the build is complete, a \"Live Website\" link will appear at the top of the tab. Click the link and you should see your deployed application.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-vue-application-to-production/","text":"<p>Deploy a Vue application and learn how to host frontend code on Code Capsules. </p>","title":"How to Deploy a Vue Application to Production on Code Capsules"},{"location":"deployment/how-to-deploy-vue-application-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account and a GitHub account.</p> <p>To demonstrate how to deploy a Vue application with Code Capsules, we\u2019ve provided an example application which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example application by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-vue-application-to-production/#create-an-account-with-code-capsules","text":"<p>If you don\u2019t already have an account, navigate to the Code Capsules site and click the \"Sign Up\" button in the top right corner of the screen. Enter your details to create an account, or log in to an existing one.</p> <p>If you\u2019ve just signed up for an account, you\u2019ll be directed to a welcome page on your first login. Click on the \"Go To Personal Team\" button.</p> <p>Alternatively, if you\u2019re signing in again, click on \"Spaces\" in the top right corner of your screen.</p> <p>Code Capsules gives every account a Personal Team by default. A Team is an environment for you to manage your Spaces and Capsules. For a better understanding of Teams, Spaces, and Capsules, take a look at our explanation.</p>","title":"Create an Account with Code Capsules"},{"location":"deployment/how-to-deploy-vue-application-to-production/#create-a-space-for-your-apps","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this application, or you can create a new Space. In the Spaces Tab, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Apps"},{"location":"deployment/how-to-deploy-vue-application-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-vue-application-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the Team Repos section, and an \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-vue-application-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Frontend Capsule\". / Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Trial - Static Site Hosting\". / Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Type <code>npm run build</code> in \"Build Command\" and <code>dist</code> in \"Static Content Folder Path\".</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p> <p>Once the build is complete, a \"Live Website\" link will appear at the top of the tab. Click the link and you should see your deployed application.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-whatsapp-bot-to-production/","text":"<p>Deploy a WhatsApp Bot and learn how to host backend code on Code Capsules.</p>","title":"How to Deploy a WhatsApp Bot to Production on Code Capsules"},{"location":"deployment/how-to-deploy-whatsapp-bot-to-production/#set-up","text":"<p>Code Capsules connects to GitHub repositories to deploy applications. To follow this guide, you\u2019ll need a Code Capsules account, a GitHub account and a Twilio account.</p> <p>To demonstrate how to deploy a WhatsApp Bot with Code Capsules, we\u2019ve provided an example bot which you can find on the Code Capsules GitHub repository.</p> <p>Sign in to GitHub, and fork the example bot repository by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination.</p>","title":"Set up"},{"location":"deployment/how-to-deploy-whatsapp-bot-to-production/#create-a-space-for-your-bot","text":"<p>Log in to your Code Capsules account and navigate to the \"Spaces\" tab. Once there, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your Bot"},{"location":"deployment/how-to-deploy-whatsapp-bot-to-production/#link-to-github","text":"<p>To link to GitHub, click your profile image at the top right of the Code Capsules screen and find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository we forked.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"deployment/how-to-deploy-whatsapp-bot-to-production/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the Team Settings tab.</p> <p>Click on the \"Modify\" button under the \"Team Repos\" section. An \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the bot repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"deployment/how-to-deploy-whatsapp-bot-to-production/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose the GitHub repository you forked.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p>","title":"Create the Capsule"},{"location":"deployment/how-to-deploy-whatsapp-bot-to-production/#create-a-twilio-sandbox","text":"<p>The Twilio Sandbox provides a development environment to access the WhatsApp API. Sign up for a Twilio account to use a sandbox that allows you to test your bot in realtime. After you've logged into your Twilio account, navigate to the console page to configure your WhatsApp sandbox settings. </p> <ol> <li>Go to your capsule's \"Overview\" tab and copy your bot's domain under the \"Domains\" section. </li> <li>Head back to your Twilio console and paste the domain in the \"When a Message Comes In\" field and append <code>/bot</code> to the end of it. Make sure the method is set to HTTP Post. </li> <li>Scroll down to the bottom of the page and click \"Save\".</li> <li>Under the \"Sandbox Participants\" section you will find the WhatsApp number for your sandbox and a code to join it that starts with join. Send this code to the displayed WhatsApp number to add your personal number as a sandbox participant.  </li> </ol>","title":"Create a Twilio Sandbox"},{"location":"deployment/how-to-deploy-whatsapp-bot-to-production/#chat-with-the-bot","text":"<p>The bot will now be able to respond to your messages after sending the join code. Try it and the bot should echo any message you send it. </p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Chat with the Bot"},{"location":"reference/","text":"<p>Looking to do something specific? You should find it here. If not, join our Slack community to let us know and we'll get on it!</p>","title":"Reference documentation"},{"location":"reference/#general-information","text":"<p>Take a look at how to add a custom domain, how to use a Procfile and how to run database migrations</p>","title":"General information"},{"location":"reference/#deploying-data-capsules","text":"<p>Your capsules do not persist data by default as you might be used to from a VPS or your local machine. Every time they are restarted for any reason, they will pull a completely fresh copy of your code from GitHub. You can read more about persistence here. If you want your application to persist data that is not in your repository, you should use one of our data capsules. You can find guides to set up different data capsules below.</p>","title":"Deploying data capsules"},{"location":"reference/#deploying-a-mysql-data-capsule","text":"<p>Follow our MySQL data capsule set up guide to set up a MySQL database for your Capsule.</p>","title":"Deploying a MySQL data capsule"},{"location":"reference/#deploying-a-mongodb-data-capsules","text":"<p>Follow our Mongo data capsule set up guide to set up a MongoDB database for your Capsule.</p>","title":"Deploying a MongoDB data capsules"},{"location":"reference/#deploying-a-redis-data-capsule","text":"<p>Follow our Redis data capsule set up guide to set up Redis as a memory cache, queue, or anything else.</p>","title":"Deploying a Redis data capsule"},{"location":"reference/#set-up-a-persistent-storage-capsule","text":"<p>Follow our File Data capsule set up guide to set up a persistent storage capsule that behaves just like a local file system.</p>","title":"Set up a Persistent Storage capsule"},{"location":"reference/#managing-your-code-capsules-account","text":"<p>You can find out more about billing, managing your capsules, or managing your team.</p>","title":"Managing your Code Capsules account"},{"location":"reference/add-procfile-to-backend-application/","text":"<p>Procfiles communicate to the backend capsule, what processes it needs to run and in which order to execute them for your application to be successfully deployed. On Code Capsules, Procfiles aren't a strict requirement but can be provided if you want to. </p> <p>The alternative to using a Procfile is using the Code Capsules UI to specify which commands to run during the build phase of your application. Below is a screenshot showing a command that may be entered as input in the UI for a <code>Node.js</code> application. </p> <p></p>","title":"Add a Procfile to a Backend Application"},{"location":"reference/add-procfile-to-backend-application/#procfile-naming-and-location","text":"<p>A Procfile is a simple text file. It should be named <code>Procfile</code> exactly and should not have any extensions, like <code>.txt</code> or <code>.py</code>. Note that naming the file <code>procfile</code> will not work either, as it is case sensitive. </p> <p>Locate your Procfile in the root folder of your project. It won't work in any other location.</p>","title":"Procfile Naming and Location"},{"location":"reference/add-procfile-to-backend-application/#procfile-processes","text":"<p>The <code>Procfile</code> outlines the type of processes a Backend Capsule needs to run before deploying a backend application. Common processes include but are not limited to <code>web</code>, <code>worker</code>, and <code>clock</code> processes. When declaring a process type, you should also write the command to run for that particular process.</p> <p>A process type command allows you to specify the port you'd like the process to run, as well as other options that are process specific. </p>","title":"Procfile Processes"},{"location":"reference/add-procfile-to-backend-application/#procfile-format","text":"<p>The Procfile's format is a key value listing of process types and their commands on each line as shown below: </p> <pre><code>&lt;process type&gt;: &lt;command&gt;\n</code></pre>","title":"Procfile Format"},{"location":"reference/add-procfile-to-backend-application/#example-procfile-for-pythons-flask","text":"<p>Code Capsules only requires a Procfile for Python applications. Here is an example of what a Procfile for a Flask application might look:</p> <pre><code>web: python3 -m flask run --host=0.0.0.0 --port=$PORT\n</code></pre>","title":"Example Procfile for Python's Flask"},{"location":"reference/add-procfile-to-backend-application/#procfiles-for-other-languages","text":"<p>Express and Java applications don't need a Procfile to be deployed. The Backend Capsule can detect these applications and run the processes relevant to the application being deployed. </p>","title":"Procfiles for Other Languages"},{"location":"reference/capsule-billing/","text":"<p>Code Capsules uses a per-hour billing model, which ensures you only pay for what you use. The first Frontend Capsule for every account is free, meaning you only have to provide a payment method if you wish to host other types of capsules or a second Frontend Capsule.</p>","title":"Capsule Billing"},{"location":"reference/capsule-billing/#capsule-pricing","text":"<p>Pricing for capsules starts at $5 per month and can go up to $50 per month for Backend Capsules, depending on the size of the resources you need for your application. Frontend Capsules are fixed at $5 per month per capsule, regardless of the size of your static site.</p>","title":"Capsule Pricing"},{"location":"reference/capsule-billing/#adding-a-payment-method","text":"<p>Code Capsules accepts Visa and Mastercard as payment methods. To add a card to your account, click on \"Team Settings\" on the top navigation bar. On the \"Team Settings\" page, navigate to the \"Payment Methods\" tab where you should see a button for adding a payment method.</p> <p></p> <p>Click on the \"Add Payment Method\" button and a screen should slide in from the right asking you to enter your card details. When you're done, click on \"Confirm Payment Method\". </p> <p></p>","title":"Adding a Payment Method"},{"location":"reference/capsule-management/","text":"<p>A Capsule provides the server for hosting an application on Code Capsules. In this reference guide, we'll take a look at the different options you have for managing your Capsule while it's deployed.</p>","title":"Capsule Management"},{"location":"reference/capsule-management/#turning-off-a-capsule","text":"<p>You can turn off your Capsule by toggling the radio button at the top right of the Capsule's page. </p> <p></p> <p>The most common reason for turning a Capsule off is if you've changed or added an environment variable, in which case you'll need to toggle the Capsule back on after a few seconds for the new variable to be accessible. Depending on the purpose of your application, you might also want to turn your Capsule off during periods of inactivity to save on the cost of running your application on Code Capsules.</p>","title":"Turning off a Capsule"},{"location":"reference/capsule-management/#scale-a-capsule","text":"<p>It is possible to allocate more resources to your Capsule depending on how much traffic your application will be getting and its computational needs. To view the different scaling options available for your Capsule, navigate to the \"Scale\" tab while on your Capsule's page.</p> <p></p> <p>Choose the package with the Capsule resources that best suit your needs by clicking on the item.</p>","title":"Scale a Capsule"},{"location":"reference/capsule-management/#monitor-capsule-metrics","text":"<p>Each Capsule tracks its usage data and you can view this information by opening the \"Metrics\" tab on your Capsule's page. </p> <p></p>","title":"Monitor Capsule Metrics"},{"location":"reference/capsule-management/#delete-a-capsule","text":"<p>When you no longer wish to host your application on Code Capsules, delete your Capsule by navigating to the \"Configure\" tab of the Capsule page and scrolling to the bottom. </p> <p></p> <p>Click on the delete icon under the \"Delete Capsule\" section on the bottom right. A dialog will slide in from the right asking you whether you're sure about deleting the Capsule since this action isn't reversible. If you're sure, enter the Capsule's name to activate the delete button and click \"Delete\" to confirm your changes. </p>","title":"Delete a Capsule"},{"location":"reference/custom_domains/","text":"<p>For every application deployed to Code Capsules, Code Capsules provides a default domain that looks something like this: <code>capsulename.xxxx.codecapsules.co.za</code>. If you have purchased a domain like <code>example.com</code> from a domain registrar and would like to replace it with the default Code Capsules domain, Code Capsules lets you use your own domain instead (for free).</p> <p>You can find everything relating to your Capsule's domains (including your default domain) under the \"Overview\" tab in the Capsule. This is also where you can add a purchased custom domain to your application.</p>","title":"Custom Domains"},{"location":"reference/custom_domains/#how-to-add-a-custom-domain","text":"<p>To add a custom domain to your application on Code Capsules, click on the \"Overview\" tab in the Capsule hosting your application. Under Domains, you'll see all of the domains associated with your Capsule; including the default domain provided by Code Capsules.</p> <p>There is also an \"Add a Custom Domain\" button at the bottom of the page.</p> <p></p> <p>Before adding a custom domain, consider: - Your capsule may route to only one root domain. You may not add multiple root domains to your Capsule.</p> <p>To add a custom domain:</p> <ol> <li>Click the \"Add a Custom Domain\" button.</li> <li>Save the IP address provided under \"A Record Route\" (this will be used shortly).</li> <li>Enter the custom domain you've purchased from a domain registrar under \"Domain Name\".<ul> <li>Make sure that you've entered a root domain only - do not include a   subdomain.</li> <li>A root domain contains only your domain name and your top-level domain (TLD). Take <code>example.com</code>. Here, \"example\" is the domain name, and \".com\" is the TLD.</li> </ul> </li> </ol> <p>Once you've entered your root domain, add it by clicking the Create Domain button.</p>","title":"How to Add a Custom Domain"},{"location":"reference/custom_domains/#creating-an-a-record","text":"<p>After adding your custom domain on Code Capsules, you need to create an A record for the domain you've purchased. You'll use the IP that was saved previously when creating the A record for your domain. You can add an A record to your purchased domain by visiting your domain registrar's website.</p> <p>Your A record table should look something like this:</p>    Record Type Name IPv4 Address     A Record @ <code>provided-IP-Address</code>    <p>where,</p> <ul> <li> <p>\"@\" refers to your root domain.</p> </li> <li> <p><code>provided-IP-Address</code> is the IP address found previously under \"A Record Route\"</p> </li> </ul> <p>Consult your domain registrar for specific instructions on adding A records to your domain. Keep in mind, when making changes to your domain's DNS records, changes may take several hours to take effect.</p>","title":"Creating an A record"},{"location":"reference/custom_domains/#how-to-add-a-subdomain","text":"<p>Before adding a subdomain to your application hosted on Code Capsules, make sure you have already created an A record for your purchased domain that routes to an application on Code Capsules. </p> <p>When adding a subdomain to your application hosted on Code Capsules, keep in mind:</p> <ul> <li>Applications hosted on Code Capsules can have a maximum of five subdomains.</li> <li>Wildcard subdomains are not allowed on Code Capsules - you'll need to create a CNAME record in your purchased domain for each subdomain you want to create.</li> </ul> <p>To add a subdomain for your application, follow the same process detailed previously, with some changes:</p> <ul> <li>This time you must include the subdomain you want to create. This means that instead of entering the root domain <code>domain-name.tld</code>, you should specify your subdomain as well, such as: <code>app.example.com</code>.</li> <li>You do not need to save the IP address provided under \"A Record Route\" when adding subdomains on Code Capsules.</li> </ul> <p>After clicking the Create Domain button, you must create a CNAME record for your purchased domain with information about the subdomain you'd like to create.</p>","title":"How to Add a Subdomain"},{"location":"reference/custom_domains/#creating-cname-records","text":"<p>Creating CNAME records for purchased domains vary for different domain registrars. Consult your domain registrar for information on creating CNAME records. </p> <p>In general, the CNAME record table for your domain should look something like this:</p>    Record Type Name Host/Target     CNAME <code>subdomain</code> <code>your-root-domain</code>    <p>where, </p> <ul> <li><code>subdomain</code> is the subdomain you would like to create (e.g. <code>app</code>, <code>www</code>)</li> <li><code>your-root-domain</code> is your root domain that contains an A record routing to your application on Code Capsules.</li> </ul> <p>As with adding an A record, CNAME records or any other changes to your domain's DNS records may take several hours to take effect.</p>","title":"Creating CNAME Records"},{"location":"reference/custom_domains/#removing-domains-and-subdomains","text":"<p>If you would like to remove any domains or subdomains associated with your Capsule, navigate to the \"Overview\" tab in your Capsule. Under Domains, you will see a list of all the domains that are associated with your Capsule. </p> <p>Next to each custom domain and subdomain, you'll find a trash can icon. Click the trash can icon to remove the custom domain or subdomain.</p> <p>Note, removing a custom domain or subdomain does not affect your domain's DNS records:</p> <ul> <li> <p>When removing a root domain on Code Capsules, your A record will still be associated with the IP address provided by Code Capsules. Make sure to revert your domain's A record to its default value.</p> </li> <li> <p>When removing a subdomain on Code Capsules, make sure to delete the corresponding CNAME record in your purchased domain. </p> </li> </ul>","title":"Removing Domains and Subdomains"},{"location":"reference/custom_domains/#glossary-of-terms-concepts","text":"<p>Here is a list of defined terms and concepts used throughout this article. Divided into three sections, here you'll find definitions for: structures related to URLs, DNS records, and information related to HTTP. </p>","title":"Glossary of Terms &amp; Concepts"},{"location":"reference/custom_domains/#makeup-of-a-url","text":"<p></p> <ul> <li> <p>Uniform Resource Locator (URL): In the above image, <code>www.example.com</code> is the URL. A URL is a combination of three different aspects of a domain: A subdomain, a second-level domain, and a top-level domain.</p> </li> <li> <p>Subdomain: Subdomains are the first part of a URL, the most common being <code>www</code>. Subdomains provide users with a consistent naming strategy to access service you may provide (for example, <code>hr.myapplication.com</code> may route users to your business' human resources portal).</p> </li> <li> <p>Second-level domain (SLD): Second level domains make up the middle of a URL. This is your domain's name.</p> </li> <li> <p>Top-level domain (TLD): Top-level domains are the text at the right-hand side of a URL. TLDs give users an idea about your website. For example, the <code>.de</code> TLD lets users know the website probably caters to a German audience.</p> </li> <li> <p>Root Domain: The root domain is a combination of a second-level and top-level domain without a subdomain. <code>example.com</code> is an example of a root domain, whereas <code>www.example.com</code> is not a root domain.</p> </li> </ul>","title":"Makeup of a URL"},{"location":"reference/custom_domains/#dns-records","text":"<ul> <li> <p>Domain Registrar: A company that sells and manages domains.</p> </li> <li> <p>A Record: An A record routes a domain (e.g. <code>example.com</code> to an IP addresses (e.g. <code>123.456.567.8</code>)</p> </li> <li> <p>Wildcard subdomain: A wildcard subdomain points all subdomains not created for your purchased domain to a specific place. For example, if a wildcard subdomain was created for <code>example.com</code>, and the subdomains <code>info</code> and <code>123</code> were not created for <code>example.com</code>, both <code>info.example.com</code> and <code>123.example.com</code> would route to <code>example.com</code>. </p> </li> <li> <p>CNAME Record: A CNAME record, also known as an alias, routes subdomains to other domain names. For example, <code>mail.example.com</code> may route to <code>mail.google.com</code>. CNAME records are unlike A records, which route to a specific IP address.</p> </li> </ul>","title":"DNS records"},{"location":"reference/custom_domains/#http-and-ssl","text":"<ul> <li> <p>Hypertext Transfer Protocol (HTTP): HTTP is a protocol for transferring data from a server (a web-application) to a client (your web-browser). </p> </li> <li> <p>Hypertext Transfer Protocol Secure (HTTPS): HTTPS is like HTTP, except the data transferred from the server to client is encrypted for better security. </p> </li> <li> <p>Secure Sockets Layer Certificate (SSL): An SSL Certificate authenticates a domain and allows encrypted information to send to the domains server - with an SSL certificate you can connect to your domain via HTTPS, i.e: https://www.example.com.</p> </li> </ul>","title":"HTTP and SSL"},{"location":"reference/how-state-works/","text":"<p>A Capsule can write to a local file system, but those files will not persist after the Capsule is restarted. </p> <p>A Capsule can be thought of as a computational process that can be started and restarted. When a Capsule is started, it receives a fresh copy of the code from a GitHub repository. You can write to a Capsule in a local file system, but that file system will also start afresh when the code restarts and pulls from the GitHub repository again, so any files written to that file system will not persist when the Capsule is restarted automatically.</p> <p>Instead, to have the data persist, we recommend using an external database.</p> <p>Take a look at our guide to setting up file persistence with a Data Capsule for more information.</p>","title":"How State Works"},{"location":"reference/migrating-a-database-with-code-capsules/","text":"<p>This guide will walk you through performing database migrations using an Express app and a MySQL data capsule.</p> <p>You might find our guide to setting up a MySQL Data Capsule and our creating an Express application with Code Capsules tutorial helpful.</p>","title":"Migrating a Database with Code Capsules"},{"location":"reference/migrating-a-database-with-code-capsules/#step-1-clone-from-your-github-repository","text":"<p>To install db-migrate to your code, first clone your GitHub repository with the following command (make sure to replace the username and repository name with your own):</p> <p><code>git clone https://github.com/git_username/repository_name.git</code></p>","title":"Step 1: Clone from your GitHub Repository"},{"location":"reference/migrating-a-database-with-code-capsules/#step-2-install-db-migrate","text":"<p>To make use of migration commands, install db-migrate as well as the db-migrate-mysql packages with the following commands:</p> <p><code>npm install -g db-migrate</code> <code>npm i db-migrate-mysql</code></p>","title":"Step 2: Install db-migrate"},{"location":"reference/migrating-a-database-with-code-capsules/#step-3-connect-to-the-database-with-databasejson","text":"<p>The db-migrate package connects to a database through <code>database.json</code> file. Create a file called <code>database.json</code> in your root directory and populate it with your database information. Below we have an example of a connection to both a local database called <code>\"dev\"</code>, and a MySQL Data Capsule called <code>\"prod\"</code>(be sure to replace the database information with your own):</p> <p>```{   \"dev\": {     \"driver\": \"mysql\",     \"user\": \"root\",     \"database\": \"database_name\",     \"password\": \"my_password\"   },   \"prod\": \"Insert Your Database URL here\",   \"sql-file\": true } <pre><code>Here we also add the`\"sql-file\": true` information to ensure our database migrations operate through sql files that will be created in the next step.\n\nThe database URL for a MySQL Data Capsule can be found in the \"Configure\" section of your backend capsule:\n\n![DATABSE_URL](../assets/reference/database-migration-images/configure-tab.png)\n\n You can also access the database URL through an environment variable like so:\n\n`\"prod\": {\"ENV\":\"DATABASE_URL\"},`\n\n\n\n## Step 4: Create and Populate SQL Files\n\nRun the command above to create a folder to store migrations: \n\n`db-migrate create insert_unique_name --sql-file`\n\nThe folder should contain three files:\n\n![SQL files](../assets/reference/database-migration-images/sql-files.png)\n\nThe two SQL files are named with an `up` and `down` suffix to hold your MySQL queries. The migrations that are performed look for MySQL queries in these files.\n\nDown-migration query\n\nInsert the following SQL query, to the SQL file with the `down` suffix, to drop a row from the database:\n</code></pre> ALTER TABLE table_name  DROP COLUMN drop_column_name;  <pre><code>Up-migration query\n\nInsert the following SQL query to the SQL file with the `up` suffix, to insert a row into the database:\n</code></pre> ALTER TABLE table_name ADD new_row_name datatype; <pre><code>Insert your own MySQL queries into these sql files to create your unique database migrations.\n\n## Step 5: Update Scripts\n\nNext update the `\"scripts\"` section in the `package.json` file in the root directory of the project to look something like this: \n</code></pre> \"scripts\": {     \"start\": \"node ./bin/www\",     \"migratedev\": \"node node_modules/db-migrate/bin/db-migrate up -e dev\",     \"migrate-prod-up\": \"node node_modules/db-migrate/bin/db-migrate up -e prod\",     \"migrate-prod-down\": \"node node_modules/db-migrate/bin/db-migrate down -e prod\"   } <pre><code>Adjust these scripts to match your use of your developer and production environments.  \n\nHere the scripts used to run up and down migrations are created in order to be run on Code Capsules or within a developer environment.\n\n\n## Step 6: Change Run Commands\n\nWhen you want to perform these migrations in the production environment, add the scripts created for your migrations to the \"Run command\" section found in your backend capsule\u2019s \"Configure\" section.\n\n![Run Command](../assets/reference/database-migration-images/configure-tab-run-command.png)\n\n## Step 7: Push Changes\nFinally, commit and push your changes to your GitHub repository to update your project\u2019s code base and perform your migrations. You should see your migrations in the \"Logs\" section of your Backend Capsule. It will have a similar structure to this output:\n</code></pre></p>  <p>node node_modules/db-migrate/bin/db-migrate up -e prod github_repository_name@0.0.0 migrate-prod-up</p>  <p>); FirstName varchar(255) LastName varchar(255), PersonID int, received data: CREATE TABLE user ( [INFO] Processed migration 20220523135622-migration_name [INFO] Done ```</p>","title":"Step 3: Connect to the Database with <code>database.json</code>"},{"location":"reference/python-development-with-code-capsules/","text":"<p>In this guide, we'll clone an existing Python repository and take a look at how to edit the project locally before pushing the changes to GitHub. The final step will be to deploy the application with the changes we made locally to Code Capsules. </p>","title":"Python Development with Code Capsules"},{"location":"reference/python-development-with-code-capsules/#clone-starter-project","text":"<p>We'll be using an example starter project provided by Code Capsules on their GitHub repository. Fork this repository by clicking \"Fork\" at the top-right of your screen and selecting your GitHub account as the destination. Clone the forked repository to your machine by clicking the green \"Code\" button and copying the link that appears in the pop-up. </p> <p>Open a terminal window on your machine and navigate to your preferred working directory. Run <code>git clone &lt;FORKED-REPO-URL&gt;</code>, replacing <code>&lt;FORKED-REPO-URL&gt;</code> with the link you copied from the pop-up above. </p>","title":"Clone Starter Project"},{"location":"reference/python-development-with-code-capsules/#run-starter-project-locally","text":"<p>Before we can run the project locally, we need to create and activate a virtual environment where we'll install the project's dependencies. Depending on your machine, run the appropriate commands from the ones listed below:</p> <p>MacOS <pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre></p> <p>Windows <pre><code>py -m venv env\n.\\env\\Scripts\\activate\n</code></pre></p> <p>Next, install the project's dependencies by running <code>pip install -r requirements.txt</code> in the same terminal window your environment is activated in.</p> <p>To start the application, run the command <code>python3 -m flask run</code> in the same terminal window and you should see the application in your browser.</p>","title":"Run Starter Project Locally"},{"location":"reference/python-development-with-code-capsules/#make-changes","text":"<p>Open the <code>app/routes.py</code> file in your text editor and add the code snippet below to add another route to the app:</p> <pre><code>@app.route('/greeting')\ndef greeting():\n    return \"Hello there, thank you for visiting my new route\"\n</code></pre> <p>You need to stop and restart the server in order to see your changes.</p>","title":"Make Changes"},{"location":"reference/python-development-with-code-capsules/#push-the-changes","text":"<p>Add and commit the changes you made by running the commands below in a terminal window while in the project's root folder:</p> <pre><code>git add app/routes.py\ngit commit -m \"Added new route\"\n</code></pre> <p>Push the changes to your remote repository by running <code>git push</code> in the same terminal window.</p>","title":"Push the Changes"},{"location":"reference/python-development-with-code-capsules/#link-to-github","text":"<p>To link Code Capsules to your remote GitHub repository, log in to your Code Capsules account and click your profile image at the top right of the screen. Find the \"GitHub\" button under \"GitHub Details\".</p> <p></p> <p>Click the \"GitHub\" button, select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository you recently pushed to.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Link to GitHub"},{"location":"reference/python-development-with-code-capsules/#add-repository-to-team","text":"<p>Select \"Team Settings\" in the top navigation bar to switch to the \"Team Settings\" tab.</p> <p>Click on the \"Modify\" button under the Team Repos section. An \"Edit Team Repos\" screen will slide in from the right. Click \"Add\" next to the demo repo, and then \"Confirm\". All the Spaces in your Team will now have access to this repo.</p> <p></p>","title":"Add Repository to Team"},{"location":"reference/python-development-with-code-capsules/#create-a-space-for-your-app","text":"<p>Spaces are an organizational tool for your applications. You can select the Personal Space that you find in your default Personal Team to host this app, or you can create a new Space. In the \"Spaces\" Tab, click the \"Create A New Space For Your Apps\" button. </p> <p>Follow the prompts, choosing your region and giving your Space a name, then click \"Create Space\".</p> <p></p>","title":"Create a Space for your App"},{"location":"reference/python-development-with-code-capsules/#create-the-capsule","text":"<p>A Capsule provides the server for hosting an application on Code Capsules.</p> <p>Navigate to the \"Spaces\" tab and open the Space you\u2019ll be using.</p> <p>Click the \"Create a New Capsule for Your Space\" button, and follow the instructions below:</p> <ol> <li>Choose \"Backend Capsule\".</li> <li>Under \"Product\", select \"Sandbox\".</li> <li>Choose your remote GitHub repository.</li> <li>Press \"Next\".</li> <li>Leave \"Run Command\" blank.</li> <li>Click \"Create Capsule\".</li> </ol> <p>Code Capsules will automatically build your application when you\u2019ve finished creating the Capsule. While the build is in progress, you can view the log by clicking \"View Build Progress\" next to the \"Building Capsule\" message.</p> <p></p> <p>Once your application is live, you can view the build log by selecting the \"Deploy\" tab and clicking the \"View build log\" link in the \"Builds\" section.</p> <p></p> <p>Once the build is complete, a \"Live Website\" link will appear at the top of the tab. Click the link and you should see your deployed application.</p> <p></p> <p>If you\u2019d like to deploy another application in a different language or framework, take a look at our other deployment guides.</p>","title":"Create the Capsule"},{"location":"reference/set-up-a-redis-data-capsule/","text":"<p>In this tutorial, we\u2019ll create a Redis Data Capsule to provide low latency, in-memory data storage for your application hosted on Code Capsules.</p>","title":"How to Set Up a Redis Data Capsule"},{"location":"reference/set-up-a-redis-data-capsule/#create-a-redis-data-capsule","text":"<p>Log in to your Code Capsules account and navigate to the Space your Redis Capsule will be contained in. Click \"New Capsule\". In the Create New Capsule dialog, select \"Data Capsule\".</p> <p></p> <p>Select \"Redis Memory Cache\" from the list of data types, and click \"Create Capsule\".</p> <p></p>","title":"Create a Redis Data Capsule"},{"location":"reference/set-up-a-redis-data-capsule/#binding-a-data-capsule-to-a-backend-capsule","text":"<p>Now we need to bind our Data Capsule to a Backend Capsule. Navigate to your Backend Capsule and click on the \"Configure\" tab. Scroll down to the \"Bind Data Capsule\" section and click \"Bind\".</p> <p></p> <p>During the \"Bind\" process, Code Capsules creates a <code>REDIS_URL</code> environment variable which will let your application connect to your Redis database. Once the capsules have been bound, you can find the variable under the \"Configure\" tab, in the \"Capsule parameters\" section.</p> <p></p> <p>We'll use this environment variable in our app to connect to the Redis database.</p>","title":"Binding a Data Capsule to a Backend Capsule"},{"location":"reference/set-up-a-redis-data-capsule/#connecting-to-a-redis-data-capsule-from-a-python-application","text":"<p>If your Backend Capsule is a Python application, use the following code to connect to your Redis database:</p> <pre><code>import os\nimport redis\n\nredis_url = os.getenv('REDIS_URL')\n\nconnection = redis.from_url(redis_url)\n\n# Do something here\n</code></pre>","title":"Connecting to a Redis Data Capsule from a Python application"},{"location":"reference/set-up-a-redis-data-capsule/#connecting-to-a-redis-data-capsule-from-a-nodejs-application","text":"<p>If your Backend Capsule is a Node.js application, use the following code to connect to your Redis database:</p> <pre><code>let redis = require('redis');\nlet redis_url = process.env.REDIS_URL\n\nlet connection = redis.createClient({\n  url: redis_url\n});\n\nconnection.connect();\n\n// Do something here \n\nconnection.quit();\n</code></pre>","title":"Connecting to a Redis Data Capsule from a Node.js application"},{"location":"reference/set-up-file-data-capsule/","text":"<p>You need persistent storage to develop your application that solves a real-world problem, but you don't want a full-blown database. In this tutorial, we'll show you how to create a persistent file Data Capsule that you can use with your backend applications running on Code Capsules. </p>","title":"How to Set Up a Persistent File Data Capsule"},{"location":"reference/set-up-file-data-capsule/#create-a-file-data-capsule","text":"<p>Log in to your Code Capsules account and navigate to the Space your file data capsule will be contained in. Click \"New Capsule\" and select the \"Data Capsule\" option from the \"Create New Capsule\" dialog that slides in from the right. </p> <p></p> <p>In the \"New Data Capsule\" dialog, choose \"A persistent storage mounted directly to your capsule.\" as your data type, then click the \"Create Capsule\" button. </p> <p></p>","title":"Create a File Data Capsule"},{"location":"reference/set-up-file-data-capsule/#binding-a-data-capsule-to-a-backend-capsule","text":"<p>You need to bind the Data Capsule to a Backend Capsule hosted on Code Capsules before you can connect to it and use it.</p> <p>Navigate to the Backend Capsule and click \"Configure\" to open the capsule's config tab. Scroll down to the \"Bind Data capsule\" section where your recently created data capsule will show.</p> <p></p> <p>Click \"Bind\" to bind your Data and Backend Capsules. During the bind process, Code Capsules creates a <code>PERSISTENT_STORAGE_DIR</code> environment variable to let your Backend Capsule know where your Data Capsule resides in order to access its features. Once the two capsules have been bound, you can scroll to the top of the Configure tab to find the value of this variable. </p> <p></p> <p>The next step is to use this environment variable in code in order to read and write to our Data Capsule. Copy the value of the <code>PERSISTENT_STORAGE_DIR</code> variable and paste it in your code as the value of the <code>db_directory</code> variable. Alternatively, reference it directly in your code using <code>os.getenv</code> for Python or <code>process.env</code> for Node.js. </p>","title":"Binding a Data Capsule to a Backend Capsule"},{"location":"reference/set-up-file-data-capsule/#connecting-to-a-file-data-capsule-from-a-python-application","text":"<p>If your backend capsule is a Python application, use the following code to connect to your file data capsule:</p> <pre><code>import os\n\ndb_directory = os.getenv('PERSISTENT_STORAGE_DIR')\n\n### Do something with the db_directory variable here\nfile_to_write = os.path.join(db_directory, \"test.txt\")\n\nfile1 = open(file_to_write, \"w\")\nfile1.write(\"File writing test\")\nfile1.close()\n</code></pre>","title":"Connecting to a File Data Capsule From a Python Application"},{"location":"reference/set-up-file-data-capsule/#connecting-to-a-file-data-capsule-from-a-nodejs-application","text":"<p>If your backend capsule is a Node.js application, use the following code to connect to your file data capsule:</p> <pre><code>db_directory = process.env.PERSISTENT_STORAGE_DIR\nconst fs = require('fs')\n\nconst content = 'Some content!'\n\n// Do something with the db_directory variable here\n\nfs.writeFile(db_directory + '/test.txt', content, err =&gt; {\n  if (err) {\n    console.error(err)\n    return\n  }\n  //file written successfully\n})\n</code></pre>","title":"Connecting to a File Data Capsule From a Node.js Application"},{"location":"reference/set-up-mongodb-data-capsule/","text":"<p>MongoDB provides reliable NoSQL persistent storage for your applications. In this tutorial, we look at how to create a MongoDB instance you can use with your backend applications that are running on Code Capsules and elsewhere. </p>","title":"How to Set Up a MongoDB Data Capsule"},{"location":"reference/set-up-mongodb-data-capsule/#create-a-mongodb-data-capsule","text":"<p>Log in to your Code Capsules account and navigate to the Space your MongoDB data capsule will be contained in. Click \"New Capsule\" and select the \"Data Capsule\" option from the Create New Capsule dialog that slides in from the right. </p> <p></p> <p>In the New Data Capsule dialog, choose \"MongoDB Database Cluster\" as your data type, then click the \"Create Capsule\" button. </p> <p></p> <p>To allow your data capsule to be publicly accessible, navigate to the \"Overview\" tab of the capsule details screen and toggle the switch under \"Public Access\" to on. </p> <p></p> <p>Select this option if you plan on connecting your data capsule to an application that's not hosted on Code Capsules.  </p>","title":"Create a MongoDB Data Capsule"},{"location":"reference/set-up-mongodb-data-capsule/#binding-a-data-capsule-to-a-backend-capsule","text":"<p>To connect a data capsule to a backend capsule hosted on Code Capsules you need to bind the two together before you can connect to and use your data capsule. If you're not hosting your backend application on Code Capsules you can jump to this section as the binding step is not applicable in that use case.</p> <p>Navigate to the backend capsule and click \"Config\" to open the capsule's config tab. Scroll down to the \"Bind Data capsule\" section where your recently created data capsule will show.</p> <p></p> <p>Click \"Bind\" to bind your data and backend capsules. During the bind process, Code Capsules creates a <code>DATABASE_URL</code> environmental variable to let your backend capsule know how to access services and features of your data capsule. Once the two capsules have been bound, you can scroll to the top of the Config tab to find the value of this variable. </p> <p></p> <p>We can use this database variable in code to read and write to our data capsule. Copy the value of the <code>DATABASE_URL</code> variable and append <code>/your_db_name?authSource=admin</code> to it as a query parameter. Make sure to replace <code>your_db_name</code> with the actual name of your database. This tells the data capsule to read and write to the specified database. If a database named <code>your_db_name</code> doesn't exist, the data capsule will create it. This allows you to have multiple databases in one data capsule.</p>","title":"Binding a Data Capsule to a Backend Capsule"},{"location":"reference/set-up-mongodb-data-capsule/#connecting-to-a-mongodb-data-capsule-from-a-python-application","text":"<p>If your backend capsule is a Python application, use the following code to connect to your MongoDB Data Capsule:</p> <pre><code>import os\nimport pymongo\n\ndata_capsule_url = os.getenv('DATABASE_URL')\ndatabase_one_url = data_capsule_url + \"/database_one?authSource=admin\"\nproduction_database_url = data_capsule_url + \"/production_database?authSource=admin\"\n\nclient = pymongo.MongoClient(database_one_url)\ndb = client.database_one\n\n### Do something with the db variable here\n</code></pre>","title":"Connecting to a MongoDB Data Capsule From a Python Application"},{"location":"reference/set-up-mongodb-data-capsule/#connecting-to-a-mongodb-data-capsule-from-a-nodejs-application","text":"<p>If your backend capsule is a Node.js application, use the following code to connect to your MongoDB Data Capsule:</p> <pre><code>data_capsule_url = process.env.DATABASE_URL\ndatabase_one_url = data_capsule_url + \"/database_one?authSource=admin\"\nproduction_database_url = data_capsule_url + \"/production_database?authSource=admin\"\n\nvar MongoClient = require('mongodb').MongoClient;\n\nMongoClient.connect(database_one_url, function(err, db) {\n\n    // Do something with the db variable here\n});\n</code></pre>","title":"Connecting to a MongoDB Data Capsule From a Node.js Application"},{"location":"reference/set-up-mongodb-data-capsule/#connecting-to-a-mongodb-data-capsule-from-outside-code-capsules","text":"<p>If you're not hosting your backend application on Code Capsules you can still connect your data capsule to it. The first step is to allow public access to your data capsule. Make sure this option is turned on in the \"Overview\" tab of your data capsule's details screen.</p> <p></p> <p>If public access to your data capsule is enabled, a connection string is visible below the \"Public Access\" switch, as shown in the above picture. Copy this connection string and append <code>&amp;authSource=admin</code> to it so that its format is similar to <code>mongodb://92d79d9b-64f2-0:240e1937-a9fe-4@data-capsule-kykgmd.codecapsules.co.za:27017/app?ssl=true&amp;authSource=admin</code>. </p> <p>The string slice preceeding <code>/app?ssl=true&amp;authSource=admin</code> will be different in your case since you're using a different data capsule from the one used for the purpose of writing this reference guide. The last <code>/app?ssl=true&amp;authSource=admin</code> part doesn't need to be replaced though. Paste the appended connection string into your backend application's code to access your data capsule's services. </p>","title":"Connecting to a MongoDB Data Capsule From Outside Code Capsules"},{"location":"reference/set-up-mongodb-data-capsule/#connecting-to-a-mongodb-data-capsule-from-an-externally-hosted-python-application","text":"<p>If your backend application is written in Python, use the following code to connect to your MongoDB Data Capsule: </p> <pre><code>import pymongo\n\ndatabase_url = \"mongodb://92d79d9b-64f2-0:240e1937-a9fe-4@data-capsule-kykgmd.codecapsules.co.za:27017/app?ssl=true&amp;authSource=admin\"\n\nclient = pymongo.MongoClient(database_url)\ndb = client.database_one\n\n### Do something with the db variable here\n</code></pre> <p>If you copied the code snippet above remember to replace the <code>mongodb://92d79d9b-64f2-0:240e1937-a9fe-4@data-capsule-kykgmd.codecapsules.co.za:27017</code> string slice in the <code>database_url</code> variable with the corresponding value for your connection string.</p>","title":"Connecting to a MongoDB Data Capsule From an Externally Hosted Python Application"},{"location":"reference/set-up-mongodb-data-capsule/#connecting-to-a-mongodb-data-capsule-from-an-externally-hosted-nodejs-application","text":"<p>If your backend application is written in Node.js, use the following code to connect to your MongoDB Data Capsule: </p> <pre><code>database_url = \"mongodb://92d79d9b-64f2-0:240e1937-a9fe-4@data-capsule-kykgmd.codecapsules.co.za:27017/app?ssl=true&amp;authSource=admin\"\n\nvar MongoClient = require('mongodb').MongoClient;\n\nMongoClient.connect(database_url, function(err, db) {\n\n    // Do something with the db variable here\n});\n</code></pre> <p>If you copied the code snippet above remember to replace the <code>mongodb://92d79d9b-64f2-0:240e1937-a9fe-4@data-capsule-kykgmd.codecapsules.co.za:27017</code> string slice in the <code>database_url</code> variable with the corresponding value for your connection string.</p>","title":"Connecting to a MongoDB Data Capsule From an Externally Hosted Node.js Application"},{"location":"reference/set-up-mysql-data-capsule/","text":"<p>In this tutorial, we'll create a MySQL Data Capsule to provide persistent storage for your applications hosted on Code Capsules.</p>","title":"How to Set Up a MySQL Data Capsule"},{"location":"reference/set-up-mysql-data-capsule/#create-a-mysql-data-capsule","text":"<p>Log in to your Code Capsules account and navigate to the Space your MySQL Data Capsule will be contained in. Click \"New Capsule\" and select the \"Data Capsule\" option from the Create New Capsule dialog that slides in from the right. </p> <p></p> <p>In the New Data Capsule dialog, choose \"Mysql Database Cluster\" as your data type, then click the \"Create Capsule\" button. </p> <p> </p>","title":"Create a MySQL Data Capsule"},{"location":"reference/set-up-mysql-data-capsule/#binding-a-data-capsule-to-a-backend-capsule","text":"<p>To use the Data Capsule with your Backend Capsule, you'll need to link the two. Navigate to the Backend Capsule and click \"Configure\" to open the Capsule's configuration tab. Scroll down to the \"Bind Data capsule\" section and you'll see your recently created data capsule.</p> <p></p> <p>Click \"Bind\" to bind your Data and Backend Capsules. During the bind process, Code Capsules creates a <code>DATABASE_URL</code> environmental variable to let your Backend Capsule know how to access your Data Capsule's services and features. Once the two capsules have been bound, you can scroll to the top of the \"Configure\" tab to find the value of this variable under the \"Capsule parameters\" section. </p> <p></p> <p>We can use this database variable in code to read and write to our Data Capsule. Copy the value of the <code>DATABASE_URL</code> variable and append <code>/your_db_name</code> to it as a query parameter. Make sure to replace <code>your_db_name</code> with the actual name of your database. This tells the Data Capsule to read and write to the specified database. If a database named <code>your_db_name</code> doesn't exist, the Data Capsule will create it. This allows you to have multiple databases in one Data Capsule. Take note if you copy the <code>DATABASE_URL</code> value from the capsule it will already include the name of the default database you used whilst creating the data capsule as part of the string.</p>","title":"Binding a Data Capsule to a Backend Capsule"},{"location":"reference/set-up-mysql-data-capsule/#connecting-to-a-mysql-data-capsule-from-a-python-application","text":"<p>If your Backend Capsule is a Python application, use the following code to connect to your MySQL Data Capsule:</p> <pre><code>import os\nimport mysql.connector\n\ndata_capsule_url = os.getenv('DATABASE_URL')\nemployees_database_url = data_capsule_url + \"/employees\"\n\ncnx = mysql.connector.connect(user='yourusername', password='yourpassword',\n                              host=employees_database_url,\n                              database='employees')\n\n### Do something with the cnx variable here\n\ncnx.close()\n</code></pre>","title":"Connecting to a MySQL Data Capsule from a Python Application"},{"location":"reference/set-up-mysql-data-capsule/#connecting-to-a-mysql-data-capsule-from-a-nodejs-application","text":"<p>If your Backend Capsule is a Node.js application, use the following code to connect to your MySQL Data Capsule:</p> <pre><code>var mysql = require('mysql');\nvar data_capsule_url = process.env.DATABASE_URL\nvar employees_database_url = data_capsule_url + \"/employees\"\n\nvar con = mysql.createConnection({\n  host: employees_database_url,\n  user: \"yourusername\",\n  password: \"yourpassword\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  console.log(\"Connected!\");\n  // Do something with the db here\n});\n</code></pre>","title":"Connecting to a MySQL Data Capsule from a Node.js Application"},{"location":"reference/team-management/","text":"<p>A Team is a group of developers who share access to the same Spaces and Capsules in order to make collaborative development easier. This guide explores the team management options available to you with Code Capsules.</p>","title":"Team Management"},{"location":"reference/team-management/#creating-teams","text":"<p>You can create as many teams as you need on Code Capsules. The name of your current Team will be displayed in the top navigation bar, to the right of the Code Capsules logo. To create a new Team, click on the down arrow next to your current Team name. </p> <p></p> <p>Click on the \"Create New Team\" option in the dropdown menu, and fill in your Team name in the screen that slides in from the right. Confirm your changes by clicking \"I Like It\".</p> <p></p>","title":"Creating Teams"},{"location":"reference/team-management/#adding-team-repos","text":"<p>Code Capsules connects to GitHub to deploy applications on its platform. Before you can deploy an application, you need to give Code Capsules permission to read the repository on your GitHub account you want to deploy from.</p>","title":"Adding Team Repos"},{"location":"reference/team-management/#adding-a-repository-to-a-team","text":"<p>If you've already linked your Code Capsules account to GitHub, you'll be asked which repos to add to your Team. Click \"Add\" next to the repos you wish to add to your Team, then click \"Confirm\".</p> <p></p>","title":"Adding a Repository to a Team"},{"location":"reference/team-management/#linking-to-github","text":"<p>If you haven't yet linked GitHub to your Code Capsules account, you'll be asked to do so now. Click \"Install GitHub\".</p> <p></p> <p>Select your GitHub username, and do the following in the dialog box that appears:</p> <ol> <li>Select \"Only Select Repositories\".</li> <li>Choose the GitHub repository you want to deploy from.</li> <li>Press \"Install &amp; Authorize\".</li> </ol> <p></p>","title":"Linking to GitHub"},{"location":"reference/team-management/#editing-team-repos","text":"<p>If you need to edit the Team Repos later, select \"Team Settings\" in the top navigation bar to switch to the \"Team Settings\" tab.</p> <p>Click on the \"Modify\" button in the \"Team Repos\" section, and an \"Edit Team Repos\" dialog will slide in from the right. Click \"Add\" next to the repo you wish to deploy from, and then \"Confirm\".</p> <p></p> <p>All the Spaces in your Team will now have access to this repo.</p>","title":"Editing Team Repos"},{"location":"reference/team-management/#team-billing","text":"<p>Next you'll be asked to enter your Team billing information. You can do so now, or skip this step if you wish to do it later.</p> <p></p>","title":"Team Billing"},{"location":"reference/team-management/#inviting-team-members","text":"<p>The final step in creating a Team is to invite members to it. Enter your prospective team members' email addresses in the text field and click \"Invite Team Members\" to send your invitation.</p> <p></p> <p>Your Team is now ready to begin collaborating.</p>","title":"Inviting Team Members"},{"location":"tutorials/","text":"<p>If you're looking to build cool applications that you can host on Code Capsules, you can find tutorials for:</p>     Building a Slackbot      Creating a Flask API      Customising Domain      Creating a Python Telegram Bot      Creating a Node.js Telegram Bot      Building a Frontend Portfolio      Developing a Persistent Sleep Tracker      Stripe Checkout and Email Subscription      Building a Web File Store      Build a Game Catalogue REST API      Build a MERN Job Board      Build a Flask HTMx App      Build a Generative Graphics App      Build an Express HTMx App      Build a News Reader app      Build an Image Overlay API      Build a Hex Color Identifier API      Book Recommendations App","title":"Tutorial Guides"},{"location":"tutorials/build-a-docker-php-sqlite-app/","text":"<p></p> <p>PHP is one of the first technologies that made dynamic web applications possible and it's still widely used today. In this tutorial, we\u2019ll look at how to build a CRUD application with PHP and SQLite. We'll build a basic book recommendation application where we can Create new entries or Read, Update, or Delete existing ones. Nearly all applications rely on these four CRUD operations, so you'll be able to extend this application to do anything else you want.</p> <p>Here\u2019s what the final app will look like:</p> <p></p>","title":"Building a Book Recommendations App with PHP, SQLite, and Docker"},{"location":"tutorials/build-a-docker-php-sqlite-app/#requirements","text":"<p>You will need the following to complete the tutorial:</p> <ul> <li>Docker installed locally.</li> <li>IDE or text editor of your choice.</li> <li>(Optional) a local PHP developer environment.</li> </ul> <p>You can do all the development using the Docker environment that we'll create as part of the tutorial, but it can be easier to run and debug code locally so if you haven't used PHP before and don't want to do the set up, you can rely only on Docker.</p> <p>To deploy the application to Code Capsules, you'll also need</p> <ul> <li>A GitHub account and Git installed locally.</li> <li>A Code Capsules account.</li> </ul>","title":"Requirements"},{"location":"tutorials/build-a-docker-php-sqlite-app/#project-set-up","text":"<p>Let\u2019s start by creating a project folder that will house all our files.</p> <p>In a terminal, navigate to the directory you\u2019ll be keeping the application files in. Run the commands below to create the project folder and navigate into it.</p> <pre><code>mkdir book-recommendations\ncd book-recommendations\n</code></pre>","title":"Project Set Up"},{"location":"tutorials/build-a-docker-php-sqlite-app/#building-the-frontend","text":"<p>Let\u2019s begin by building our app\u2019s index page. This page will use PHP and HTML as it will contain both static and dynamic content. Create a file named <code>index.php</code> in the project root folder and populate it with the code below:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n   &lt;head&gt;\n      &lt;meta charset=\"UTF-8\" /&gt;\n      &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n      &lt;title&gt;Book Recommendations&lt;/title&gt;\n      &lt;link rel=\"stylesheet\" href=\"https://fonts.xz.style/serve/inter.css\" /&gt;\n      &lt;link\n         rel=\"stylesheet\"\n         href=\"https://cdn.jsdelivr.net/npm/@exampledev/new.css@1.1.2/new.min.css\"\n         /&gt;\n   &lt;/head&gt;\n   &lt;body&gt;\n   &lt;header&gt;\n      &lt;h1&gt;Book Recommendations CRUD demo&lt;/h1&gt;\n   &lt;/header&gt;\n      &lt;table&gt;\n         &lt;thead&gt;\n            &lt;tr&gt;\n               &lt;th&gt;Book Title&lt;/th&gt;\n               &lt;th&gt;Author&lt;/th&gt;\n               &lt;th colspan=\"2\"&gt;Action&lt;/th&gt;\n            &lt;/tr&gt;\n         &lt;/thead&gt;\n      &lt;/table&gt;\n   &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>This builds out a basic HTML page. We add links in the header to xz/fonts, a CDN to get open-source fonts and New CSS, a classless CSS framework that makes HTML look better out of the box without having to add specific class names like you would with a framework like Bootstrap or Tailwind.</p> <p>It then sets up a table structure that we'll use PHP to populate later.</p>","title":"Building the Frontend"},{"location":"tutorials/build-a-docker-php-sqlite-app/#adding-a-docker-file-and-running-our-app","text":"<p>Even though our app doesn't do anything yet, let's run it to see our progress so far. We'll use Docker for this. In the same project directory, create a file called exactly <code>Dockerfile</code> (note the capital D and no file extension), and add the following code.</p> <pre><code>FROM php:8.0-apache\nWORKDIR /var/www/html\n\nCOPY . .\nEXPOSE 80\n</code></pre> <p>This pulls an official Docker container which already has the PHP language installed and integrated with Apache, a web server. It copies all files from the local directory (in our case, just <code>index.php</code> for now), and exposes port 80, which is the port that Apache is set to serve files on.</p> <p>Now run the following command in your terminal.</p> <pre><code>docker build . -t book-app &amp;&amp; docker run -p 8000:80 book-app\n</code></pre> <p>This builds a Docker image from the <code>Dockerfile</code> in the current directory and gives it <code>book-app</code> as a tag. The second command (after <code>&amp;&amp;</code>) runs the container, and maps our local port 8000 to the Docker port 80. Once it's running, you can visit <code>http://localhost:8000</code> in your web browser to see the application.</p> <p></p> <p>Hit <code>Ctrl + C</code> in the terminal window running Docker to stop the server.</p>","title":"Adding a Docker File and Running our App"},{"location":"tutorials/build-a-docker-php-sqlite-app/#adding-books","text":"<p>To allow the user to add new books, we'll need a form with an input. Let's build that now.</p> <p>Add the following code to your <code>index.php</code> file, above the existing table definition.</p> <pre><code>      &lt;h2&gt;Add Book&lt;/h2&gt;\n      &lt;form method=\"POST\"&gt;\n         &lt;label for=\"title\"&gt;Book Title&lt;/label&gt; &lt;br&gt;\n         &lt;input type=\"text\" name=\"title\"&gt;&lt;br&gt;\n         &lt;label for=\"author\"&gt;Author&lt;/label&gt; &lt;br&gt;\n         &lt;input type=\"text\" name=\"author\"&gt;&lt;br&gt;\n         &lt;input type=\"hidden\" name=\"action\" value=\"create\"&gt;&lt;br&gt;\n         &lt;button type=\"submit\" name=\"save\"&gt;Save&lt;/button&gt;&lt;br&gt;\n      &lt;/form&gt;\n      &lt;h2&gt;Books&lt;/h2&gt;\n</code></pre> <p>This sets up a form with inputs and a submit button. Note the hidden field with a value of \"create\", which we'll be using later to differentiate between different actions, such as creating, updating, or deleting books.</p> <p>If you run the app again, you'll see something like the following.</p> <p></p> <p>Now you can type in a book and author name and press the \"Save\" button, but then the app will crash as we haven't built the backend yet. Let's do that next.</p>","title":"Adding Books"},{"location":"tutorials/build-a-docker-php-sqlite-app/#building-the-backend","text":"<p>Next we'll create an <code>app.php</code> file to handle the backend logic and database connection for our application. Create this file and add the following code.</p> <pre><code>&lt;?php\n$database_name = \"/tmp/\".\"books.db\";\n$db = new SQLite3($database_name);\n$query = \"CREATE TABLE IF NOT EXISTS books (id INTEGER PRIMARY KEY, title STRING, author STRING)\";\n$db-&gt;exec($query);\n\nif ($_POST) {\n    if ($_POST[\"action\"] == \"create\") {\n        $title = $_POST[\"title\"];\n        $author = $_POST[\"author\"];\n        $stmt = $db-&gt;prepare(\"INSERT INTO books (title, author) VALUES (:title, :author)\");\n        $stmt-&gt;bindValue(\":title\", $title, SQLITE3_TEXT);\n        $stmt-&gt;bindValue(\":author\", $author, SQLITE3_TEXT);\n        $stmt-&gt;execute();\n    }\n}\n?&gt;\n</code></pre> <p>The code above connects to a SQLite database when the app is launched. SQLite is a lightweight alternative to full database systems such as PostgreSQL or MySQL. It stores all data in a simple file. It also automatically creates a database if you give it a file that doesn't exist, so in our case it will create the <code>books.db</code> file the first time we run this code.</p> <p>Note that we use a database directly in the <code>/tmp</code> folder of the Docker container. This means you'll lose all data every time you restart your application. We'll fix this towards the end of the tutorial when we deploy the application and set up persistent storage.</p> <p>This code also creates a table for our books if it doesn't already exist. The <code>if</code> statement checks if there's any data in <code>$_POST</code>, which will be populated from the form we defined in <code>index.php</code>, and then we insert this data into the database. Note that we use parameterized queries instead of basic string concatenation to include the dynamic user input in the <code>INSERT INTO</code> statement. This is to prevent SQL injection, which is a common vulnerability where a malicious user hacks your database by modifying the database inputs.</p> <p>To use this code from the main <code>index.php</code> file, add the following lines to the top.</p> <pre><code>&lt;?php\ninclude \"app.php\";\n?&gt;\n</code></pre> <p>This imports all the code into <code>index.php</code>, as if you had written in that file. We keep most of the PHP code in a separate file to make our codebase better organized.</p> <p>You can run the application again now and you'll see that you're able to insert books using the form. However, we aren't ever reading the books from the database again, so they'll just disappear. Let's add some more logic to retrieve any saved books from the database and display them to the user.</p>","title":"Building the Backend"},{"location":"tutorials/build-a-docker-php-sqlite-app/#retrieving-the-books-from-the-database","text":"<p>We'll display our books to the user by grabbing them all from the database, looping through them, and adding a table row for each entry.</p> <p>In the <code>app.php</code> file, add the following function to the top of the file</p> <pre><code>function getBooks($db) {\n    $query = \"SELECT * FROM books\";\n    $results = $db-&gt;query($query);\n    return $results;\n}\n</code></pre> <p>This retrieves the books from the database and returns an array containing all of them. Update the Books section of the <code>index.php</code> file with the following code.</p> <pre><code>        &lt;h2&gt;Books&lt;/h2&gt;\n        &lt;table&gt;\n            &lt;thead&gt;\n                &lt;tr&gt;\n                    &lt;th&gt;Book Title&lt;/th&gt;\n                    &lt;th&gt;Author&lt;/th&gt;\n                    &lt;th colspan=\"2\"&gt;Action&lt;/th&gt;\n                &lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;?php\n            $results = getBooks($db);\n            while ($row = $results-&gt;fetchArray()):\n            ?&gt;\n            &lt;tr&gt;\n                &lt;td&gt;&lt;?php echo $row[\"title\"]; ?&gt;&lt;/td&gt;\n                &lt;td&gt;&lt;?php echo $row[\"author\"]; ?&gt;&lt;/td&gt;\n                &lt;td&gt;\n                    &lt;button onclick=\"update_book(\n                        &lt;?php echo $row[\"id\"] ?&gt;,\n                        '&lt;?php echo $row[\"title\"]?&gt;',\n                        '&lt;?php echo $row[\"author\"]?&gt;'\n                    )\"&gt;Edit&lt;/button&gt;\n                &lt;/td&gt;\n                &lt;td&gt;\n                    &lt;button onclick=\"delete_book(\n                        &lt;?php echo $row[\"id\"] ?&gt;,\n                        '&lt;?php echo $row[\"title\"]?&gt;',\n                        '&lt;?php echo $row[\"author\"]?&gt;'\n                    )\"&gt;Delete&lt;/button&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;?php endwhile; ?&gt;\n        &lt;/table&gt;\n</code></pre> <p>Here we use our <code>getBooks</code> function to retrieve all the books and then a <code>while</code> loop to iterate through each one. We add each book as a new table row, displaying the title and the author in their own columns. We also add more columns with an \"Edit\" and \"Delete\" button for each book. The buttons call JavaScript functions (that we haven't written yet), passing in the ID, title, and author of the book that the user wants to edit or delete.</p> <p>If you run the app again, you'll see that now any books that you add automatically show up in the table. The Edit and Delete buttons don't work yet though, so let's fix that.</p>","title":"Retrieving the Books from the Database"},{"location":"tutorials/build-a-docker-php-sqlite-app/#adding-edit-and-delete-functionality","text":"<p>To avoid our table getting too messy, we'll use some basic JavaScript to edit and delete books, along with some hidden forms at the top of our page. Right after the opening <code>&lt;body&gt;</code> tag in <code>index.php</code>, add the following forms.</p> <pre><code>        &lt;form id=\"updateForm\" method=\"POST\"&gt;\n            &lt;input type=\"hidden\" name=\"update_id\" id=\"update_id\"&gt;\n            &lt;input type=\"hidden\" name=\"new_title\" id=\"new_title\"&gt;\n            &lt;input type=\"hidden\" name=\"new_author\" id=\"new_author\"&gt;\n            &lt;input type=\"hidden\" name=\"action\" value=\"update\"&gt;\n        &lt;/form&gt;\n\n        &lt;form id=\"deleteForm\" method=\"POST\"&gt;\n            &lt;input type=\"hidden\" name=\"action\" value=\"delete\"&gt;\n            &lt;input type=\"hidden\" name=\"delete_id\" id=\"delete_id\"&gt;\n        &lt;/form&gt;\n</code></pre> <p>These are two forms consisting only of hidden input fields, so they won't be visible to the user. We'll populate the values and submit them using JavaScript. The first form has values for <code>new_title</code> and <code>new_author</code> so we can update the database with new values supplied by the user. The \"delete\" form only has the book ID, as that's all we need to remove it from the database.</p> <p>We need matching JavaScript functions to use these forms, so add the following code to the <code>&lt;head&gt;</code> section of your <code>index.php</code> file.</p> <pre><code>        &lt;script&gt;\n        function update_book(id, title, author) {\n            let new_title = prompt(\"Please enter new title:\", title);\n            if (new_title == null || new_title  == \"\") { return; }\n            let new_author = prompt(\"Please enter new author:\", author);\n            if (new_author == null || new_author  == \"\") { return; }\n            document.getElementById(\"new_title\").value = new_title;\n            document.getElementById(\"new_author\").value = new_author;\n            document.getElementById(\"update_id\").value = id;\n            document.getElementById(\"updateForm\").submit();\n        }\n\n        function delete_book(id, title, author) {\n            let is_sure = \"Deleting book '\" + title + \"' by '\" + author + \"'. Are you sure?\";\n            if (confirm(is_sure) == true) {\n                document.getElementById(\"delete_id\").value = id;\n                document.getElementById(\"deleteForm\").submit();\n            }\n        }\n        &lt;/script&gt;\n</code></pre> <p>We pass variables for the ID, title, and author to both functions. Although the existing title and ID are not strictly necessary, it's nice to show them to the user for reference when they are entering the new information or as a confirmation for the delete function. The update function prompts the user for a new title and author and then submits the update form, while the delete function confirms if the user really wants to delete that entry and then submits the delete form.</p> <p>Finally, to make these work on the backend, update the if statement in the <code>app.php</code> file to look as follows.</p> <pre><code>if ($_POST) {\n    if ($_POST[\"action\"] == \"create\") {\n        // Insert new book\n        $title = $_POST[\"title\"];\n        $author = $_POST[\"author\"];\n        $stmt = $db-&gt;prepare(\"INSERT INTO books (title, author) VALUES (:title, :author)\");\n        $stmt-&gt;bindValue(\":title\", $title, SQLITE3_TEXT);\n        $stmt-&gt;bindValue(\":author\", $author, SQLITE3_TEXT);\n        $stmt-&gt;execute();\n    }\n    elseif ($_POST[\"action\"] == \"update\") {\n        $id = $_POST['update_id'];\n        $title = $_POST['new_title'];\n        $author = $_POST['new_author'];\n        $stmt = $db-&gt;prepare(\"UPDATE books SET title=:title, author=:author WHERE id=:id\");\n        $stmt-&gt;bindValue(':title',$title,SQLITE3_TEXT);\n        $stmt-&gt;bindValue(':author',$author,SQLITE3_TEXT);\n        $stmt-&gt;bindValue(':id',$id,SQLITE3_INTEGER);\n        $stmt-&gt;execute();\n    }\n\n    elseif ($_POST[\"action\"] == \"delete\") {\n        $id = $_POST['delete_id'];\n        $stmt = $db-&gt;prepare('DELETE FROM books WHERE id=:id');\n        $stmt-&gt;bindValue(':id',$id,SQLITE3_INTEGER);\n        $stmt-&gt;execute();\n    }\n}\n</code></pre> <p>This now handles the update and delete forms we built, calling <code>UPDATE</code> or <code>DELETE</code> statements on our database as required. Note that we are still using prepared statements to protect against SQL injection.</p>","title":"Adding Edit and Delete Functionality"},{"location":"tutorials/build-a-docker-php-sqlite-app/#deploying-the-application","text":"<p>The application should now run fine on your local machine, but let's deploy it to the internet so others can use it too. We'll:</p> <ul> <li>Create a GitHub repository and push the code to GitHub.</li> <li>Create a Docker and Data Capsule on Code Capsules and bind them together.</li> <li>Deploy the code to Code Capsules.</li> </ul> <p>Head over to GitHub and create a new repository. Then, in your project's root folder, run the commands below from the terminal, replacing \"username\" and \"repository_name\" with your own values from GitHub.</p> <pre><code>git init\ngit add -A\ngit commit -m \"Added book recommendation app files\"\ngit branch -M main\ngit remote add origin git@github.com:username/repository_name.git\ngit push -u origin main\n</code></pre> <p>Your remote repository will now be up to date with your local one.</p>","title":"Deploying the Application"},{"location":"tutorials/build-a-docker-php-sqlite-app/#deploying-to-code-capsules","text":"<p>The final step is to deploy our app to Code Capsules. We'll use two capsules for this: a Docker Capsule for the application and a persistent storage Data Capsule for the database, so that our data doesn't disappear each time the application is restarted.</p> <p>Change the line where you connect to the database in the <code>app.php</code> file to match the following.</p> <pre><code>$database_name = $_ENV[\"PERSISTENT_STORAGE_DIR\"] .\"/books.db\";\n</code></pre> <p>In Code Capsules, the <code>PERSISTENT_STORAGE_DIR</code> environment variable will point to the Data Capsule once the two capsules are bound together.</p> <p>Push all of your code changes up to your GitHub repository and ensure that Code Capsules is authorized to read that repository. You can reference this deployment guide to see how to do so in greater detail.</p> <p>Now create a new Data Capsule and a Docker Capsule in a single Space in Code Capsules. For the Data capsule choose \"A persistent storage mounted directly to your capsule\".</p> <p>For the Docker capsule, choose your GitHub repository and enter <code>Dockerfile</code> for the Dockerfile location. In the configuration tab, set \"Network Port\" to \"80\" to match what Apache is running on, and bind the Docker Capsule to the Data Capsule.</p> <p></p> <p>Deploy and build the application and you should see it running on a custom URL that you can share with the world.</p>","title":"Deploying to Code Capsules"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/","text":"<p></p> <p>In this tutorial, we\u2019ll show you how to use a Redis Data Capsule to hold web-scraping tasks in a queue. Those tasks will be completed in a background process, so the user has a smooth, uninterrupted web experience with no tasks slowing the web page down.</p> <p>Our app will create an ad-free, text-only version of a web page (for example, a CNN.com article) that the user provides in the form of a URL. </p> <p>Our reader mode app will:</p> <ul> <li>Display a homepage that prompts the user to provide a URL.</li> <li>Add a task to a Redis queue to scrape the contents of the given URL as a background process.</li> <li>Immediately present the user with a loading page, demonstrating that the background process does not interfere with the loading of new web pages.</li> <li>Once the task has been completed from the queue, display an ad-free, text-only version of the web page the user provided.</li> </ul>","title":"Building a \"Reader Mode\" Full Stack Application with Flask and Redis"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#overview-and-requirements","text":"<p>Make sure you have these technologies and accounts setup and ready to follow this tutorial:</p> <ul> <li>A text editor, such as VS Code or Atom.</li> <li>A registered GitHub account and Git installed.</li> <li>Python3 installed.</li> <li>Redis installed on your system.</li> </ul>","title":"Overview and Requirements"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#setting-up-the-project","text":"<p>Now that we have all the requirements in place, we can set up our project. Start by creating and navigating to the project folder by entering these commands in a terminal:</p> <pre><code>mkdir redis-queue-tutorial\ncd redis-queue-tutorial\n</code></pre> <p>From this point on, we'll refer to <code>redis-queue-tutorial</code> as the project root folder.</p>","title":"Setting up the Project"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#creating-a-virtual-environment","text":"<p>Creating a virtual environment will allow our Python project to use packages in isolation, avoiding disrupting the dependencies of other projects on the system.</p> <p>In a terminal, run the following command in the project root folder to create a virtual environment:</p> <pre><code>python3 -m venv env \n</code></pre> <p>Activate the virtual environment with one of these commands:</p> <p>MacOS</p> <pre><code>source env/bin/activate\n</code></pre> <p>Windows</p> <pre><code>.\\env\\Scripts\\activate\n</code></pre> <p>After activating the virtual environment, the name we set for the environment, <code>env</code>, should appear in your terminal alongside your current line. This means the environment was successfully activated.</p> <p></p>","title":"Creating a Virtual Environment"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#installing-dependencies","text":"<p>We can now install packages to the virtual environment we created in the previous step. </p> <p>Run the command below:</p> <pre><code>pip install flask bs4 redis rq gunicorn lxml\n</code></pre> <p>These are the packages we install with this command:</p> <ul> <li><code>flask</code> installs the Flask web framework, which we'll use to set up views, tasks, and the web application.</li> <li><code>bs4</code> installs Beautiful Soup, which we'll use to scrape and parse the HTML from the client's provided URL.</li> <li><code>redis</code> installs Redis, which we'll use to run a local Redis server and provide the connection to both the local server and the Redis Data Capsule.</li> <li><code>rq</code> installs RQ (Redis Queue), which we'll use to add jobs to a queue and initialise a worker to work on that queue in a background process.</li> <li><code>gunicorn</code> installs Gunicorn, which will help Code Capsules set up our project.</li> </ul>","title":"Installing Dependencies"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#initialising-an-empty-git-repository","text":"<p>From the project's root folder, enter the <code>git init</code> command in the terminal to initialise a Git repository for the project. </p> <p>Setting up a Git repository allows us to track changes we make to the project and will help us push the app to production from a local machine.</p> <p>In the root folder, create a <code>.gitignore</code> file and add the text below to it:</p> <pre><code>env/\ndump.rdb\n</code></pre> <p>The <code>.gitignore</code> file will stop Git from tracking our virtual environment folder. The virtual environment folder is not needed when pushing the application to production.</p>","title":"Initialising an Empty Git Repository"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#linking-to-github","text":"<p>Create a new repository on GitHub. Then run the command below from the terminal (make sure to replace <code>username</code> and <code>repository_name</code> with your own):</p> <p><pre><code>git remote add origin git@github.com:username/repository_name.git \n</code></pre> Now the local repository is linked to the external GitHub repository.</p>","title":"Linking to GitHub"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#initialising-a-flask-app","text":"<p>Now we can start to put our application together.</p> <p>First we will create our Flask app. Create a new folder called <code>queue_app</code> in the root directory. In the <code>queue_app</code> folder, create a file called <code>__init__.py</code> and paste these lines of code into it:</p> <pre><code>import os\nfrom flask import Flask\nimport redis\nfrom rq import Queue\n\napp = Flask(__name__)\n\nr = redis.Redis()\n\nq = Queue(connection=r)\n\nfrom queue_app import views\nfrom queue_app import tasks\n</code></pre> <p>The code in the <code>__init__.py</code> file initialises a Flask app, connects to a local Redis server, and creates a queue that will store our tasks later. </p> <p>The database we are currently connecting to is our local Redis server, but later we will change this to connect to the Redis Data Capsule through an environment variable.</p> <p>This file also imports the views and tasks we will be creating later on.</p>","title":"Initialising a Flask App"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#creating-the-homepage","text":"<p>Next we will create the <code>.html</code> file for our homepage. Inside the <code>queue_app</code> folder, create a new folder called <code>templates</code>. In the <code>templates</code> folder, create a new file called <code>index.html</code>, and paste the following code in it:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, shrink-to-fit=no\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"&gt;    \n    &lt;link rel=\"stylesheet\" href=\"{{ url_for('static', filename='styles.css') }}\"&gt;\n    &lt;title&gt;Job Queue&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"jumbotron jumbotron-fluid\"&gt;\n        &lt;h5 class=\"mt-3\"&gt;Reader Mode&lt;/h5&gt;\n        &lt;div class=\"card-body\"&gt;\n            &lt;form action=\"/\"&gt;\n                &lt;div class=\"form-group\"&gt;\n                    &lt;label&gt;Enter the url of the webpage you would like to read:&lt;/label&gt;\n                    &lt;input type=\"url\" class=\"form-control\" name=\"url\" placeholder=\"Enter URL\" required&gt;\n                &lt;/div&gt;\n                &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Submit&lt;/button&gt;\n            &lt;/form&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;    \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>This is a simple HTML page with a form, input, and button that prompts the user to submit a URL. The page also has some styling, which we will address later. This page\u2019s form will allow the user to send a request to our app with the URL attached to that request.</p>","title":"Creating the Homepage"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#creating-a-view-for-the-homepage","text":"<p>Now let\u2019s create the view that will render the homepage HTML and handle requests from the user. </p> <p>Inside the <code>queue_app</code> folder create a new file called <code>views.py</code> and paste this code inside:</p> <pre><code>import hashlib\n\nfrom queue_app import app\nfrom queue_app.tasks import scrape_url\nfrom queue_app import q \nfrom queue_app.__init__ import r\n\nfrom flask import redirect, render_template, request, url_for\n\nfrom rq.job import Job\n\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef add_task():\n    if request.args:\n        url = request.args.get(\"url\")\n        job_id = hashlib.md5(url.encode()).hexdigest()\n        q.enqueue(scrape_url, url, job_id = job_id, result_ttl=5000)\n        return redirect(url_for(f\"get_results\", job_key=job_id))\n    return render_template(\"index.html\")\n</code></pre> <p>Here we create a view that returns the homepage for the user. It also detects whether the user has submitted a request and if so it does a few things:</p> <ul> <li>Retrieves the URL from the request.</li> <li>Creates a unique ID for the URL using the hashlib module.</li> <li>Adds a task to the queue with the URL for processing.</li> <li>Redirects to the final results webpage view.</li> </ul> <p>Next we need to create the task that will scrape the user's URL, and the final results page to display the tasks results.</p>","title":"Creating a View for the Homepage"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#creating-a-task","text":"<p>In the <code>queue_app</code> folder, create a new file called <code>tasks.py</code> and add the following lines of code:</p> <pre><code>from urllib import request\nfrom bs4 import BeautifulSoup\n\ndef scrape_url(url):\n    try:\n        r = request.urlopen(url)\n\n        if \"cnn\" in url:\n            tag_text = \"div\"\n            class_text = \"zn-body__paragraph\"\n        else:\n            tag_text=\"p\"\n            class_text = None\n\n        soup = BeautifulSoup(r.read().decode(), \"lxml\")\n        title = soup.title.text\n        paragraphs = [p.text for p in soup.find_all(tag_text, class_text)]\n        return paragraphs, title\n    except Exception as e:\n        print(e)\n        paragraphs = [\"The url you submitted is invalid or cannot be scraped.\"]\n        title = \"Failed to access url\"\n        return paragraphs, title\n</code></pre> <p>This file creates the <code>scrape_url</code> function that takes in the user's URL as an argument. </p> <p>In this function a few things happen:</p> <ul> <li>It checks if the URL can be accessed by opening the URL in a <code>try</code> block.</li> <li>It then checks if the URL is from CNN's website (CNN holds their text in divs) and provides the HTML tags and classes that contain the main news articles for those sites.</li> <li>If the URL isn\u2019t from CNN, it grabs all the paragraph tags from that site.</li> <li>It uses BeautifulSoup to scrape the HTML from the URL, and extract the title and body text from the URL.</li> <li>It returns the results as a tuple.</li> <li>If the URL can't be scraped, it returns an error message in place of the title and paragraphs.</li> </ul>","title":"Creating a Task"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#adding-the-html-for-the-results-page","text":"<p>Next we will add the HTML for the results web page. Inside the <code>templates</code> folder, create a file called <code>results_page.html</code> and paste the following code into it:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, shrink-to-fit=no\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"{{ url_for('static', filename='styles.css') }}\"&gt;\n    {% if title %}\n        &lt;title&gt;{{title}}&lt;/title&gt;\n    {% else %}\n        &lt;title&gt;Reader Mode Loading&lt;/title&gt;\n    {% endif %}\n&lt;/head&gt;\n&lt;body&gt;\n    {% if paragraphs %}\n    &lt;div class=\"jumbotron jumbotron-fluid\"&gt;\n        &lt;h1&gt;{{ title }}&lt;/h1&gt;\n        &lt;br&gt;\n        {% for paragraph in paragraphs %}\n            &lt;p&gt;{{paragraph}}&lt;/p&gt;\n        {% endfor %}\n    &lt;/div&gt;\n    {% else %}\n        &lt;div class=\"jumbotron jumbotron-fluid\" id=\"load-page\"&gt;\n            &lt;script&gt;setTimeout(() =&gt; {location.reload(true)}, 5000)&lt;/script&gt;\n            &lt;h1&gt;Your request is in the queue.&lt;/h1&gt;\n            &lt;p&gt;Current number of jobs in the queue: {{ q_len }}&lt;/p&gt;\n            &lt;p&gt;This page will refresh every 5 seconds until your job has been completed.&lt;/p&gt;\n            &lt;div class=\"loader\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n    {% endif %}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>This page checks to see if a body text has been returned by the queued task. If not, it displays some text informing the user that the result is loading, as well as the number of items in the queue. If the results haven\u2019t been returned, the page will reload every five seconds until they have returned.</p> <p>Once the results are returned, the page displays the title and paragraphs returned from the task.</p>","title":"Adding the HTML for the Results Page"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#creating-a-view-for-the-results-page","text":"<p>Now we will create the view that will render the <code>results_page.html</code> HTML. The view will also check the queue for the user's completed task and return the results once complete.</p> <p>Open up the <code>views.py</code> file and append these lines of code to the end of the file:</p> <pre><code>@app.route(\"/results/&lt;job_key&gt;\", methods=['GET'])\ndef get_results(job_key):\n\n    q_len = len(q.jobs) + 1\n    job = Job.fetch(job_key, connection=r)\n\n    # Print errors to console\n    try:\n        if type(job.result) != \"list\":\n            print(job.result)\n        elif job.result[2]:\n            print(job.result[2])\n    except:\n        pass\n\n    if job.is_finished:\n        return render_template(\"results_page.html\", paragraphs=job.result[0], title = job.result[1]), 200\n    else:\n        return render_template(\"results_page.html\", paragraphs=False, q_len=q_len), 202\n</code></pre> <p>This view takes the user's task ID as <code>job_id</code> and fetches that job from the queue. It then checks if the job is complete. If so, it returns the rendered HTML with the arguments needed to display the text. If the task is not complete yet, it returns the rendered HTML with the arguments needed to display the loading page.</p>","title":"Creating a View for the Results Page"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#creating-the-worker","text":"<p>Now we need to create the worker that will listen to our Redis server and work on the queue when tasks are added. In the project root directory, create a file called <code>worker.py</code> and paste the following lines of code in it:</p> <pre><code>import os\nimport redis\nfrom rq import Worker, Queue, Connection\n\nlisten = ['default']\nconn = redis.Redis()\n\nif __name__ == '__main__':\n    with Connection(conn):\n        worker = Worker(list(map(Queue, listen)))\n        worker.work()\n</code></pre> <p>This worker connects to our Redis server, and when run, creates a worker linked to our Redis queue. The worker will listen to the queue, and when jobs are added, it will perform the tasks in the queue one at a time.</p>","title":"Creating the Worker"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#adding-styling-for-the-html","text":"<p>The two HTML pages we have created so far use Bootstrap styling that you can see linked in the head of the file.</p> <p>Flask requires a particular file structure for static files. In the <code>queue_app</code> folder, create a folder called <code>static</code>. In the <code>static</code> folder, create a file called <code>styles.css</code> and paste in the following lines of code:</p> <pre><code>.jumbotron{\n    text-align: left;\n    margin:  2% 10%;\n    padding: 2% 15%;\n}\n\n.loader {\n    border: 16px solid #f3f3f3; /* Light grey */\n    border-top: 16px solid #c7ccce; /* Blue */\n    border-radius: 50%;\n    width: 120px;\n    height: 120px;\n    animation: spin 2s linear infinite;\n    margin: auto;\n  }\n\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n\n#load-page{\n    text-align: center;\n}\n\n@media only screen and (max-width: 600px) {\n  h1 {\n    font-size: 25px;\n  }\n  .jumbotron{\n    margin: 0;\n  }\n}\n</code></pre> <p>This CSS will format our text on the homepage and results page. It also adds some responsiveness for smaller screens, and gives some animation to the loading screen we created.</p> <p>In the head of your file, you might have noticed this link to a style sheet:</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"{{ url_for('static', filename='styles.css') }}\"&gt;\n</code></pre> <p>This links to the CSS file we created using the <code>url_for</code> function.</p>","title":"Adding Styling for the HTML"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#testing-locally","text":"<p>In the project's root folder create a file called <code>run.py</code> and add the following code:</p> <pre><code>from queue_app import app \n\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>Now to test our application, we will need three terminal windows. </p> <p>In the first window, we can run our Flask app. Enter these lines into your terminal to run the app:</p> <pre><code>export FLASK_APP=run.py\nflask run \n</code></pre> <p>You should see this output in your terminal, which shows your web application is running on your local host:</p> <p></p> <p>You can click the link to open your homepage in your browser.</p> <p></p> <p>Our webpage is up, but we still need to start up our local Redis server and <code>worker.py</code> if we want our webpage to have any functionality.</p> <p>In a new terminal, run the following line of code:</p> <pre><code>redis-server\n</code></pre> <p>This will start up your local Redis server and will show this output:</p> <p></p> <p>Next we need to start up our worker. In a new terminal window, run the following command:</p> <pre><code>python3 worker.py\n</code></pre> <p>Note On macOS you may need to run the following command to allow multiprocessing in the worker before running the command above which starts the worker:</p> <pre><code>export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES\n</code></pre> <p>This will start up your worker, which will begin listening to the Redis server. You should see this output:</p> <p></p> <p>Now we can try out the web app by inserting a URL into the form and clicking \"Submit\". </p> <p>You should see a page loading. </p> <p></p> <p>This means the job is in the queue, but has not been completed yet. The page will refresh every five seconds until the results from the job are returned by the task. </p> <p>When the results are in, the webpage should show an output like this on the next refresh:</p> <p></p> <p>Now that our app is working, we can prepare for deployment on Code Capsules. </p>","title":"Testing Locally"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#preparing-for-deployment","text":"<p>First we need to change the Redis connection in the <code>worker.py</code> and <code>__init__.py</code> files to ensure that they connect to the Redis Data Capsule we will create, rather than our local Redis server. </p> <p>Replace the code in the <code>worker.py</code> file,  with the lines of code below:</p> <pre><code>import os\nimport redis\nfrom rq import Worker, Queue, Connection\n\nlisten = ['default']\nredis_url = os.getenv('REDIS_URL')\nconn = redis.from_url(redis_url)\n\nif __name__ == '__main__':\n    with Connection(conn):\n        worker = Worker(list(map(Queue, listen)))\n        worker.work()\n</code></pre> <p>Replace the code in the <code>__init__.py</code> file, with the code below:</p> <pre><code>import os\nfrom flask import Flask\nimport redis\nfrom rq import Queue\n\napp = Flask(__name__)\nredis_url = os.getenv('REDIS_URL')\nr = redis.from_url(redis_url)\nq = Queue(connection=r)\n\nfrom queue_app import views\nfrom queue_app import tasks\n</code></pre> <p>Here we connect our app to the Redis Data Capsule we will create by accessing an environment variable called <code>REDIS_URL</code>.</p> <p>This environment variable will be defined by Code Capsules once we have created our Redis Data Capsule and Backend Capsules. </p>","title":"Preparing for Deployment"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#creating-a-procfile-and-requirementstxt","text":"<p>Now we need to create a <code>Procfile</code>. This file tells Code Capsules which application to run as our web application through the <code>gunicorn</code> module. </p> <p>Create a file called <code>Procfile</code> in the project root directory and paste in the following text:</p> <pre><code>web: gunicorn queue_app:app\n</code></pre> <p>Next, create a <code>requirements.txt</code> file, which is a file that contains the information about our project's dependencies. Code Capsules will use this file to deploy our application. </p> <p>In the command line, make sure you are in the project root folder and enter this command:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre>","title":"Creating a Procfile and <code>requirements.txt</code>"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#pushing-files-to-github","text":"<p>Next we will push our code to our Git repository with the following commands in the terminal:</p> <pre><code>git add .\ngit commit -m \"commit message\"\ngit branch -M main\ngit push -u origin main\n</code></pre> <p>Finally, we will create our capsules. We need to create three capsules, our Redis Data Capsule, a Backend Capsule for our worker process, and another Backend Capsule for our web app.</p>","title":"Pushing Files to GitHub"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#logging-in-to-code-capsules","text":"<p>Go to the Code Capsules website, create an account, and login. </p> <p>After logging in, you\u2019ll see a page like the one below:</p> <p></p> <p>When creating a Code Capsules account, a Personal Team is created by default. A Team is great for collaborative development, as you can invite people to work on and view your applications. </p>","title":"Logging in to Code Capsules"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#connecting-to-github","text":"<p>Now we need to connect our GitHub account to our Code Capsules account so that our applications can be pulled from GitHub repositories. </p> <p>Do this by clicking the profile image button on the top right of the screen and then finding and clicking the GitHub button. </p> <p></p> <p>Log in to your GitHub account, select your username, press \"Only select repositories\", and then select the repository containing your project from the list. Finally press \"Install &amp; Authorize\".</p> <p></p>","title":"Connecting to GitHub"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#creating-a-redis-database-capsule","text":"<p>Next we can enter our \"Personal Space\" and create a capsule. A Space allows you to organize one or more capsules together. Inside this Space, create a new capsule.</p> <p>The first capsule we will create is the Redis Data Capsule. Select \"Data Capsule\" from the list and then select \"Redis Memory Cache\". </p> <p> </p> <p> </p> <p> </p>","title":"Creating a Redis Database Capsule"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#creating-a-backend-capsule-for-the-worker","text":"<p>Next we will create the capsule that will run our worker. Create a new capsule, select \"Backend Capsule\" type, and then select your GitHub repository in the list . </p> <p>Now enter <code>python3 worker.py</code> in the run command. This build command will provide special information to the capsule about how it should be built. The command we entered tells the capsule to run the worker as the main app rather than the Flask web application. </p> <p> </p> <p></p> <p>The next step is to bind our capsule to our Redis Data Capsule. Do this by going to the \"Configure\" tab of your Backend Capsule and then scroll to the \"Bind Data capsule\" section. Click on the \"Bind\" button to bind the capsules.</p> <p></p>","title":"Creating a Backend Capsule for the worker"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#creating-a-backend-capsule-for-the-flask-web-app","text":"<p>Now to create a capsule for our Flask application. Create a new Backend Capsule and link it to your GitHub repository. </p> <p>Do not add a build command, as the <code>Procfile</code> we created will run our Flask app for us. </p> <p>The next step is to bind our capsule to our Redis Data Capsule. Do this by going to the \"Configure\" tab of your new Backend Capsule and selecting \"Bind\" in the \"Bind Data capsule\" section.</p> <p>Wait for the web app capsule to finish building, and then select \"Live Website\" to see the live app. </p> <p></p> <p>Our web application has now been deployed through Code Capsules and can be reached by anyone who has our URL.</p>","title":"Creating a Backend Capsule for the Flask Web App"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#running-the-web-and-worker-processes-in-the-same-capsule","text":"<p>We created two Backend Capsules for this project because running two processes (the web process and worker process) on the same capsule will not scale properly in practice. If you wish to run both processes on the same capsule, to save money on a smaller project that will not need to scale, there is a method to do this.</p> <p>To use one Backend Capsule to run the web app, create a file called <code>codecapsules.sh</code> in your project root directory. In that file paste the following text:</p> <pre><code>gunicorn run:app --daemon\npython3 worker.py\n</code></pre> <p>Then change the <code>Procfile</code> text to the following:</p> <pre><code>web: sh codecapsules.sh\n</code></pre> <p>Now create a single Backend Capsule, link it to your GitHub repository, and do not add a build command. Bind it to your Redis Data Capsule, and once it has finished building, it should deploy with the web process daemonised in the background and the worker in the foreground.</p>","title":"Running the Web and Worker processes in the same capsule"},{"location":"tutorials/build-a-reader-mode-app-with-flask-and-redis/#next-steps","text":"<p>In this tutorial, we made use of background processing to handle tasks in order to improve the user's experience. You could expand on this by:</p> <ul> <li>Routing the user to a more exciting page than our current load page.</li> <li>Add functionality to email the final document to the user.</li> </ul>","title":"Next Steps"},{"location":"tutorials/build-a-web-file-store/","text":"<p></p> <p>An online file storage drive you can access from all your devices is a very useful tool. It's the basis of services like Dropbox and Google Drive. </p> <p>Code Capsules's File System Data Capsule mounts as a standard file system to a Backend Capsule, providing a convenient file storage option you can use instead of a blob store on other platforms. The file systems are well supported in most programming languages and familiar to programmers.</p> <p>In this tutorial, we'll build a basic web interface to upload, download and delete files, secured with a simple, single-user authentication scheme.</p> <p>We'll use a Backend Capsule with a file store Data Capsule, Node.js as the programming language, and Express as the web framework.</p>","title":"Building a Web File Store"},{"location":"tutorials/build-a-web-file-store/#overview-and-requirements","text":"<p>You'll need the following services and software set up for this tutorial </p> <ul> <li>Git set up and installed, and a registered GitHub account.</li> <li>Node.js installed.</li> <li>A registered Code Capsules account.</li> <li>An IDE or text editor to code the project in. We used Visual Studio Code in this tutorial, but you can use any tool you like.</li> </ul>","title":"Overview and Requirements"},{"location":"tutorials/build-a-web-file-store/#setting-up-the-project","text":"<p>With our requirements in place, let's get started setting them for our web file store project.</p>","title":"Setting Up The Project"},{"location":"tutorials/build-a-web-file-store/#creating-a-new-repo","text":"<p>First, we need a place to store our code, from which Code Capsules can deploy it to a capsule.</p> <p>Head over to GitHub and create a new repo. We're calling it filedrop here, but you can call it whatever you like. You can choose a Node <code>.gitignore</code> file to get started. Clone the new GitHub repo onto your computer and navigate to that directory in terminal (or command prompt, if you're on Windows).</p>","title":"Creating a New Repo"},{"location":"tutorials/build-a-web-file-store/#initializing-the-base-project","text":"<p>We'll use the Express.js application generator to create the project base. Type in the following: </p> <pre><code>npx express-generator --hbs \nnpm install\n</code></pre> <p>Here we've created a few files and folders that we can edit. The <code>--hbs</code> option tells the generator to use Handlebars as the HTML template language. We're using Handlebars as it's close to plain HTML, making it easier to pick up quickly.</p> <p>The command <code>npm install</code> downloads and installs all the dependencies and packages required by the base project. Open the folder with Visual Studio Code or your chosen editor, and browse through the files to get familiar with them. The <code>app.js</code> file in the project root is the main entry point for the app. </p> <p>It's time to push this boilerplate project up to Git. Type the following into command prompt or terminal: </p> <pre><code>git add . \ngit commit -am 'added base files for project'\ngit push origin\n</code></pre>","title":"Initializing the Base Project"},{"location":"tutorials/build-a-web-file-store/#creating-a-new-backend-capsule","text":"<p>Now we need a place to host our app. </p> <ol> <li>Log in to Code Capsules, and create a Team and Space for this project.</li> <li>Link Code Capsules to the GitHub repository created above. You can do this by clicking your username at the top right, and choosing Edit Profile. Now you can click the Github button to link to a repo. </li> <li>Create a new Capsule, selecting the \"Backend\" capsule type.</li> <li>Select the GitHub repository we created and linked to. If you're only using the repo for this project, you can leave the Repo Subpath field empty. You may need to add your repo to the team repo if you haven't already. Click the Modify Team Repos to do so. </li> <li>Click Next, then on the following page, click Create Capsule.</li> </ol> <p></p>","title":"Creating a New Backend Capsule"},{"location":"tutorials/build-a-web-file-store/#creating-a-new-data-capsule","text":"<p>We'll need some data storage to store the files uploaded to the web drive. </p> <ol> <li>Create a new Capsule, selecting the \"Data Capsule\" type.</li> <li>Select \"A persistent storage mounted directly to your capsule\" as the Data Type. Choose a product size, and give the capsule a name.</li> <li>Click \"Create Capsule\".</li> </ol> <p></p>","title":"Creating a New Data Capsule"},{"location":"tutorials/build-a-web-file-store/#linking-the-capsules","text":"<p>To use the Data Capsule with the Backend Capsule, we need to link the two. Head over to the backend capsule you created earlier, and click on the \"Configure\" tab. Scroll down to \"Bind Data Capsule\", and click \"Bind\" under the name of the data capsule you created. </p> <p></p> <p>After binding the capsules, scroll up to the section \"Capsule Parameters\". You'll notice that an environment variable, <code>PERSISTENT_STORAGE_DIR</code>, is automatically added with the mount point. We'll use this environment variable in the code to access the storage drive.</p> <p></p>","title":"Linking the Capsules"},{"location":"tutorials/build-a-web-file-store/#writing-the-web-files-code","text":"<p>Now that we have all our systems setup, we can get onto the best part - coding!</p>","title":"Writing the Web Files Code"},{"location":"tutorials/build-a-web-file-store/#getting-the-file-list","text":"<p>Open the file <code>index.js</code> in the <code>routes</code> folder of our project. This is the server code file for the default route <code>/</code> in the application. We'll use this route to show the file listing. </p> <p>To interact with the storage capsule and the files on it, we'll use the built-in <code>fs</code>, or file system, module included in Node.js. Add a reference to this module at the top of the file:</p> <pre><code>const fs = require('fs');\n</code></pre> <p>Then, modify the default <code>get</code> route to use the <code>fs</code> module to get the file listing on the storage drive: </p> <pre><code>router.get('/', function(req, res, next) {\n  fs.readdir(process.env.PERSISTENT_STORAGE_DIR, function(err, files){\n    if (err) return res.sendStatus(500); \n    files.sort(); \n    return res.render('index', {title: \"File Drop\", files: files}); \n  }); \n});\n</code></pre> <p>This code uses the <code>readdir</code> function to get an array of all the files in the storage drive. Note that we use the environment variable that was automatically setup when we bound the capsules to specify the path to the storage drive. Environment variables are accessible through the <code>process.env</code> object in Node.js.</p> <p>The <code>readdir</code> function calls a callback function once it has the file list. The callback has 2 arguments: <code>err</code>, which will contain an error object if the folder could not be read, and <code>files</code>, which is a string array of all the filenames in the folder, if the call was successful. </p> <p>If the <code>err</code> object is populated, we immediately return with an HTTP code <code>500</code> using the <code>sendStatus</code> function. The code <code>500</code> means that the server encountered an error processing a request, so the browser can show an error page. </p> <p>Since the <code>readdir</code> function doesn't return the files in any order, we use the built-in array <code>sort</code> function to sort the files. By default, the sort function sorts the files in ascending alphabetical order. If you'd like a different sort order, you can supply a function to customise the behaviour here. </p> <p>The sorted files can now be returned to the browser. We call the <code>res.render</code> function, which specifies the Handlebars template to use as the return web page. The templates are stored in the <code>views</code> folder of the project. The function also accepts a data object as an argument. Handlebars then combines this data with the template to fill in the values on the page.</p>","title":"Getting the File List"},{"location":"tutorials/build-a-web-file-store/#rendering-the-file-list","text":"<p>Our backend route gets the file list, and passes it through to the <code>index</code> HTML template. Let's customise that template to display the files. Open <code>index.hbs</code> in the views folder, and update the contents to this code:</p> <pre><code>&lt;h1&gt;{{title}}&lt;/h1&gt;\n\n&lt;div&gt;\n  &lt;h2&gt;File list&lt;/h2&gt;\n  &lt;table&gt;\n    &lt;tr&gt;\n      &lt;th&gt;File Name&lt;/th&gt;\n    &lt;/tr&gt;\n      {{#each files}}\n      &lt;tr&gt;\n        &lt;td&gt; \n            {{this}}\n        &lt;/td&gt;\n      &lt;/tr&gt;\n      {{/each}}\n  &lt;/table&gt;\n&lt;/div&gt;\n</code></pre> <p>Handlebars uses the sequence <code>{{ }}</code> to indicate sections of the template to be populated. In the first line, <code>{{title}}</code> will be replaced with the title we specified in the return from the <code>GET /</code> route we added earlier.</p> <p>Then we set up a simple table, and use the Handlebars each function to iterate over the elements in the <code>files</code> array we passed from the <code>Get /</code> route. The Handlebars keyword <code>{{this}}</code> is used to reference the current file name on each iteration. </p> <p>You can save, commit and push your changes so far. Our code should deploy automatically on Code Capsules. After deploying, you can visit the public URL, and you should see something like this:</p> <p></p> <p>This is good, but a little uninteresting without any files to view!</p>","title":"Rendering the File List"},{"location":"tutorials/build-a-web-file-store/#adding-the-file-upload-route","text":"<p>Let's add functionality to upload a file, then we'll be able to view it in the list. We'll first add an HTML upload form to the <code>index.hbs</code> file in the <code>views</code> folder. Add this code under the <code>&lt;h1&gt;{{title}}&lt;/h1&gt;</code> line: </p> <p><pre><code>&lt;div&gt;\n  &lt;h2&gt;Upload a file&lt;/h2&gt;\n    &lt;form ref='uploadForm' \n      id='uploadForm' \n      action='/' \n      method='post' \n      encType=\"multipart/form-data\"&gt;\n        &lt;input type=\"file\" name=\"newFile\" /&gt;\n        &lt;input type='submit' value='Upload' /&gt;\n    &lt;/form&gt; \n&lt;/div&gt;\n</code></pre> This code adds in a new HTML form, which makes a <code>POST</code> request to the root <code>/</code> (our index page) on submit. We've given the form 2 inputs: a file upload field specified by the <code>type=\"file\"</code> attribute, and the submit button. Note the <code>name</code> given to the file input - we'll need to remember this when processing the upload on the server side. </p> <p>Now that we have a way for the user to select a file to upload and send to the server, we need to create a route to process the submitted file. In the <code>index.js</code> file in the  <code>routes</code> folder, we'll add a new HTTP route. This one will be a POST route, as we are using it to upload a new file (or resource) onto the server. Add this stub for the route in the <code>index.js</code> file: </p> <p><pre><code>router.post('/', function(req, res){\n\n}); \n</code></pre> To handle file uploads with Express, we'll use a package that takes care of all the encoding and streaming concerns of file uploads. Open up the terminal and install the <code>express-fileupload</code> package using npm: </p> <p><pre><code>npm install express-fileupload\n</code></pre> To use this package, we need to add it into the middleware of our Express server. Open up the <code>app.js</code> file in the root folder of the project, and import the package by adding the following <code>require</code> statement at the top of the file:</p> <pre><code>const fileUpload = require('express-fileupload');\n</code></pre> <p>Now insert the package into the Express middleware pipeline by adding the following line just under the <code>var app = express();</code> statement:</p> <pre><code>app.use(fileUpload());\n</code></pre> <p>The <code>express-fileupload</code> module adds a <code>files</code> attribute to our <code>req</code> object. Through the <code>files</code> attribute we can access any uploads as their own objects, which are named the same as the HTML form <code>inputs</code>. </p> <p>Now we can expand on the route stub. In the <code>index.js</code> file, complete the <code>POST</code> route as follows:</p> <p><pre><code>router.post('/', function(req, res){\n\n    if (!req.files || Object.keys(req.files).length === 0) {\n      return res.status(400).send('No files were uploaded.');\n    }\n\n    const newFile = req.files.newFile;\n    const uploadPath = process.env.PERSISTENT_STORAGE_DIR + '/' + newFile.name;\n\n    newFile.mv(uploadPath, function(err) {\n      if (err) return res.status(500).send(err);\n      return res.redirect('/');\n    });\n\n});\n</code></pre> First, we check whether the <code>files</code> object exists on the route, and if it does exist, we check whether it has sub-objects on the list (no sub-objects means no form <code>input</code> fields were populated). If no <code>files</code> objects or sub-objects exist on the route, there is no file for the code to process, so we return early with an HTTP status <code>400</code> code and a message to the user. Status code <code>400</code> means there is an input error from the user side. </p> <p>Otherwise, having established that a file has been uploaded, we get the file object by referencing the same name we gave to our HTML input field (<code>newFile</code>) on the <code>files</code> object that the <code>express-fileupload</code> package added to the <code>req</code> object. Now that we have the file object, we can construct a path to the data capsule's location to save the file. We use the environment variable for the data capsule mount point (located in the Backend Capsule's \"Capsule Parameters\"), along with the path separator <code>/</code> and the name of the uploaded file. You can see all the properties available on the file object at the <code>express-fileupload</code> npm page. </p> <p>All we need to do now is to save the file to the upload path. The <code>express-fileupload</code> package provides the method <code>mv</code> on the file object to save the file to a disk location. It then calls a provided callback function when done, or if an error occurs. If we get a error back, we send an HTTP code <code>500</code> back to the client, which means that there was an error on the server side. Otherwise, if all goes well, we redirect the client to the index <code>/</code> page, which will call the <code>GET</code> route added earlier to refresh the file list on the client side.</p> <p>This is a good point to commit the code to Git, and test the new deployment on Code Capsules. After the capsule finishes rebuilding, navigate to the site. It should look something like this:</p> <p></p> <p>The upload control may look slightly different depending on the web browser and operating system you use. Try choosing a file and uploading it, and you should see it appear in the browser.</p>","title":"Adding the File Upload Route"},{"location":"tutorials/build-a-web-file-store/#downloading-a-file","text":"<p>We've got the functionality to upload files, and to list what files are on the server. Now let's add functionality to download files. </p> <p>We'll add a route with the format <code>/filename</code> to get the requested file. We'll make use of the <code>download</code> functionality built into Express to send the file back to the browser. </p> <p>Add this route to the <code>index.js</code> file.</p> <p><pre><code>router.get('/:filename', function(req, res, next){\n    const filepath = process.env.PERSISTENT_STORAGE_DIR + '/' + req.params.filename; \n    return res.download(filepath); \n}); \n</code></pre> This sets up a <code>GET</code> route, with the requested filename as a parameter. Then the function constructs a path to the file, using the environment variable for the data capsule mount point, along with the path separator <code>/</code> and the name of the requested file.</p> <p>Then we call the <code>download</code> method on the <code>res</code> (result) object with the constructed path. This sends the file to the browser. </p> <p>Now we need a way to call this route from the front end. Open the <code>index.hbs</code> file in the <code>views</code> folder, and modify the <code>{{this}}</code> template in the file list table to an HTML anchor <code>&lt;a&gt;</code> tag, with the <code>href</code> to the route we added above. We'll also add the <code>download</code> attribute to the tag so that the link will not be opened in the browser, but downloaded instead. The updated file list table should look like this now: </p> <pre><code>&lt;div&gt;\n  &lt;h2&gt;File list&lt;/h2&gt;\n  &lt;table&gt;\n    &lt;tr&gt;\n      &lt;th&gt;File Name&lt;/th&gt;\n    &lt;/tr&gt;\n      {{#each files}}\n      &lt;tr&gt;\n        &lt;td&gt; \n            &lt;a href='/{{this}}' download&gt;{{this}}&lt;/a&gt; \n        &lt;/td&gt;\n      &lt;/tr&gt;\n      {{/each}}\n  &lt;/table&gt;\n&lt;/div&gt;\n</code></pre> <p>Commit these changes, and wait for Code Capsules to redeploy the site. If you navigate to the site now, you should see the file you uploaded earlier as a hyperlink. Clicking on the link should download the file.</p> <p></p>","title":"Downloading a File"},{"location":"tutorials/build-a-web-file-store/#deleting-a-file","text":"<p>Now that we can upload and download files, we'll probably also need to remove files. We can use the HTTP <code>DELETE</code> verb on a route for this. </p> <p>Since the data capsule appears just like a regular file system to our code, we can use the built-in Node.js <code>fs</code> module here again. It has a method called <code>unlink</code> which deletes a file from a file system. We supply it with a path to the file, and a callback function to let us know the result of the delete file request. If we get an error, we'll send an HTTP code <code>500</code> status back to the browser, to let the browser know that an error occurred. If the delete action is successful, we'll send a status code <code>200</code>, which lets the browser know that the operation was a success. Add this code to the <code>index.js</code> file to implement the <code>DELETE</code> route: </p> <pre><code>router.delete('/:filename', function(req, res){\n  const filepath = process.env.PERSISTENT_STORAGE_DIR + '/' + req.params.filename; \n\n  fs.unlink(filepath, function (err) {\n    if (err) return res.sendStatus(500); \n    else return res.sendStatus(200); \n  }); \n\n}); \n</code></pre> <p>Now let's update the front end to be able to call this route. Open the <code>index.hbs</code> file, and add a new header column to the file table, along with a button for each file in the new column to delete it:</p> <pre><code>&lt;div&gt;\n  &lt;h2&gt;File list&lt;/h2&gt;\n  &lt;table&gt;\n    &lt;tr&gt;\n      &lt;th&gt;File Name&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n      {{#each files}}\n      &lt;tr&gt;\n        &lt;td&gt; \n            &lt;a href='/{{this}}' target=\"_blank\"&gt;{{this}}&lt;/a&gt; \n        &lt;/td&gt;\n        &lt;td&gt;\n          &lt;button&gt;Delete&lt;/button&gt;\n        &lt;/td&gt;\n      &lt;/tr&gt;\n      {{/each}}\n  &lt;/table&gt;\n&lt;/div&gt;\n</code></pre> <p>Next we'll create some front-end JavaScript code for the button to call when clicked. We'll use the browser-side <code>fetch</code> function to call the <code>DELETE</code> file route. Add this script block at the bottom of the <code>index.hbs</code> file: </p> <pre><code>&lt;script type=\"text/javascript\"&gt;\n  function deleteFile(filename){\n\n    var confirmation = confirm('Do you really want to delete the file ' + filename + '?'); \n    if (confirmation === true){\n      fetch('/' + filename, { method: 'DELETE' })\n      .then(response =&gt; location.reload())\n      .catch(error =&gt; alert('Error deleting the file! ' + error)); \n    }\n  }\n&lt;/script&gt;\n</code></pre> <p>This adds a new function <code>deleteFile</code> to the front-end index page. It has one argument: the name of the file to delete. First, we make use of the built-in <code>confirm</code> function which exists in all browsers. This brings up a dialog box with the message Do you really want to delete the file?, just to make sure the user didn't click the delete button accidentally. If the user clicks \"Yes\", the dialog box returns a <code>true</code> value. Then we call our <code>DELETE</code> route using <code>fetch</code>. We need to pass in the route to call, and we also send an init object which specifies that the <code>DELETE</code> HTTP verb must be used to call this route.</p> <p>The <code>fetch</code> function returns a <code>promise</code>. This is an alternative to callbacks. If the call was successful, the code in the <code>.then()</code> handler is called. This reloads the page, so that the file listing is updated to show that the file is now deleted. If the call fails, the code in the <code>catch</code> handler is called. This uses another standard browser dialog, an <code>alert</code>, to let the user know that something went wrong. </p> <p>Now let's hook this function up to the button we added for each file. We'll use the <code>onclick</code> event on the buttons to call the function, along with the filename to be deleted. Update the button code like this: </p> <pre><code>&lt;button onclick=\"deleteFile('{{this}}')\"&gt;Delete&lt;/button&gt;\n</code></pre> <p>Commit these changes, and wait for Code Capsules to redeploy the site. Then navigate to the site and try out the \"Delete\" button next to the filename.</p> <p></p>","title":"Deleting a File"},{"location":"tutorials/build-a-web-file-store/#adding-authentication","text":"<p>We've created the basic functions of a web drive, but anyone can get to the site and upload, download or delete documents. We need a way to control access. For this tutorial, we'll implement a very simple access control system that only allows access to one pre-defined user.</p> <p>We're going to use Passport to handle our access control. Passport is a modular package that allows for very simple authentication schemes to very elaborate ones, so you can upgrade the security of this app as you need.</p> <p>Our basic access control scheme is a username and password combination, entered on an HTML form that is posted to a <code>login</code> route. A session cookie will remember the logged-in user while they use the site, and we'll use the package <code>express-session</code> to manage the session. </p> <p>Passport's local strategy plugin will enable our username and password scheme.  </p> <p>Let's start by installing all these packages and plugins. Type the following in the terminal:</p> <pre><code>npm install passport passport-local express-session\n</code></pre> <p>Now add references to these packages to the top section of the <code>app.js</code> file. A good place to add them is after the <code>var logger = require('morgan');</code> line. Here's the code you'll need:</p> <pre><code>var passport = require('passport'); \nvar LocalStrategy = require('passport-local').Strategy;\nvar session = require(\"express-session\");\n</code></pre> <p>The first thing to add to the app is the session middleware, then the Passport authentication middleware. Add the following after the <code>app.use(express.static(path.join(__dirname, 'public')));</code> line: </p> <p><pre><code>app.use(session({secret : \"&lt;YOUR_SECRET&gt;\"})); \napp.use(passport.initialize());\napp.use(passport.session());\n</code></pre> This inserts the <code>session</code> middleware into the app pipeline, to read and write persistent sessions to the app cookie. Replace the <code>&lt;YOUR_SECRET&gt;</code> parameter with a string of your choosing. This secret is used to sign the session information in the cookie. Normally, this is kept very secret, as anyone who has access to the secret could construct a session cookie that looks legitimate to the server and give them access to any account on the server. You can also add an environment variable to store this secret, rather than store it in the code repo. </p> <p>Next, we initialize Passport into the middleware pipeline, and add in the code for Passport to use sessions to check and record authentication. </p> <p>When using sessions with Passport, we need to implement serialisation and deserialisation of user objects from session information, so that Passport can add the user object to the <code>req</code> object in the app pipeline. Add these functions to the bottom of the <code>app.js</code> file: </p> <p><pre><code>passport.serializeUser(function(user, done) {\n  process.nextTick(function(){\n    done(null, user);\n  }); \n});\n\npassport.deserializeUser(function(user, done) { \n  process.nextTick(function(){\n    done(null, user);\n  }); \n});\n</code></pre> In our case, since we are implementing a super-simple authentication scheme with just one user, we don't need to call out to a database or other store to get user information. In fact, since there is no real user information that is of use to our app at the moment, we just return the <code>user</code> object that Passport sends to us straight back, as we don't really have a use for it. Even though we are doing nothing with the information, we need to register these functions with Passport, as it calls them regardless. </p> <p>Now we can set up the rest of the logic for Passport. Add this code just above the serialisation code: </p> <pre><code>passport.use(new LocalStrategy(\n  function(username, password, done) {\n    if (username === process.env.USERNAME &amp;&amp; password === process.env.PASSWORD){\n      return done(null, {username: process.env.USERNAME }); \n    }\n    else {\n      return done(null, false, {message: \"Incorrect username or password\"}); \n    }\n  })\n);\n</code></pre> <p>This plugs in and registers the local authentication strategy module into Passport.</p> <p>Passport's local strategy uses a simple username and password, checked on the local server, so we'll need a function to accept a username and password for validation. The function checks if entered credentials are valid, and sends back a user object if they are, using the <code>done</code> callback. If the credentials don't checkout, the user gets an error message.</p> <p>Our function checks the username and password against what is stored in our environment variables. If the credentials to be checked match the credentials in our environment variables, we authenticate the user. </p> <p>Head over to the \"Configure\" tab on your backend Code Capsule, and add 2 new environment variables : <code>USERNAME</code> and <code>PASSWORD</code>. Supply values of your own to set your username and password, then click the \"Update Capsule\" button to save the changes.</p> <p></p> <p>Note: While this method of storing user credentials is appropriate for a small, single-user hobby project, it is not sufficient for production with customer credentials. Look to implementing a more robust user store, with password hashing and salting, or using a third-party authentication service such as a social network or an OAuth provider</p> <p>Passport offers many other authentication strategies, from OAuth 2.0 strategies allowing authentication through Facebook, Google, Twitter and other OAuth 2.0 providers, to API authentication strategies such as Bearer Tokens.</p> <p>Now that we have set the username and password for our app, we can add the login page routes to render the login page and send the form <code>POST</code> with user credentials to Passport. </p> <p>Add these 2 routes just above the index routes (<code>app.use('/', indexRouter);</code>) in <code>app.js</code>: </p> <pre><code>app.get('/login', function(req,res){\n    return res.render('login')\n}); \napp.post('/login',\n  passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' }));\n</code></pre> <p>The first <code>GET</code> route adds a <code>/login</code> url to our app. The route handler function calls the <code>res.render</code> Express method to serve up the login template, which we'll add shortly. The second <code>POST</code> route handles a form submission from the <code>/login</code> route, and passes it through to Passport. We supply a parameter to tell Passport to use our <code>local</code> strategy to process this authentication request. We also supply the redirects: to the main file list if authentication is successful, or back to the login page if not.</p> <p>There's one more bit of code to include before we add the front-end login form. We need to check if a user is successfully authenticated before they can access the file list and other functionality. To do this, we'll insert a call to an authentication check function in our app middleware. Add this code just above the <code>app.use('/', indexRouter);</code> line, so it's called before the routes above are served: </p> <pre><code>app.use(isAuthenticated); \n</code></pre> <p>Now, let's implement the reference <code>isAuthenticated</code> middleware. Add this function to the bottom of the <code>app.js</code> file: </p> <pre><code>function isAuthenticated(req, res, next) {\n  if (req.isAuthenticated())\n    return next();\n  else \n    return res.redirect('/login');\n}\n</code></pre> <p>If a user is successfully authenticated, the <code>isAuthenticated()</code> method, which is added by Passport to the <code>req</code> object, will return <code>true</code>. In that case, we can safely let the pipeline proceed to the next middleware function (in this case, one of the protected routes). If the authentication check comes back <code>false</code>, we redirect back to the login page, away from our protected pages. </p> <p>Now we have all the back-end pieces for authentication in place, let's add the login page and form. Add a new file called <code>login.hbs</code> in the <code>views</code> folder. Place this code into the new file: </p> <p><pre><code>&lt;form action=\"/login\" method=\"post\"&gt;\n    &lt;div&gt;\n        &lt;label&gt;Username:&lt;/label&gt;\n        &lt;input type=\"text\" name=\"username\"/&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n        &lt;label&gt;Password:&lt;/label&gt;\n        &lt;input type=\"password\" name=\"password\"/&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n        &lt;input type=\"submit\" value=\"Log In\"/&gt;\n    &lt;/div&gt;\n&lt;/form&gt;\n</code></pre> Here we're adding a very simple form to make a <code>POST</code> request back to our <code>/login</code> route, with inputs for a username and password. </p> <p>We're done with authentication. Commit these changes, and wait for Code Capsules to redeploy the site, then navigate over and test it out. This time, the site should prompt for your username and password (which you added to the environment variables) before letting you through to the files page.</p> <p></p> <p>Congratulations, you have completed building a personal web drive using Code Capsules and Node.js!</p>","title":"Adding Authentication"},{"location":"tutorials/build-a-web-file-store/#next-steps","text":"<p>This project has some decent basic functionality, but there are many things you could add to upgrade it, such as: </p> <ul> <li>Add styling to make it look better</li> <li>Add support for sub-folders</li> <li>Add support for multi-file upload</li> <li>Add logout functionality, using the Passport logout function</li> <li>Add better authentication, and perhaps separate user accounts for a multi-user drive</li> </ul>","title":"Next Steps"},{"location":"tutorials/build-express-htmx/","text":"<p></p> <p>Single page frameworks like Angular, React, and Vue have become the go-to solution for frontend development in recent years. This shift from traditional multipage websites is mainly due to the lack of interactivity offered by HTML. It\u2019s worth noting however, that single page applications (SPAs) aren\u2019t a perfect solution, as they introduce an added layer of complexity by installing a host of other dependencies that need to be linked together before deploying your site to production.</p> <p>This is where a new HTML extension called HTMx enters and shines. HTMx gives traditional HTML sites more interactivity while keeping things simple, as it allows you to make requests from any HTML element and not just <code>&lt;a&gt;</code> and <code>&lt;form&gt;</code> tags. But this is not HTMx\u2019s only benefit. Other benefits include:</p> <ul> <li>Making it possible to perform partial page reloads in HTML.</li> <li>Support for PUT and DELETE methods in addition to GET and POST.</li> <li>Not being limited to click and submit event triggers only.</li> <li>Lightweight set up \u2013 no additional dependencies need to be installed to get HTMx working.</li> </ul> <p>In this tutorial, we\u2019ll explore the benefits of HTMx by building a full stack application using Express and HTMx. Our application will be a book recommendation app that supports CRUD functionality. The final app will look a bit like this:</p> <p></p>","title":"Building a Full Stack Application with Express and HTMx"},{"location":"tutorials/build-express-htmx/#overview-and-requirements","text":"<p>After building our application, you\u2019ll want to deploy it to production so you can show it to friends and family. You will therefore need the following to complete the tutorial:</p> <ul> <li>Git set up and installed, and a registered GitHub account</li> <li>A Code Capsules account</li> <li>Node.js installed</li> <li>An IDE or text editor of your choice</li> </ul>","title":"Overview and Requirements"},{"location":"tutorials/build-express-htmx/#setting-up-the-project","text":"<p>With all the requirements in place, we can go ahead and set up our project. Let\u2019s start by creating the project folder.</p>","title":"Setting up the Project"},{"location":"tutorials/build-express-htmx/#create-project-folder","text":"<p>Let\u2019s create a folder to house our application\u2019s source code. Run the commands below in the terminal to create the folder and navigate into it.</p> <pre><code>mkdir express-htmx\ncd express-htmx\n</code></pre> <p>From here onwards, the <code>express-htmx</code> directory will be referred to as the project\u2019s root folder.</p>","title":"Create Project Folder"},{"location":"tutorials/build-express-htmx/#initialize-project","text":"<p>Run the command <code>npm init</code> in the project root folder and follow the setup instructions to create a new <code>node.js</code> project.</p>","title":"Initialize Project"},{"location":"tutorials/build-express-htmx/#install-dependencies","text":"<p>While still in the root folder, run the command below to install the dependencies we\u2019ll need to build our application:</p> <pre><code>npm i express pug sequelize sqlite3\n</code></pre> <p>You might notice there\u2019s no dependency for HTMx in our dependency list. This is because it will be added as a script tag inside the head of our HTML template.</p>","title":"Install Dependencies"},{"location":"tutorials/build-express-htmx/#initialize-an-empty-git-repository","text":"<p>From the project\u2019s root folder, enter the command <code>git init</code> to initialize a <code>git</code> repository. This will allow you to track changes to your app as you build it.</p> <p>Create a <code>.gitignore</code> file and add the line below to it:</p> <pre><code>/node_modules\n</code></pre> <p>This excludes the <code>node_modules</code> folder from being tracked as you build the app, which is OK since it has files that won\u2019t change.</p>","title":"Initialize an Empty Git Repository"},{"location":"tutorials/build-express-htmx/#linking-to-github","text":"<p>Head over to GitHub and create a new repository. Then, in your project's root folder, run the command below from the terminal, replacing <code>username</code> and <code>repository_name</code> with your own values from GitHub:</p> <pre><code>git remote add origin git@github.com:username/repository_name.git\n</code></pre> <p>This will link your local repository to the one on GitHub.</p>","title":"Linking to GitHub"},{"location":"tutorials/build-express-htmx/#building-the-htmx-frontend","text":"<p>With the set up complete, we can now begin building our app. We will start with the HTMx frontend, and for this you need to create a <code>/views</code> folder inside the project\u2019s root folder.</p> <p>Next, create an <code>index.pug</code> file inside the <code>/views</code> folder, and populate it with the code below:</p> <pre><code>doctype html\nhtml(lang='en')\n head\n   title Book Recommandations\n   link(rel='stylesheet', href='https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css')\n   script(src='https://unpkg.com/htmx.org@1.5.0')\n   style.\n     body {padding: 20px}\n     table {font-family: arial, sans-serif;border-collapse: collapse;width: 100%;}\n     tr.htmx-swapping td {opacity: 0;transition: opacity 0.5s ease-out;}\n     td, th {border: 1px solid #383737;text-align: left;padding: 8px;}\n     tr:nth-child(even) {background-color: #dddddd;}\n</code></pre> <p>There\u2019s not much going on in the code snippet above, except for lines 5 and 6, which are responsible for loading Bootstrap and HTMx into our index page. This gives you the power to build an interactive page just by including the <code>&lt;script&gt;</code> tag that links to HTMx, without needing to install any <code>npm</code> packages like with most SPAs. This is how HTMx allows you to build sites that are more lightweight compared to SPA frameworks.</p> <p>The code underneath the <code>&lt;style&gt;</code> tag adds CSS to style our frontend to make it more visually appealing. Now let\u2019s add code that will be rendered in the body tag of our page. Copy and paste the code below with the same level of indentation as the <code>&lt;/head&gt;</code> tag:</p> <pre><code>body\n   h1 Book Recommendations\n   form(hx-post=\"/submit\" hx-swap=\"beforeend\" hx-target=\"#new-book\" class=\"mb-3\")\n     input(type=\"text\" placeholder=\"Book Title\" name=\"title\" class=\"form-control mb-3\")\n     input(type=\"text\" placeholder=\"Book Author\" name=\"author\" class=\"form-control mb-3\")\n     button(type=\"submit\" class=\"btn btn-primary\") Submit\n   table\n     thead\n       tr\n         th Book Title\n         th Book Author\n     tbody(id=\"new-book\" hx-target=\"closest tr\" hx-swap=\"outerHTML swap:0.5s\")\n       each book in books\n         tr\n           td #{book.name}\n           td #{book.author}\n           td\n             button(class=\"btn btn-primary\" hx-get=`/get-edit-form/${book.id}`) Edit Book\n           td\n             button(hx-delete=`/delete/${book.id}` class=\"btn btn-primary\") Delete\n</code></pre> <p>There are a couple of attributes here that aren\u2019t used in traditional HTML. Let\u2019s go over them one by one:</p> <ul> <li> <p>hx-[http method] \u2013 Examples of this attribute include <code>hx-post</code>, <code>hx-get</code>, <code>hx-put</code>, and <code>hx-delete</code>. This is the HTMx way of denoting what type of request should be sent on form submission or when a request-firing event is triggered. These attributes accept the request route as an argument. In the case of our form, we use the <code>/submit</code> route, while the table buttons send requests to the <code>/delete</code> and <code>/get-edit-form</code> routes.</p> </li> <li> <p>hx-target \u2013 This attribute accepts the <code>id</code> of the element you want to update after a successful request or when an event is triggered. Take note of the preceding <code>#</code> that\u2019s written before the ID value.</p> <ul> <li>You might have noticed that we didn\u2019t use an <code>id</code> value in the table, but used a value of closest <code>tr</code> instead. This swaps the closest table row with the HTML that will be returned by the request when an action is triggered. The closest row will always be the same row in which an event or request was triggered, either by the \"Edit Book\" button or the \"Delete\" button.</li> </ul> </li> <li> <p>hx-swap \u2013 The hx-swap attribute allows you to specify how you want to partially reload the page or swap elements with new ones. It updates the UI in the section specified in the <code>hx-target</code> attribute.</p> <ul> <li>In our form, we used the <code>beforeend</code> value to tell HTMx that we want to append the result of the request after the last child in the target element, which is the table with <code>id=new-book</code>.</li> <li>In the table however, we used the <code>outerHTML</code> value to denote that we want to swap the entire <code>&lt;tr&gt;</code> element with the returned content.</li> <li>A full list of acceptable <code>hx-swap</code> values can be viewed here.</li> </ul> </li> </ul>","title":"Building the HTMx Frontend"},{"location":"tutorials/build-express-htmx/#building-the-express-backend","text":"<p>We can now dive into building the backend of our app. Start by creating an <code>app/model/</code> directory from the project root folder and create a file named <code>dbconfig.js</code> in it. This file will contain logic for creating a SQLite database on a persistent file storage Data Capsule on Code Capsules when we deploy our application. Populate the <code>dbconfig.js</code> file with the code below:</p> <pre><code>const { Sequelize } = require(\"sequelize\");\nconst persistent_path = process.env.PERSISTENT_STORAGE_DIR || \".\";\n\nconst sequelize = new Sequelize(\"test-db\", \"user\", \"pass\", {\n  dialect: \"sqlite\",\n  host: persistent_path + \"/dev.sqlite\",\n});\n\nmodule.exports = sequelize;\n</code></pre> <p>The value of the <code>PERSISTENT_STORAGE_DIR</code> environment variable will contain the path to the persistent file storage Data Capsule on Code Capsules. We will use Sequelize as our ORM to make interacting with the database easier.</p>","title":"Building the Express Backend"},{"location":"tutorials/build-express-htmx/#create-a-book-model","text":"<p>After creating the database, we have to define the model of objects we\u2019ll be reading and writing to it. Add a file named <code>book.js</code> in the <code>/model</code> folder and fill it with the code below:</p> <pre><code>// represents the model\n\nconst { Model, DataTypes } = require(\"sequelize\");\nconst sequelize = require(\"./dbconfig\");\n\nclass Book extends Model {}\n\nBook.init(\n  {\n    id: {\n      type: DataTypes.INTEGER,\n      primaryKey: true,\n    },\n    name: {\n      type: DataTypes.STRING,\n    },\n    author: {\n      type: DataTypes.STRING,\n    },\n  },\n  {\n    sequelize,\n    modelName: \"book\",\n    timestamps: false,\n  }\n);\n\nmodule.exports = Book;\n</code></pre> <p>Our <code>Book</code> objects will have three fields for the <code>id</code>, <code>name</code>, and <code>author</code>. The last line exports an instance of the <code>Book</code> model, which we\u2019ll use in other project files to perform CRUD operations on the database.</p>","title":"Create a <code>Book</code> Model"},{"location":"tutorials/build-express-htmx/#add-app-routes","text":"<p>The next step is to add the views responsible for executing the CRUD operations we\u2019ll be performing on book objects. Create an <code>index.js</code> file in the project root folder and add the following code to it:</p> <pre><code>const express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst sequelize = require(\"./app/model/dbconfig\");\nconst Book = require(\"./app/model/book\");\n\n// automatically creating table on startup\nsequelize.sync({ force: true }).then(async () =&gt; {\n  console.log(\"db is ready...\");\n});\n\nconst app = express();\napp.use(express.json());\n\n// Configuring body parser middleware\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\n\napp.set(\"view engine\", \"pug\");\n\nconst PORT = process.env.PORT || 3005;\napp.listen(PORT, () =&gt; {\n  console.log(`Service endpoint = http://localhost:${PORT}`);\n});\n</code></pre> <p>In the snippet above, we import the modules our app depends on, initialize an <code>app</code> object, and add logic to create a <code>Books</code> table in our database when the application first runs.</p> <p>Let\u2019s add an index route that fetches and returns all <code>Book</code> objects from the database when a user visits the landing page. Add the following code to <code>index.js</code> above the <code>const PORT = process.env.PORT || 3005;</code> line:</p> <pre><code>app.get(\"/\", async (req, res) =&gt; {\n  const books = await Book.findAndCountAll();\n  return res.render(\"index\", { books: books.rows });\n});\n</code></pre> <p>We use the Sequelize <code>Book</code> model object we defined in the <code>book.js</code> file to query the database for all book objects in a readable format using the <code>findAndCountAll()</code> method and not raw SQL. This is the major benefit of using an ORM to interact with a database.</p> <p>Next, we\u2019ll add a <code>/submit</code> route that will be called when a user submits a new book entry. This route will be responsible for saving and returning the <code>id</code> of the recently saved book to the database. Paste the code below into <code>index.js</code>:</p> <pre><code>app.post(\"/submit\", async (req, res) =&gt; {\n  const book = {\n    name: req.body.title,\n    author: req.body.author,\n  };\n  await Book.create(book).then((x) =&gt; {\n    // send id of recently created item\n    return res.send(`&lt;tr&gt;\n    &lt;td&gt;${req.body.title}&lt;/td&gt;\n    &lt;td&gt;${req.body.author}&lt;/td&gt;\n    &lt;td&gt;\n        &lt;button class=\"btn btn-primary\"\n            hx-get=\"/get-edit-form/${x.null}\"&gt;\n            Edit Book\n        &lt;/button&gt;\n    &lt;/td&gt;\n    &lt;td&gt;\n        &lt;button hx-delete=\"/delete/${x.null}}\"\n            class=\"btn btn-primary\"&gt;\n            Delete\n        &lt;/button&gt;\n    &lt;/td&gt;\n&lt;/tr&gt;`);\n  });\n});\n</code></pre> <p>As HTMx expects an HTML response, the <code>submit</code> method responds with an HTML table row that updates the list of books on the frontend. The new entry will be for the recently added book.</p> <p>Next, let\u2019s add the code for the <code>/delete</code> route. Copy and paste the code below:</p> <pre><code>app.delete(\"/delete/:id\", async (req, res) =&gt; {\n  const id = req.params.id;\n  await Book.findOne({ where: { id: id } }).then((book) =&gt; {\n    book.destroy();\n    return res.send(\"\");\n  });\n});\n</code></pre> <p>The first thing you may have noticed about this route is the <code>id</code> query parameter it accepts. This allows us to know which object to delete. After deleting the book, we return an empty string, which causes the row we deleted in the frontend to disappear, as it is swapped for \"nothing\".</p> <p>We now have routes for creating, reading, and deleting books. It\u2019s time to add routes associated with updating book entries in order to complete our app\u2019s CRUD functionality. Add the code below to <code>index.js</code> to add logic for updating book entries to your app:</p> <pre><code>app.get(\"/get-book-row/:id\", async (req, res) =&gt; {\n  const id = req.params.id;\n  await Book.findOne({ where: { id: id } }).then((book) =&gt; {\n    return res.send(`&lt;tr&gt;\n    &lt;td&gt;${book.name}&lt;/td&gt;\n    &lt;td&gt;${book.author}&lt;/td&gt;\n    &lt;td&gt;\n        &lt;button class=\"btn btn-primary\"\n            hx-get=\"/get-edit-form/${id}\"&gt;\n            Edit Book\n        &lt;/button&gt;\n    &lt;/td&gt;\n    &lt;td&gt;\n        &lt;button hx-delete=\"/delete/${id}\"\n            class=\"btn btn-primary\"&gt;\n            Delete\n        &lt;/button&gt;\n    &lt;/td&gt;\n&lt;/tr&gt;`);\n  });\n});\n\napp.get(\"/get-edit-form/:id\", async (req, res) =&gt; {\n  const id = req.params.id;\n  await Book.findOne({ where: { id: id } }).then((book) =&gt; {\n    return res.send(`&lt;tr hx-trigger='cancel' class='editing' hx-get=\"/get-book-row/${id}\"&gt;\n    &lt;td&gt;&lt;input name=\"title\" value=\"${book.name}\"/&gt;&lt;/td&gt;\n    &lt;td&gt;&lt;input name=\"author\" value=\"${book.author}\"/&gt;&lt;/td&gt;\n    &lt;td&gt;\n      &lt;button class=\"btn btn-primary\" hx-get=\"/get-book-row/${id}\"&gt;\n        Cancel\n      &lt;/button&gt;\n      &lt;button class=\"btn btn-primary\" hx-put=\"/update/${id}\" hx-include=\"closest tr\"&gt;\n        Save\n      &lt;/button&gt;\n    &lt;/td&gt;\n  &lt;/tr&gt;`);\n  });\n});\n\napp.put(\"/update/:id\", async (req, res) =&gt; {\n  const id = req.params.id;\n  // update book\n  await Book.findByPk(id).then((item) =&gt; {\n    item\n      .update({\n        name: req.body.title,\n        author: req.body.author,\n      })\n      .then(() =&gt; {\n        return res.send(`&lt;tr&gt;\n    &lt;td&gt;${req.body.title}&lt;/td&gt;\n    &lt;td&gt;${req.body.author}&lt;/td&gt;\n    &lt;td&gt;\n        &lt;button class=\"btn btn-primary\"\n            hx-get=\"/get-edit-form/${id}\"&gt;\n            Edit Book\n        &lt;/button&gt;\n    &lt;/td&gt;\n    &lt;td&gt;\n        &lt;button hx-delete=\"/delete/${id}\"\n            class=\"btn btn-primary\"&gt;\n            Delete\n        &lt;/button&gt;\n    &lt;/td&gt;\n&lt;/tr&gt;`);\n      });\n  });\n});\n</code></pre> <p>There\u2019s more than one route for the update logic, and we\u2019ll see why shortly. The <code>/get-edit-form</code> route is called when a user clicks on the \"Edit Book\" button on the frontend, and it returns a form for updating the selected book. If the user decides to cancel this action, the <code>/get-book-row</code> route is called and it returns a table row with the unedited book entry.</p> <p>If the user goes through with updating the book, then the <code>/update</code> route is called and it will update the book based on the <code>id</code> supplied to it as a query parameter. When the update is complete, the method returns an HTML table row with the updated book.</p>","title":"Add <code>App</code> Routes"},{"location":"tutorials/build-express-htmx/#add-start-script","text":"<p>Code Capsules automatically runs the <code>npm start</code> command to start <code>node</code> projects. Currently our project doesn\u2019t have a <code>start</code> command, so let\u2019s add one in <code>package.json</code>. Modify the <code>\"scripts\"</code> dictionary in the <code>package.json</code> file so that it looks like this:</p> <pre><code>\"scripts\": {\n  \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",\n  \"start\": \"node index.js\"\n},\n</code></pre> <p>When you've added the start script, Code Capsules will be able to automatically run your app when you deploy it.</p>","title":"Add <code>Start</code> Script"},{"location":"tutorials/build-express-htmx/#running-our-app","text":"<p>Our app is ready to be tested. Navigate to the project\u2019s root folder in a terminal and run the following command: <code>npm run start</code>. This should start up a development server on port 3005. Open your browser at <code>http://127.0.0.1:3005/</code> and you should see your app running.</p>","title":"Running our App"},{"location":"tutorials/build-express-htmx/#add-commit-and-push-git-changes","text":"<p>Let's add and commit all the files we created to our local repository and then push them to the remote one. Do this by running the commands listed below in a terminal while in the project\u2019s root folder:</p> <pre><code>git add -A\ngit commit -m \"Added book recommendation app files\"\ngit branch -M main\ngit push -u origin main\n</code></pre> <p>Your remote repository will now be up to date with your local one.</p>","title":"Add, Commit, and Push Git Changes"},{"location":"tutorials/build-express-htmx/#deploy-to-code-capsules","text":"<p>The final step is to deploy our app. Log into your Code Capsules account and link your remote GitHub repository to Code Capsules. Create a persistent storage Data Capsule and a Backend Capsule and bind the two together in order to deploy the app. You can follow this reference guide to see how to do so in greater detail.</p> <p>That\u2019s it! Your \"Book Recommendations\" app should be live and fully functional now.</p>","title":"Deploy to Code Capsules"},{"location":"tutorials/build-flask-htmx-app/","text":"<p></p> <p>[This tutorial explains how to build an application with Flask and HTMx. If you want to host an HTMx and Flask application on our PaaS, you can find a short deployment guide here that uses the same project.]</p> <p>Recent trends in the modern web saw single page frameworks like React.js and Angular take over traditional multipage websites, mainly due to the lack of interactivity offered by HTML. It is worth noting however, that single page applications (SPAs) brought this interactivity at the cost of added complexity. </p> <p>This is where a new HTML extension called HTMx enters and shines. HTMx gives traditional HTML sites more interactivity while keeping things simple, as it allows you to make requests from any HTML element and not just <code>&lt;a&gt;</code> and <code>&lt;form&gt;</code> tags. But this is not HTMx\u2019s only benefit. Other benefits include: </p> <ul> <li>Making it possible to perform partial page reloads in HTML</li> <li>Support for PUT and DELETE methods in addition to GET and POST</li> <li>Not being limited to click and submit event triggers only</li> <li>Lightweight set up \u2013 no additional dependencies need to be installed to get it working</li> </ul> <p>In this tutorial, we\u2019ll explore the benefits of HTMx by building a full stack application using Flask and HTMx. Our application will be a book recommendation app that supports CRUD functionality. The final app will look a bit like this:</p> <p></p>","title":"Building a Full Stack Application with Flask and HTMx"},{"location":"tutorials/build-flask-htmx-app/#overview-and-requirements","text":"<p>After building our application, you\u2019ll want to deploy it to production so you can show it to friends and family. You will therefore need the following to complete the tutorial:</p> <ul> <li>Git set up and installed, and a registered GitHub account</li> <li>Python 3 installed </li> <li>An IDE or text editor of your choice</li> </ul>","title":"Overview and Requirements"},{"location":"tutorials/build-flask-htmx-app/#setting-up-the-project","text":"<p>With all the requirements in place, we can go ahead and set up our project. Let\u2019s start by creating the project folder and then we can set up a virtual environment within the project folder. </p>","title":"Setting up the Project"},{"location":"tutorials/build-flask-htmx-app/#create-project-folder","text":"<p>Let\u2019s create a folder to house our application\u2019s source code. Run the commands below in the terminal to create the folder and navigate into it.</p> <pre><code>mkdir flask-htmx\ncd flask-htmx\n</code></pre> <p>From here onwards, the <code>flask-htmx</code> directory will be referred to as the project\u2019s root folder.</p>","title":"Create Project Folder"},{"location":"tutorials/build-flask-htmx-app/#creating-a-virtual-environment","text":"<p>A virtual environment allows you to isolate the packages required to develop Python applications from your computer system. We recommend you use a new virtual environment for every application you develop so as to not corrupt dependencies for other applications. </p> <p>In the terminal run the following command to create a virtual environment within the project's root folder:</p> <pre><code>python3 -m venv env\n</code></pre> <p>To activate the virtual environment, enter either of the following:</p> <p>MacOS</p> <pre><code>source env/bin/activate\n</code></pre> <p>Windows</p> <pre><code>.\\env\\Scripts\\activate\n</code></pre> <p>After activating the virtual environment, the name <code>env</code> should appear in brackets on the leftmost part of your terminal in your current line. This signals that the activation was successful. </p> <p></p>","title":"Creating a Virtual Environment"},{"location":"tutorials/build-flask-htmx-app/#installing-dependencies","text":"<p>We can now install our required packages to the virtual environment we activated in the previous step. Run the command below:</p> <pre><code>pip3 install flask flask-sqlalchemy gunicorn\n</code></pre> <p>You might notice there\u2019s no dependency for HTMx in our dependency list. This is because it will be added as a script tag inside the head of our HTML templates.</p>","title":"Installing Dependencies"},{"location":"tutorials/build-flask-htmx-app/#initialize-an-empty-git-repository","text":"<p>While in the project\u2019s root folder, enter the command <code>git init</code> to initialize a <code>git</code> repository. This will allow you to track changes to your app as you build it. </p> <p>Create a <code>.gitignore</code> file and add the line below to it:</p> <pre><code>env/\n</code></pre> <p>This excludes the <code>env</code> folder from being tracked by Git, as we only want to track changes in our project files.</p>","title":"Initialize an Empty Git Repository"},{"location":"tutorials/build-flask-htmx-app/#linking-to-github","text":"<p>Head over to GitHub and create a new repository. Then, in your project's root folder, run the command below from the terminal, replacing <code>username</code> and <code>repository_name</code> with your own values from GitHub.</p> <pre><code>git remote add origin git@github.com:username/repository_name.git\n</code></pre> <p>This will link your local repository to the one on GitHub.</p>","title":"Linking to GitHub"},{"location":"tutorials/build-flask-htmx-app/#building-the-htmx-frontend","text":"<p>With the set up complete, we can now begin building our app. We will start with the HTMx frontend, and for this you need to create an <code>app/templates</code> folder inside the project\u2019s root folder.</p> <p>Next, create an <code>index.html</code> file inside the <code>templates</code> folder, and populate it with the code below:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Flask HTMX ALPINE App&lt;/title&gt;\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\n        integrity=\"sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1\" crossorigin=\"anonymous\"&gt;\n    &lt;!-- HTMX --&gt;\n    &lt;script src=\"https://unpkg.com/htmx.org@1.5.0\"&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body{\n            padding: 20px;\n        }\n        table {\n            font-family: arial, sans-serif;\n            border-collapse: collapse;\n            width: 100%;\n        }\n\n        tr.htmx-swapping td {\n            opacity: 0;\n            transition: opacity 0.5s ease-out;\n        }\n\n        td, th {\n            border: 1px solid #383737;\n            text-align: left;\n            padding: 8px;\n        }\n\n        tr:nth-child(even) {\n            background-color: #dddddd;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;!-- Place &lt;body&gt; &lt;/body&gt; code here --&gt;\n\n&lt;/html&gt;\n</code></pre> <p>There\u2019s not much going on in the code snippet above, except for line 5 and 8, which are responsible for loading Bootstrap and HTMx into our <code>index.html</code> page. This gives you the power to build an interactive page just by including the <code>&lt;script&gt;</code> tag that links to HTMx, without needing to install any <code>npm</code> packages like with most SPAs. This is how HTMx allows you to build sites that are more lightweight compared to SPA frameworks. </p> <p>The code in between the <code>&lt;style&gt;</code> tag adds CSS to style our frontend to make it more visually appealing. Now let\u2019s add code that will be rendered in the body tag of our page. Copy and paste the code below underneath the <code>&lt;/head&gt;</code> tag:</p> <pre><code>&lt;body&gt;\n    &lt;h1&gt;Book Recommendations&lt;/h1&gt;\n    &lt;form hx-post=\"/submit\" hx-swap=\"beforeend\" hx-target=\"#new-book\" class=\"mb-3\"&gt;\n        &lt;input type=\"text\" placeholder=\"Book Title\" name=\"title\" class=\"form-control mb-3\" /&gt;\n        &lt;input type=\"text\" placeholder=\"Book Author\" name=\"author\" class=\"form-control mb-3\" /&gt;\n        &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n\n    &lt;table class=\"table\"&gt;\n        &lt;thead&gt;\n          &lt;tr&gt;\n            &lt;th scope=\"col\"&gt;Book Title&lt;/th&gt;\n            &lt;th scope=\"col\"&gt;Book Author&lt;/th&gt;\n          &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody id=\"new-book\" hx-target=\"closest tr\" hx-swap=\"outerHTML swap:0.5s\"&gt; \n            {%for book in books%}\n            &lt;tr&gt;\n                &lt;td&gt;{{book.Book.title}}&lt;/td&gt;\n                &lt;td&gt;{{book.Author.name}}&lt;/td&gt;\n                &lt;td&gt;\n                    &lt;button class=\"btn btn-primary\" \n                        hx-get=\"/get-edit-form/{{book.Book.book_id}}\"&gt;\n                        Edit Title\n                    &lt;/button&gt;\n                &lt;/td&gt;\n                &lt;td&gt;\n                    &lt;button hx-delete=\"/delete/{{book.Book.book_id}}\" class=\"btn btn-primary\"&gt;Delete&lt;/button&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n            {%endfor%}\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n&lt;/body&gt;\n</code></pre> <p>There are a couple of attributes here that aren\u2019t used in traditional HTML. Let\u2019s go over them one by one:</p> <ul> <li> <p>hx-[http method] \u2013 Examples of this attribute include <code>hx-post</code>, <code>hx-get</code>, <code>hx-put</code> and <code>hx-delete</code>. This is the HTMx way of denoting what type of request should be sent on form submission or when a request firing event is triggered. These attributes accept the request route as an argument. In the case of our form, we use the <code>/submit</code> route, while the table buttons send requests to the <code>/delete</code> and <code>/get-edit-form</code> routes.</p> </li> <li> <p>hx-target \u2013 This attribute accepts the <code>id</code> of the element you want to update after a successful request or when an event is triggered. Take note of the preceding <code>#</code> that\u2019s written before the <code>id</code> value. </p> <ul> <li>You might have noticed that we didn\u2019t use an <code>id</code> value in the table, but used a value of <code>closest tr</code> instead. This swaps the closest table row with the HTML that will be returned by the request when an action is triggered. The closest row will always be the same row in which an event or request was triggered, either by the \"Edit Title\" button or the \"Delete\" button. </li> </ul> </li> <li> <p>hx-swap \u2013 The hx-swap attribute allows you to specify how you want to partially reload the page or swap elements with new ones. It updates the UI in the section specified in the <code>hx-target</code> attribute.</p> <ul> <li>In our form, we used the <code>beforeend</code> value to tell HTMx that we want to append the result of the request after the last child in the target element, which is the table with <code>id=new-book</code>. </li> <li>In the table however, we used the <code>outerHTML</code> value to denote that we want to swap the entire <code>&lt;tr&gt;</code> element with the returned content.</li> <li>A full list of acceptable <code>hx-swap</code> values can be viewed here.</li> </ul> </li> </ul>","title":"Building the HTMx Frontend"},{"location":"tutorials/build-flask-htmx-app/#building-the-flask-backend","text":"<p>We can now dive into building the backend of our app. Start by creating a <code>run.py</code> file in the project\u2019s root folder and populate it with the code below:</p> <pre><code>from app import app\n\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>This is the point of entry for any server wishing to run our app.</p>","title":"Building the Flask Backend"},{"location":"tutorials/build-flask-htmx-app/#declare-and-initialize-app-module","text":"<p>Create an <code>__init__.py</code> file in the <code>app</code> folder and populate it with the code below:</p> <pre><code>from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\n\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = 'sqlite:///sqlite.db'\napp.config[\"SQLALCHEMY_ECHO\"] = False\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\n\ndb = SQLAlchemy(app)\n\nfrom app import views\nfrom app import models\n\ndb.init_app(app)\ndb.create_all() \n</code></pre> <p>Here we declare our app object using the Flask package we installed earlier. We\u2019ll be using a SQLite database, which we configure using the <code>app.config</code> lines. </p> <p>We use SQLAlchemy to declare the database object we\u2019ll interact with, as it allows us to read and write to the database using object notation, which is more familiar than raw SQL statements. It is important to import the models only after declaring the database object so that their respective tables are included in the database when it\u2019s created. The last two lines handle the initialization of the database and the creation of all relevant tables in the database based on the models that are imported. </p>","title":"Declare and Initialize <code>app</code> Module"},{"location":"tutorials/build-flask-htmx-app/#register-app-models","text":"<p>The next step is to create the <code>models.py</code> module we imported earlier in the <code>__init__.py</code> file. Create a file named <code>models.py</code> inside the app folder and populate it with the code below:</p> <pre><code>from app import db\n\nclass Author(db.Model):\n    author_id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String)\n    books = db.relationship(\"Book\", backref=\"author\")\n\n    def __repr__(self):\n        return '&lt;Author: {}&gt;'.format(self.books)\n\nclass Book(db.Model):\n    book_id = db.Column(db.Integer, primary_key=True)\n    author_id = db.Column(db.Integer, db.ForeignKey(\"author.author_id\"))\n    title = db.Column(db.String)\n</code></pre> <p>Here we declare the two models we\u2019re going to be saving in our database, which are <code>Author</code> and <code>Book</code>. It is worth noting the one-to-many relationship between \"author\" and \"books\", as an author can have many Books but each book can only have a single author in the context of this application. We denote this relationship by using a foreign key in the <code>author_id</code> field of the book and a <code>backref</code> in the books field of an author.</p>","title":"Register App Models"},{"location":"tutorials/build-flask-htmx-app/#create-views","text":"<p>The last part in building the backend of our app is to create the views or routes that the frontend will be interacting with. Create a <code>views.py</code> file inside the app folder and add the code below to it:</p> <pre><code>from app import app, db\nfrom flask import render_template, request, jsonify\nfrom app.models import Author, Book\n\n@app.route(\"/\", methods=[\"GET\"])\ndef home():\n    books = db.session.query(Book, Author).filter(Book.author_id == Author.author_id).all()\n    return render_template(\"index.html\", books=books)\n</code></pre> <p>In the code snippet above, we\u2019ve added the index route and bound the home function to it. The home function first queries the database to get a list of all books before returning the <code>index.html</code> template that\u2019s populated with the list of books. </p> <p>Add the code below to add the <code>/submit</code> route to our app\u2019s <code>views.py</code> file: </p> <pre><code>@app.route(\"/submit\", methods=[\"POST\"])\ndef submit():\n    global_book_object = Book()\n\n    title = request.form[\"title\"]\n    author_name = request.form[\"author\"]\n\n    author_exists = db.session.query(Author).filter(Author.name == author_name).first()\n    print(author_exists)\n    # check if author already exists in db\n    if author_exists:\n        author_id = author_exists.author_id\n        book = Book(author_id=author_id, title=title)\n        db.session.add(book)\n        db.session.commit()\n        global_book_object = book\n    else:\n        author = Author(name=author_name)\n        db.session.add(author)\n        db.session.commit()\n\n        book = Book(author_id=author.author_id, title=title)\n        db.session.add(book)\n        db.session.commit()\n        global_book_object = book\n\n    response = f\"\"\"\n    &lt;tr&gt;\n        &lt;td&gt;{title}&lt;/td&gt;\n        &lt;td&gt;{author_name}&lt;/td&gt;\n        &lt;td&gt;\n            &lt;button class=\"btn btn-primary\"\n                hx-get=\"/get-edit-form/{global_book_object.book_id}\"&gt;\n                Edit Title\n            &lt;/button&gt;\n        &lt;/td&gt;\n        &lt;td&gt;\n            &lt;button hx-delete=\"/delete/{global_book_object.book_id}\"\n                class=\"btn btn-primary\"&gt;\n                Delete\n            &lt;/button&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;\n    \"\"\"\n    return response\n</code></pre> <p>When a person submits a new book, this is the route that\u2019s called. The logic first checks if the author already exists in the database and if so, saves the book with the author\u2019s <code>author_id</code>. Otherwise, it creates a new author and then saves the book. As HTMx expects an HTML response, the <code>submit</code> method responds with an HTML table row that updates the list of books on the frontend. The new entry will be for the recently added book. </p> <p>Next, let\u2019s add the code for the <code>/delete</code> route. Copy and paste the code below:</p> <pre><code>@app.route(\"/delete/&lt;int:id&gt;\", methods=[\"DELETE\"])\ndef delete_book(id):\n    book = Book.query.get(id)\n    db.session.delete(book)\n    db.session.commit()\n\n    return \"\"\n</code></pre> <p>The first thing you may have noticed about this route is the <code>id</code> query parameter it accepts. This allows us to know which object to delete. After deleting the book, we return an empty string, which causes the row we deleted in the frontend to disappear, as it is swapped for \"nothing\". </p> <p>We now have routes for creating, reading, and deleting books. It\u2019s time to add views associated with updating book entries in order to complete our app\u2019s CRUD functionality. Add the code below to <code>views.py</code> to add logic for updating book entries to your app:</p> <pre><code>@app.route(\"/get-edit-form/&lt;int:id&gt;\", methods=[\"GET\"])\ndef get_edit_form(id):\n    book = Book.query.get(id)\n    author = Author.query.get(book.author_id)\n\n    response = f\"\"\"\n    &lt;tr hx-trigger='cancel' class='editing' hx-get=\"/get-book-row/{id}\"&gt;\n  &lt;td&gt;&lt;input name=\"title\" value=\"{book.title}\"/&gt;&lt;/td&gt;\n  &lt;td&gt;{author.name}&lt;/td&gt;\n  &lt;td&gt;\n    &lt;button class=\"btn btn-primary\" hx-get=\"/get-book-row/{id}\"&gt;\n      Cancel\n    &lt;/button&gt;\n    &lt;button class=\"btn btn-primary\" hx-put=\"/update/{id}\" hx-include=\"closest tr\"&gt;\n      Save\n    &lt;/button&gt;\n  &lt;/td&gt;\n    &lt;/tr&gt;\n    \"\"\"\n    return response\n\n@app.route(\"/get-book-row/&lt;int:id&gt;\", methods=[\"GET\"])\ndef get_book_row(id):\n    book = Book.query.get(id)\n    author = Author.query.get(book.author_id)\n\n    response = f\"\"\"\n    &lt;tr&gt;\n        &lt;td&gt;{book.title}&lt;/td&gt;\n        &lt;td&gt;{author.name}&lt;/td&gt;\n        &lt;td&gt;\n            &lt;button class=\"btn btn-primary\"\n                hx-get=\"/get-edit-form/{id}\"&gt;\n                Edit Title\n            &lt;/button&gt;\n        &lt;/td&gt;\n        &lt;td&gt;\n            &lt;button hx-delete=\"/delete/{id}\"\n                class=\"btn btn-primary\"&gt;\n                Delete\n            &lt;/button&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;\n    \"\"\"\n    return response\n\n@app.route(\"/update/&lt;int:id&gt;\", methods=[\"PUT\"])\ndef update_book(id):\n    db.session.query(Book).filter(Book.book_id == id).update({\"title\": request.form[\"title\"]})\n    db.session.commit()\n\n    title = request.form[\"title\"]\n    book = Book.query.get(id)\n    author = Author.query.get(book.author_id)\n\n    response = f\"\"\"\n    &lt;tr&gt;\n        &lt;td&gt;{title}&lt;/td&gt;\n        &lt;td&gt;{author.name}&lt;/td&gt;\n        &lt;td&gt;\n            &lt;button class=\"btn btn-primary\"\n                hx-get=\"/get-edit-form/{id}\"&gt;\n                Edit Title\n            &lt;/button&gt;\n        &lt;/td&gt;\n        &lt;td&gt;\n            &lt;button hx-delete=\"/delete/{id}\"\n                class=\"btn btn-primary\"&gt;\n                Delete\n            &lt;/button&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;\n    \"\"\"\n    return response\n</code></pre> <p>There\u2019s more than one view for the update logic, and we\u2019ll see why shortly. The <code>/get-edit-form</code> route is called when a user clicks on the \"Edit Title\" button on the frontend, and it returns a form for updating the selected book. If the user decides to cancel this action, the <code>/get-book-row</code> route is called and it returns a table row with the unedited book entry. </p> <p>If the user goes through with updating the book title, then the <code>/update</code> route is called. The <code>update_book</code> function that\u2019s bound to the <code>/update</code> route will update the book title based on the <code>id</code> supplied to it as a query parameter. When the update is complete, the method returns an HTML table row with the updated book title.</p>","title":"Create Views"},{"location":"tutorials/build-flask-htmx-app/#running-our-app","text":"<p>Our app is ready to be tested. Navigate to the project\u2019s root folder in a terminal and run the following command: <code>python3 run.py</code>. This should start up a development server on port 5000. Open your browser at <code>http://127.0.0.1:5000/</code> and you should see your app running:</p> <p></p> <p>Once you are satisfied with the app, you can commit and push your changes to GitHub with the following commands.</p> <pre><code>git add . \ngit commit -m 'commit message'\ngit push origin\n</code></pre> <p>We\u2019ve shown you how to build a full stack Flask HTMx application from scratch and you should be able to deploy this basic version, but you may like to consider adding more functionality to enhance our app\u2019s features. We recommend you check out Alpine.js, a lightweight JavaScript framework that works well with <code>HTMx</code> to make sites that are more powerful yet still lightweight. </p> <p>You can find the complete code shown above in this GitHub repository.</p>","title":"Running our App"},{"location":"tutorials/build-hex-color-identifier/","text":"<p></p> <p>Docker provides containers to run applications in isolation. Among other benefits of this architecture, one is allowing applications on the same server to run independently, reducing the likelihood of having a single point of failure in your project.</p> <p>In this tutorial, we\u2019ll build a hex color identifier API with PHP using the Laravel framework, containerize the application using Docker, then ship it to production on Code Capsules.</p> <p>Here\u2019s an example of a response we might get after querying the API.</p> <p></p>","title":"Building a Hex Color Identifier API with PHP, Laravel, and Docker"},{"location":"tutorials/build-hex-color-identifier/#requirements","text":"<p>You will need the following to complete the tutorial and host your application on Code Capsules:</p> <ul> <li>A Code Capsules account.</li> <li>Git set up and installed, and a registered GitHub account.</li> <li>IDE or text editor of your choice.</li> <li>PHP and composer installed.</li> </ul>","title":"Requirements"},{"location":"tutorials/build-hex-color-identifier/#project-set-up","text":"<p>To begin, we need to create a project folder to house all our files.</p> <p>In a terminal, navigate to the directory you'll be keeping the application files in. Run the commands below to create the project folder and navigate into it.</p> <pre><code>mkdir color-identifier\ncd color-identifier\n</code></pre>","title":"Project Set Up"},{"location":"tutorials/build-hex-color-identifier/#create-laravel-project","text":"<p>From the project folder terminal, run the commands below to create a Laravel starter project called \u201cColorApi\u201d and change directories into it.</p> <pre><code>composer create-project --prefer-dist laravel/laravel ColorApi\ncd ColorApi\n</code></pre> <p>From now on the <code>ColorApi</code> folder will be referred to as the project root folder.</p>","title":"Create Laravel Project"},{"location":"tutorials/build-hex-color-identifier/#initialize-an-empty-git-repository","text":"<p>From the project\u2019s root folder, enter the command <code>git init</code> to initialize a git repository. This will allow you to track changes to your app as you build it.</p>","title":"Initialize an Empty Git Repository"},{"location":"tutorials/build-hex-color-identifier/#linking-to-github","text":"<p>Head over to GitHub and create a new repository. Then, in your project's root folder, run the command below from the terminal, replacing \"username\" and \"repository_name\" with your own values from GitHub.</p> <pre><code>git remote add origin git@github.com:username/repository_name.git\n</code></pre> <p>This will link your local repository to the one on GitHub.</p>","title":"Linking to GitHub"},{"location":"tutorials/build-hex-color-identifier/#install-dependencies","text":"<p>Next, we'll install the dependencies we need to build our application. Open the <code>composer.json</code> file in the root folder and add the following entries to the <code>\"require\"</code> dictionary:</p> <pre><code>\"require\": {\n    ... \n\n    \"ourcodeworld/name-that-color\": \"dev-master\",\n    \"symfony/console\": \"6.0.*\",\n    \"symfony/error-handler\": \"6.0.*\",\n    \"symfony/finder\": \"6.0.*\",\n    \"symfony/http-foundation\": \"6.0.*\",\n    \"symfony/http-kernel\": \"6.0.*\",\n    \"symfony/mailer\": \"6.0.*\",\n    \"symfony/mime\": \"6.0.*\",\n    \"symfony/process\": \"6.0.*\",\n    \"symfony/routing\": \"6.0.*\",\n    \"symfony/var-dumper\": \"6.0.*\",\n    \"symfony/event-dispatcher\": \"6.0.*\",\n    \"symfony/string\": \"6.0.*\",\n    \"symfony/translation\": \"6.0.*\",\n    \"symfony/translation-contracts\": \"3.0.*\",\n    \"symfony/service-contracts\": \"3.0.*\",\n    \"symfony/event-dispatcher-contracts\": \"3.0.*\",\n    \"symfony/deprecation-contracts\": \"3.0.*\"\n\n    ....\n}\n</code></pre> <p>Now run the command <code>composer update</code> from the terminal to install the packages.</p>","title":"Install Dependencies"},{"location":"tutorials/build-hex-color-identifier/#build-hex-color-api","text":"<p>While in the <code>ColorApi</code> terminal, run the command below to create a controller for your API:</p> <pre><code>php artisan make:controller ColorController\n</code></pre> <p>This command will create a controller at <code>app/Http/Controllers/ColorController.php</code>. In big projects, controllers are meant to group similar request-handling logic in different methods, but the hex color API we\u2019re building is relatively small and will only have one controller method.</p> <p>Update the contents of <code>ColorController.php</code> so it looks like this:</p> <pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nrequire base_path('vendor/autoload.php');\n\nuse Illuminate\\Http\\Request;\nuse ourcodeworld\\NameThatColor\\ColorInterpreter;\n\nclass ColorController extends Controller\n{\n    public function convert($hexcode)\n    {\n        $instance = new ColorInterpreter();\n\n        $result = $instance-&gt;name($hexcode);\n\n        // 1. Print the human name e.g \"Deep Sea\"\n        echo $result[\"name\"] . \"\\n\";\n\n        // 2. Print the hex code of the closest color with a name e.g \"#01826B\"\n        echo $result[\"hex\"] . \"\\n\";\n\n        return response()-&gt;json($result[\"name\"]);\n    }\n}\n</code></pre> <p>We require the <code>autoload.php</code> module on line 5 to automatically load the dependency we installed earlier and can now reference it on line 8.</p> <p>The <code>convert()</code> method is responsible for converting a hex code to a human-readable name by leveraging the <code>ColorInterpreter</code> package we loaded on line 8. It takes in the hex code as an argument and returns the color name.</p>","title":"Build Hex Color API"},{"location":"tutorials/build-hex-color-identifier/#create-api-routes","text":"<p>With the controller in place, we\u2019re left with linking it to a route that other applications or users can hit. Let\u2019s create and link to this route by editing the <code>routes/api.php</code> file like this:</p> <pre><code>&lt;?php\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Route;\nuse App\\Http\\Controllers\\ColorController;\n\nRoute::middleware('auth:sanctum')-&gt;get('/user', function (Request $request) {\n    return $request-&gt;user();\n});\nRoute::get('/color/{hexcode}',[ColorController::class, 'convert']);\n</code></pre> <p>On the last line, we add a route that accepts GET requests with a hexcode parameter on the <code>api/color</code> URL. We then link that route to the <code>ColorController</code> class <code>convert()</code> method. Your application should be able to accept requests on the <code>api/color/{hexcode}</code> route now.</p>","title":"Create API Routes"},{"location":"tutorials/build-hex-color-identifier/#dockerize-api","text":"<p>Our Laravel application can now run locally, but we need to install it in a Docker container for it to run on Code Capsules. To do this, add a <code>Dockerfile</code> to the <code>/ColorApi</code> folder. A <code>Dockerfile</code> is a set of instructions on how to build an image of your application and run it inside a docker container. Populate the <code>Dockerfile</code> with the code below:</p> <pre><code>FROM composer:2.0 as build\nCOPY . /app/\nRUN composer install --prefer-dist --no-dev --optimize-autoloader --no-interaction --ignore-platform-reqs\n\nFROM php:8.1-apache-buster as production\nRUN echo \"ServerName 127.0.0.1\" &gt;&gt; /etc/apache2/apache2.conf\n\nENV APP_ENV=production\nENV APP_DEBUG=false\n\nRUN docker-php-ext-configure opcache --enable-opcache &amp;&amp; \\\n    docker-php-ext-install pdo pdo_mysql\n\nCOPY --from=build /app /var/www/html\n\nRUN php artisan config:cache &amp;&amp; \\\n    php artisan route:cache &amp;&amp; \\\n    chmod 777 -R /var/www/html/storage/ &amp;&amp; \\\n    chown -R www-data:www-data /var/www/\n\nCMD [\"php\", \"artisan\", \"serve\", \"--host=0.0.0.0\"]\n</code></pre>","title":"Dockerize API"},{"location":"tutorials/build-hex-color-identifier/#naming-the-dockerfile","text":"<p>The name <code>Dockerfile</code> should start with a capital letter \u2018D\u2019 and have no extension, otherwise it won\u2019t work.</p>","title":"Naming the <code>Dockerfile</code>"},{"location":"tutorials/build-hex-color-identifier/#understanding-the-dockerfile","text":"<p>Let\u2019s take a look at how the image is built and run in the <code>Dockerfile</code>.</p> <p>In the first three lines, we require <code>composer</code> as the build stage and copy the project to the <code>/app</code> folder of the container. After copying all the <code>src</code> code for our app into the container, we run <code>composer install</code> with some optional parameters that create an efficient production build.</p> <p>After installing the dependencies, we require PHP 8.1 as the production stage and set the <code>\"ServerName\"</code> variable to avoid getting a warning from the apache server. We then copy the app from the build stage into the production stage, specifically into the <code>/var/www/html</code> directory.</p> <p>The last command tells Docker how to run your application after it has been built.</p>","title":"Understanding the <code>Dockerfile</code>"},{"location":"tutorials/build-hex-color-identifier/#add-commit-and-push-git-changes","text":"<p>Our application is now ready for deployment. Let's add and commit all the files we created to our local repository and then push them to the remote one. Do this by running the commands listed below in a terminal while in the project\u2019s root folder:</p> <pre><code>git add -A\ngit commit -m \"Added hex color identifier app files\"\ngit branch -M main\ngit push -u origin main\n</code></pre> <p>Your remote repository will now be up to date with your local one.</p>","title":"Add, Commit, and Push Git Changes"},{"location":"tutorials/build-hex-color-identifier/#deploy-to-code-capsules","text":"<p>The final step is to deploy our app. Log into your Code Capsules account and link your remote GitHub repository to Code Capsules. Create a Docker Capsule and deploy the app there. You can reference this deployment guide to see how to do so in greater detail.</p> <p>Once the build is complete, navigate to the \"Configure\" tab and scroll down to the \"Network Port\" section. Enter \"8000\" as the port number and click on \"Update Capsule\".</p> <p></p> <p>That\u2019s it! Your \"Hex Color Identifier\" app should be live and fully functional now. You should now be able to query the <code>/api/color</code> route.</p> <p></p>","title":"Deploy to Code Capsules"},{"location":"tutorials/build-mern-job-board/","text":"<p></p> <p>A video for this tutorial can be found here if you prefer watching to reading.</p> <p>Like other full stack applications, a MERN (MongoDB, Express, React, Node.js) stack has the advantage of needing only one capsule to host both the frontend and backend of an application.</p> <p>In this tutorial, we'll extend a boilerplate MERN application to make a job board where users can view and submit available jobs.</p>","title":"Build a MERN Job Board"},{"location":"tutorials/build-mern-job-board/#getting-started","text":"<p>Head over to the MERN stack deployment guide and follow the steps outlined there to set up the boilerplate application. You will need to clone the forked repository to your local development environment to extend the functionality of the boilerplate application. </p> <p>Before we can view the application's frontend, we need to install the <code>node_modules</code> for the backend and set a local <code>DATABASE_URL</code> environment variable similar to the one on Code Capsules.</p> <p>Navigate to the project's root folder in a terminal or command prompt window and run <code>npm install</code> there. Reference this MongoDB setup guide to ensure that public access is turned on for your data capsule. Copy the value of the connection string and append <code>&amp;authSource=admin</code> to it so that its format is similar to <code>mongodb://09229f61-205e-1:325368d6-3c25-e@data-capsule-ndulvw.codecapsules.co.za:27017/app?ssl=true&amp;authSource=admin</code>. </p> <p>Set the local <code>DATABASE_URL</code> environment variable by following the steps below:</p> <ul> <li>Create a <code>.env</code> file in the root folder.</li> <li>Add the line below to the <code>.env</code> file replacing the connection string with your own. <pre><code>DATABASE_URL=mongodb://09229f61-205e-1:325368d6-3c25-e@data-capsule-ndulvw.codecapsules.co.za:27017/app?ssl=true&amp;authSource=admin\n</code></pre></li> <li>Run the command below in a terminal window from the root folder to install the package for loading environment variables. <pre><code>npm install dotenv\n</code></pre></li> <li>Open the <code>index.js</code> file in the root folder and add the following line just below the other require statements. <pre><code>require('dotenv').config();\n</code></pre></li> </ul>","title":"Getting Started"},{"location":"tutorials/build-mern-job-board/#extending-the-frontend","text":"<p>Open the project\u2019s root folder and navigate to the client directory. This is where you'll find the code for the React frontend in the <code>src</code> subdirectory. Open a terminal and run <code>npm install</code> from the client directory to install the <code>node_modules</code> required by the frontend code. </p> <p>Next, type in <code>npm run build</code>. This command creates a <code>build</code> folder with an optimized version of our frontend source code. This code has all the extra spacing removed, which is great for efficiency but impossible for humans to read or edit. An excerpt is shown below:</p> <pre><code>a=document.createElement(\"script\");a.charset=\"utf-8\",a.timeout=120,i.nc&amp;&amp;a.setAttribute(\"nonce\",i.nc),a.src=function(e){return i.p+\"static/js/\"+({}[e]||e)+\".\"+{3:\"fe1e148c\"}[e]+\".chunk.js\"}(e);var c=new Error;u=function(r){a.onerror=a.onload=null,clearTimeout(f);var t=o[e];if(0!==t){if(t){var n=r&amp;&amp;(\"load\"===r.type?\"missing\":r.type),u=r&amp;&amp;r.target&amp;&amp;r.target.src;\n</code></pre> <p>Whenever we make changes to our application's frontend code, we edit the files in the <code>src</code> directory and use the <code>npm run build</code> command to create the optimized code in the <code>build</code> directory, which will be executed when we load our application in a web browser.</p> <p>Run <code>node index.js</code> in the terminal from the project's root folder to start the boilerplate MERN application. You can view it in your browser at <code>http://localhost:8080</code>. The app should look something like this:</p> <p></p> <p>Let's extend this frontend to reflect the job board functionality.</p>","title":"Extending the Frontend"},{"location":"tutorials/build-mern-job-board/#adding-the-submitjob-component","text":"<p>Create a <code>components</code> folder within the <code>client/src</code> directory ( <code>client/src/components</code> ) to house the submit job and view jobs components that we\u2019re going to build next. Create a <code>submitJob.js</code> file in the components folder and add the following code:  </p> <pre><code>import React, {useState} from 'react'\nimport axios from 'axios'\n\nconst SubmitJob = () =&gt; {\n\n    const [jobTitle, setJobTitle] = useState(\"\")\n    const [jobDescription, setJobDescription] = useState(\"\")\n    const [jobLocation, setJobLocation] = useState(\"\")\n    const [jobSalary, setJobSalary] = useState(null)\n\n    const postJob = (e) =&gt; {\n        const data = { title: jobTitle, description: jobDescription, location: jobLocation,\n                        salary: jobSalary }\n        axios.post('/api/jobs/', data)\n        .then(response =&gt; {\n          console.log(response)\n        })\n    }\n\n    return(\n        &lt;div className=\"submitJobContainer\"&gt;\n            &lt;h3&gt;Submit a Job&lt;/h3&gt;\n            &lt;form className=\"formContainer\" onSubmit={postJob}&gt;\n                &lt;input type=\"text\" name=\"title\" placeholder=\"Job Title\" \n                  onChange={e =&gt; setJobTitle(e.target.value)} /&gt;\n                &lt;input type=\"text\" name=\"description\" placeholder=\"Job Description\"\n                    onChange={e =&gt; setJobDescription(e.target.value)} /&gt;\n                &lt;input type=\"text\" name=\"location\" placeholder=\"Job Location\"\n                    onChange={e =&gt; setJobLocation(e.target.value)} /&gt;\n                &lt;input type=\"number\" name=\"salary\" placeholder=\"Job Salary\"\n                    onChange={e =&gt; setJobSalary(e.target.value)} /&gt;\n                &lt;button className=\"submitButton\" type=\"submit\"&gt;Submit&lt;/button&gt;\n            &lt;/form&gt;\n        &lt;/div&gt;\n    )\n}\n\nexport default SubmitJob\n</code></pre> <p>The <code>SubmitJob</code> component uses state to keep track of the job field values as they are entered by a user. You can add more state variables to capture more job fields in your application. When the user clicks \"Submit\", the <code>postJob</code> method posts the job field values to the endpoint specified in the <code>axios.post()</code> method. Notice that we use the relative URL <code>/api/jobs/</code> in the <code>post</code> request, since the frontend will be hosted at the same URL as the backend. </p>","title":"Adding the <code>SubmitJob</code> Component"},{"location":"tutorials/build-mern-job-board/#adding-the-viewjobs-component","text":"<p>Create a <code>viewJobs.js</code> file in the components folder and add the following code to it: </p> <pre><code>import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\n\nconst ViewJobs = () =&gt; {\n\n    const [jobsStateArray, setJobsStateArray] = useState([])\n\n    useEffect(() =&gt; {          \n        axios.get('/api/jobs/')\n        .then(response =&gt; {\n            console.log(response)\n            setJobsStateArray(response.data)\n          })\n    }, [])\n\n    return(\n        &lt;div className=\"viewJobsContainer\"&gt;\n            &lt;h3&gt;View Available Jobs&lt;/h3&gt;\n            {jobsStateArray.map((item, index) =&gt; {\n                return(\n                    &lt;div className=\"jobCard\"&gt;\n                        &lt;p&gt;&lt;strong&gt;Job Title&lt;/strong&gt;: {item.title}&lt;/p&gt;\n                        &lt;p&gt;&lt;strong&gt;Location&lt;/strong&gt;: {item.location}&lt;/p&gt;\n                        &lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: {item.description}&lt;/p&gt;\n                        &lt;p&gt;&lt;strong&gt;Salary&lt;/strong&gt;: {item.salary}&lt;/p&gt;\n                    &lt;/div&gt;\n                )\n            })}\n        &lt;/div&gt;\n    )\n}\n\nexport default ViewJobs\n</code></pre> <p>The <code>ViewJobs</code> component uses the <code>useEffect</code> hook to fetch available jobs as soon as the page loads. After fetching the jobs, they are stored in the <code>jobsStateArray</code> before being displayed using the <code>map</code> function.  </p>","title":"Adding the <code>ViewJobs</code> Component"},{"location":"tutorials/build-mern-job-board/#viewing-the-frontend","text":"<p>We need to import the two components we have just created in <code>src/App.js</code> before we can see the changes we just made. Open <code>App.js</code> and replace its contents with this code:</p> <pre><code>import logo from './logo.svg';\nimport './App.css';\nimport React, {useState} from 'react';\nimport axios from 'axios';\nimport SubmitJob from './components/submitJob';\nimport ViewJobs from './components/viewJobs';\n\nfunction App() {\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;header className=\"App-header\"&gt;\n        &lt;img src={logo} className=\"App-logo\" alt=\"logo\" /&gt;\n        &lt;h3&gt;Job Board&lt;/h3&gt;\n      &lt;/header&gt;\n      &lt;SubmitJob /&gt;\n      &lt;ViewJobs /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Here, we're importing the <code>SubmitJob</code> and <code>ViewJobs</code> components so that they can be rendered when React displays the contents of <code>App.js</code>.</p> <p>Now you can run <code>npm run build</code> again from the client directory to build the app, then open your browser to take a look at the extended frontend. </p> <p>You'll notice the page layout has changed, but the styling is a bit off. Add the contents of this CSS file to <code>src/App.css</code> to make our frontend prettier. </p> <p>When you rebuild your application and take a look at the frontend, it should look like this: </p> <p></p>","title":"Viewing the Frontend"},{"location":"tutorials/build-mern-job-board/#extending-the-backend","text":"<p>We\u2019re now ready to extend the backend to include functionality for the addition and retrieval of jobs on the job board.</p>","title":"Extending the Backend"},{"location":"tutorials/build-mern-job-board/#adding-the-job-model","text":"<p>Let\u2019s define our job model to declare which job fields we want to save. Open <code>app/models/index.js</code> and replace its contents with this code:</p> <pre><code>const dbConfig = require(\"../config/db-config.js\");\n\nconst mongoose = require(\"mongoose\");\nmongoose.Promise = global.Promise;\n\nconst db = {};\ndb.mongoose = mongoose;\ndb.url = dbConfig.url;\ndb.jobs = require(\"./job.model.js\")(mongoose);\n\nmodule.exports = db;\n</code></pre> <p>Here we create and export a <code>db</code> variable that we'll use to access the database. We'll use the Mongoose library to handle all communication with our MongoDB database. </p> <p>Now create a file named <code>job.model.js</code> in the <code>models</code> folder to define the fields and field types of the job model. Populate it with the code below. If you added more fields to your frontend <code>SubmitJob</code> component, remember to add them here too, or they won\u2019t be saved when a user submits a job.</p> <pre><code>module.exports = mongoose =&gt; {\n    var schema = mongoose.Schema(\n        {\n        title: String,\n        description: String,\n        location: String,\n        salary: Number\n        },\n        { timestamps: true }\n    );\n\n    schema.method(\"toJSON\", function() {\n        const { __v, _id, ...object } = this.toObject();\n        object.id = _id;\n        return object;\n    });\n\n    const Job = mongoose.model(\"job\", schema);\n    return Job;\n};\n</code></pre> <p>By default, Mongoose adds an <code>_id</code> property to <code>ObjectId</code> fields. The <code>schema.method()</code> function makes sure the name of the <code>ObjectId</code> field is just <code>id</code>, which is the name our frontend expects.</p> <p>Delete the <code>person.model.js</code> file that came with the boilerplate project as we won\u2019t be needing it. </p>","title":"Adding the Job Model"},{"location":"tutorials/build-mern-job-board/#adding-job-controllers","text":"<p>The next step is to create controllers to decide whether the app is reading or writing jobs to the database. In the <code>app/controllers/</code> folder, create a file named <code>job.controller.js</code> and add the following code to it: </p> <pre><code>const db = require(\"../models\");\nconst Job = db.jobs;\n\n// Create and Save a new Job\nexports.create = (req, res) =&gt; {\n  // Validate request\n  if (!req.body.title) {\n    res.status(400).send({ message: \"Content can not be empty!\" });\n    return;\n  }\n\n  // Create a Job\n  const job = new Job({\n    title: req.body.title,\n    description: req.body.description,\n    location: req.body.location,\n    salary: req.body.salary\n  });\n\n  // Save Job in the database\n  job\n    .save(job)\n    .then(data =&gt; {\n      res.send(data);\n    })\n    .catch(err =&gt; {\n      res.status(500).send({\n        message:\n          err.message || \"Some error occurred while creating the Job.\"\n      });\n    });\n};\n\n// Retrieve all Jobs from the database.\nexports.findAll = (req, res) =&gt; {\n    const title = req.query.title;\n    var condition = title ? { title: { $regex: new RegExp(title), $options: \"i\" } } : {};\n\n    Job.find(condition)\n      .then(data =&gt; {\n        res.send(data);\n      })\n      .catch(err =&gt; {\n        res.status(500).send({\n          message:\n            err.message || \"Some error occurred while retrieving Jobs.\"\n        });\n      });\n};\n</code></pre> <p>The <code>create</code> export is responsible for creating a new job object using the job model and saving it to the database. The <code>findAll</code> export retrieves all jobs that were previously submitted.</p> <p>Delete the <code>person.controller.js</code> file that came with the boilerplate project as we won\u2019t be needing it. </p>","title":"Adding Job Controllers"},{"location":"tutorials/build-mern-job-board/#adding-endpoints","text":"<p>The last step in extending the backend is to add endpoints for the frontend to make <code>post</code> and <code>get</code> requests to. Create a <code>job.routes.js</code> file in the <code>app/routes/</code> folder and add the following code: </p> <pre><code>module.exports = app =&gt; {\n    const jobs = require(\"../controllers/job.controller.js\");\n\n    var router = require(\"express\").Router();\n\n    // Create a new Job\n    router.post(\"/\", jobs.create);\n\n    // Retrieve all Jobs\n    router.get(\"/\", jobs.findAll);\n\n    app.use('/api/jobs', router);\n};\n</code></pre> <p>The routes use request methods and the controller exports we made earlier to decide what happens when each endpoint is hit by a <code>get</code> or <code>post</code> request.</p> <p>Delete the <code>person.routes.js</code> file that was in the routes folder.</p> <p>In <code>index.js</code> in the root folder of the project, find the following line: </p> <pre><code>require(\"./app/routes/person.routes\")(app);\n</code></pre> <p>and change it to: </p> <pre><code>require(\"./app/routes/job.routes\")(app);\n</code></pre> <p>This tells our backend to use the routes defined in our <code>job.routes.js</code> file.</p>","title":"Adding Endpoints"},{"location":"tutorials/build-mern-job-board/#integrating-the-frontend-and-backend","text":"<p>Our Express backend uses the contents of the <code>client/build</code> folder to render the frontend of our MERN stack application. The lines below in the <code>index.js</code> file in the root folder handle that responsibility:</p> <pre><code>const path = __dirname + '/client/build/';\nconst app = express();\napp.use(express.static(path));\n</code></pre>","title":"Integrating the Frontend and Backend"},{"location":"tutorials/build-mern-job-board/#using-version-control","text":"<p>We'll use version control to keep track of the new files we added when we were extending our application.</p> <p>We don't want to track the build folder in git (the frontend will rebuild when we deploy to Code Capsules), so we'll add this folder to be ignored in the <code>.gitignore</code> file in the project's root folder, like this:</p> <pre><code> /client/build\n</code></pre>","title":"Using Version Control"},{"location":"tutorials/build-mern-job-board/#git-add","text":"<p>To add all the new files we created, run the command below in the root folder of the project.</p> <pre><code>git add -A\n</code></pre>","title":"Git Add"},{"location":"tutorials/build-mern-job-board/#git-commit","text":"<p>Next, we need to commit the files we just added to our repository. To do this, run this command:</p> <pre><code>git commit -m \"Added job board files\"\n</code></pre>","title":"Git Commit"},{"location":"tutorials/build-mern-job-board/#git-push","text":"<p>The final step is to push our committed changes to the remote repository which Code Capsules is linked to. Run the command below to push the changes we just made:</p> <pre><code>git push origin main\n</code></pre> <p>Code Capsules automatically deploys the new version of your application as soon as you push to the deploy branch, which is <code>main</code> in this case. </p> <p>That\u2019s it, your job board should be fully functional now.</p>","title":"Git Push"},{"location":"tutorials/build-slackbot-with-node/","text":"<p></p> <p>Slack is a really useful communication tool when working in teams. Many developers find themselves using it almost constantly when working on projects. </p> <p>One of the stand out features of Slack is the rich API it exposes, to allow developers to integrate with it. </p> <p>In this tutorial, we'll use the Slack API to give our apps a voice. We'll be able to talk to our apps running on Code Capsules, to ask their status and see if they are up and running. They will also be able to alert us when they boot up, so we know if they have been successfully deployed or restarted. </p>","title":"Build a Slackbot with Node.js to Monitor your Applications"},{"location":"tutorials/build-slackbot-with-node/#overview-and-requirements","text":"<p>As we're building a Slackbot, you'll need to sign up for an account on Slack, if you haven't already got one. Ideally, for this tutorial you should use a Slack workspace that you can safely send many test messages to while we are creating this bot, without disturbing people. </p> <p>We'll also need the following: </p> <ul> <li>Git set up and installed, and a registered GitHub account.</li> <li>Node.js installed.</li> <li>A registered Code Capsules account.</li> <li>An IDE or text editor to create the project in. This tutorial was made using Visual Studio Code, but feel free to use any tool you like. </li> </ul>","title":"Overview and Requirements"},{"location":"tutorials/build-slackbot-with-node/#setting-up-the-project","text":"<p>With our requirements in place, we can get started on setting them up to work as needed for our Slackbot project.  </p>","title":"Setting Up the Project"},{"location":"tutorials/build-slackbot-with-node/#create-a-new-repo-on-github","text":"<p>We need a place to store our code from which Code Capsules can deploy to a capsule. A repository on GitHub is just what we need. </p> <p>Head over to GitHub, and create a new repo. We're calling it slackbot here, but you can call it whatever you like.</p> <p>Note: You can also add this code to an existing backend project if you would like to monitor it; perhaps something you built in an earlier tutorial.</p>","title":"Create a new repo on GitHub"},{"location":"tutorials/build-slackbot-with-node/#initialise-the-base-project","text":"<p>Now we can get some base code set up. Let's start by cloning the new GitHub repo onto our local computer.</p> <p>Now, go into the directory of the repo you've just cloned. </p> <p>We can initialise a new Node.js project by typing the following at the terminal (or command prompt, if you're on Windows):</p> <pre><code>npm init\n</code></pre> <p>We can just press enter for each of the questions it asks; the defaults are good to start with. </p>","title":"Initialise the base project"},{"location":"tutorials/build-slackbot-with-node/#install-our-packages","text":"<p>Now that we have our project initialised, we can add the packages we need to create our bot. These are:</p> <ul> <li>Express: This acts as our web server and HTTP request router. We'll use this to route requests from Slack to the correct logic. </li> <li>body-parser: This interprets and parses payload data from HTTP requests. We'll need this to parse the URL-encoded data Slack sends to us with a request. </li> <li>superagent: This package allows us to make outgoing HTTP requests. We'll need this to send a message to Slack. </li> </ul> <p>Let's type in the following at the terminal to install the packages:</p> <pre><code>npm install express body-parser superagent \n</code></pre> <p>Now let's create an <code>index.js</code> file, which will be the main file for our app. A simple way to do this is to open up your project folder in an editor, like Visual Studio Code. Now you can create a new <code>index.js</code> file. </p> <p></p> <p>Save this blank file. </p> <p>Great, it's time to push this boilerplate project up to Git. We can do it from the terminal with the following: </p> <pre><code>git add . \ngit commit -am 'added base files for project'\ngit push origin\n</code></pre>","title":"Install our packages"},{"location":"tutorials/build-slackbot-with-node/#create-a-new-code-capsule","text":"<p>We'll need a place to host our app.</p> <ol> <li>Log in to Code Capsules, and create a Team and Space as necessary.</li> <li>Link Code Capsules to the GitHub repository you created earlier. You can do this by clicking your username at the top right, and choosing \"Edit Profile\". Now click the \"GitHub\" button to link to a repo.</li> <li>Create a new Capsule, selecting the \"Backend\" capsule type.</li> <li>Select the GitHub repository you created above. If you are only using the repo for this project, you can leave the \"Repo Subpath\" field empty. You may need to add your repo to the team repo if you haven't already. Click the \"Modify Team Repos\" to do so. </li> <li>Click \"Next\", then on the following page, click \"Create Capsule\". </li> </ol> <p></p>","title":"Create a new Code Capsule"},{"location":"tutorials/build-slackbot-with-node/#register-an-app-on-slack","text":"<p>After you've created a workspace on Slack, or logged into an existing one, head over to https://api.slack.com and click on \"Create a custom app\". </p> <p>On the dialog that comes up, we can give our app a name, and choose which workspace we want to add it to. You can choose any name you wish \u2013 we've used Serverbot here. Now we can click \"Create App\". </p> <p>Great! We've created our app. Now we can configure it. </p> <p>For this tutorial, we would like the following two functions:</p> <ol> <li>Our Code Capsules app should automatically send us a notification whenever it starts up. This allows us to easily know when a new deployment is successful. It can also alert us to any potential crashes and restarts. </li> <li>We want to query our Code Capsules app from Slack at any time to see how it's doing.</li> </ol> <p>Our first requirement can be configured on the Slack side by clicking \"OAuth &amp; Permissions\" on the left panel. Scroll down to the Scopes section, and click \"Add an OAuth Scope\" under the Bot Token Scopes section, and choose \"Chat:Write\" from the options list. This now allows our bot to initiate and post messages to us when it starts up. </p> <p></p> <p>Our second requirement can be configured by setting up a slash command. Click on the \"Slash Commands\" menu item on the left, under Features. </p> <p></p> <p>Then click \"Create a new Command\". We'll give the command the name /stats. For the Request URL, copy the Domain name from your Code Capsules Overview page. </p> <p></p> <p>Paste your domain into the Request URL box on Slack, and add <code>/slack/command/stats</code> to the end of it. We can fill in a description as well, something like 'Returns key stats from the app'.</p> <p></p> <p>Great, now we can click \"Save\" at the bottom of the page to finish setting up our slash command. </p>","title":"Register an app on Slack"},{"location":"tutorials/build-slackbot-with-node/#writing-the-slackbot-code","text":"<p>Now that we have all our systems set up, we can get onto the coding part. </p>","title":"Writing the Slackbot Code"},{"location":"tutorials/build-slackbot-with-node/#adding-the-base-code","text":"<p>Let's add the boilerplate code to startup a new Express server. Open up the <code>index.js</code> file and add the following:  </p> <pre><code>const express = require('express'); \n\nconst app = express();\n\nlet port = process.env.PORT || 3000;\napp.listen(port, ()=&gt;{\n  console.log(`App listening on port ${port}`);\n});\n</code></pre>","title":"Adding the base code"},{"location":"tutorials/build-slackbot-with-node/#sending-a-startup-message-to-slack","text":"<p>Ok, cool, we've got the base code to create an Express app, and start it up to begin listening for requests. Now we can add some code to send a message to Slack when it boots up, not just locally to the console. If we look at the docs on Slack, we see that we can POST to the endpoint <code>https://slack.com/api/chat.postMessage</code> to send a message. In their example, they specify that we need: 1. An access token. 2. The channel ID of the channel to post the message to. 3. The message we want to post as the requirements. </p> <p>To get the access token, head over to your app dashboard on Slack, and click on the \"OAuth &amp; Permissions\" menu item on the left-hand side. Then click the \"Install to Workspace\" button, and then the \"Allow\" button. After this, you should see a newly generated \"Bot User OAuth Token\". Copy this token \u2013 this is our access token. </p> <p>We could just put this token in our code. However, this is not really considered best practice for sensitive secrets and credentials. Rather, let's add this secret as an Environment Variable, and access it from the Node.js process object, on the <code>.env</code> property.</p> <p>To add the access token to the environment in Code Capsules, head over to the capsule we created earlier, and click on the \"Config\" tab. Now we can fill in our environment variable for the access token. Add a new environment variable with name <code>SLACK_BOT_TOKEN</code> and set the value to the token copied from Slack. </p> <p></p> <p>Now that we've added our access token, we need to find the ID of the channel we want to post to. Find a channel on your Slack workspace that you want to send to, or create a new channel. Now we can get the channel ID by right-clicking on the channel name to bring up a context menu. Now, we can choose \"Copy Link\" from that menu: </p> <p></p> <p>If we paste that link, we get something like <code>https://&lt;workspace-name&gt;.slack.com/archives/C01SZ6Z3TCY</code>. The last part of that URL is the channel ID; in this example case, <code>C01SZ6Z3TCY</code>.</p> <p>Let's add this to our environment variables as well, as it keeps all the configurations in one place. Head back over to your Capsule, and add in an environment variable with the name <code>SLACK_CHANNEL_ID</code> and set the value to the channel ID we extracted above. Click the \"Update &amp; Start Build\" button to save the changes to the environment variables.</p> <p></p> <p>We also need to invite our bot to the chosen channel, so that it will be able to post there. Go to the channel, and @ mention the name you gave the bot to add it. Click \"Invite Them\" when Slack prompts you. </p> <p></p> <p>Now let's add the code to call Slack on startup, and write a message to our channel. We can modify our boilerplate code above to make the HTTP POST to the endpoint https://slack.com/api/chat.postMessage. We'll use Superagent to make the call. </p> <p><pre><code>const express = require('express');\nconst superagent = require('superagent');\n\nconst app = express();\n\nlet port = process.env.PORT || 3000;\napp.listen(port, ()=&gt;{\n  console.log(`App listening on port ${port}`);\n  sendStartupMessageToSlack(); \n});\n\nfunction sendStartupMessageToSlack(){\n    superagent\n      .post('https://slack.com/api/chat.postMessage')\n      .send({\n        channel:process.env.SLACK_CHANNEL_ID, \n        text:\"I'm alive and running\"\n      })\n      .set('accept', 'json')\n      .set('Authorization', 'Bearer '+ process.env.SLACK_BOT_TOKEN)\n      .end((err, result) =&gt; {\n      });\n}\n</code></pre> We've added in a function <code>sendStartupMessageToSlack</code> which makes the call out to Slack. Notice that we send the auth token in a header, using <code>.set('Authorization', 'Bearer '+ process.env.SLACK_BOT_TOKEN)</code>. The <code>Authorization</code> header is a standard HTTP header. </p> <p>The channel and the message are sent in the body. Feel free to modify the startup message from I'm alive and running to whatever you'd like. </p>","title":"Sending a startup message to Slack"},{"location":"tutorials/build-slackbot-with-node/#deploying-to-code-capsules","text":"<p>This seems like a great time to test out our app on Code Capsules. But before we do that, there is one thing we have to do to make it work. We need to tell Code Capsules how to run our app. By default, Code Capsules will call <code>npm start</code> after deploying the code. Therefore, we just need to add a <code>start</code> script to our <code>package.json</code> file in order for our code to be run on Code Capsules. </p> <p>Open the <code>package.json</code> file. Under the <code>scripts</code> section, add the line <code>\"start\": \"node index.js\"</code>. The <code>package.json</code> file should look like this now: </p> <pre><code>{\n  \"name\": \"slackbot\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",\n    \"start\": \"node index.js\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"body-parser\": \"^1.19.0\",\n    \"express\": \"^4.17.1\",\n    \"superagent\": \"^6.1.0\"\n  }\n}\n</code></pre> <p>Ok, let's save all the files we've created, add and commit, and then push to our repo. When Code Capsules sees that there is a new commit, it will automatically deploy our code. </p> <pre><code>git add . \ngit commit -am 'added code to call Slack on startup'\ngit push origin\n</code></pre> <p>If all goes well, in a few minutes you should get a message on your Slack channel from your code!</p> <p></p>","title":"Deploying to Code Capsules"},{"location":"tutorials/build-slackbot-with-node/#adding-a-slash-command","text":"<p>Now that our app can send us messages, can we send messages back to it? Let's implement the slash command, which will allow us to ask our app for some of its important stats and info. This time, Slack will send an HTTP POST to our app. If we take a look at the Slack docs again, we notice that Slack will send the slash command instruction to the URL we specified in the command set up earlier. We can also see that the POST payload is in the format <code>application/x-www-form-urlencoded</code>. We can set up a <code>body-parser</code> to interpret this data.</p> <p>Let's extend our code with the snippet below to implement the slash command receiver as specified in the Slack docs. First add a require statement for <code>body-parser</code> at the top.</p> <pre><code>const bodyParser = require(\"body-parser\");\n</code></pre> <p>Then add the code below: </p> <p><pre><code>app.use(bodyParser.urlencoded());\n\napp.post('/slack/command/stats', [function(req,res){\n  const slackReqObj = req.body;\n  const packageJson = require('./package.json');\n\n  const current_time = new Date(); \n  const stats = {\n    name: packageJson.name,\n    version: packageJson.version,\n    environment: process.env.NODE_ENV,\n    platform: process.platform,\n    architecture: process.arch,\n    node_version: process.version,\n    pid: process.pid,\n    current_server_time: current_time.toString(),\n    uptime: process.uptime(),\n    memory_usage: process.memoryUsage()\n  };\n\n  const response = {\n    response_type: 'in_channel',\n    channel: slackReqObj.channel_id,\n    text: JSON.stringify(stats, null, '\\t')\n  };\n\n  return res.json(response); \n}]);\n</code></pre> This code listens for incoming POST calls on the line <code>app.post('/slack/command/stats', [function(req,res){</code>. If we receive one, we build up a return object, consisting of various interesting stats and info. This includes the current time on the server (in case it is in a different time zone to us), the name and version of our app as set in the <code>package.json</code> file, and various environment and process info.</p> <p>Then it replies to the request in the format specified by Slack in their docs. We use the line <code>text: JSON.stringify(stats, null, '\\t')</code> to turn our info and stats object into a nicely formatted text string, in the style of a JSON object. </p> <p>Then, in the line <code>return res.json(response);</code>, we return all the info back to Slack to display as the response to a matching slash command. </p> <p>Great, now we can commit and push this code. </p> <pre><code>git commit -am 'added handler for slash command'\ngit push origin \n</code></pre> <p>After the code has finished deploying on Code Capsules (it should send a startup message again when it's ready), we can test the slash command. </p> <p>Type <code>/stats</code> in the channel we chose earlier. After a second or two, the app should respond with its current vital stats and information. </p> <p></p>","title":"Adding a slash command"},{"location":"tutorials/build-slackbot-with-node/#adding-verification","text":"<p>We can ask our app via Slack (which we use constantly!) how it's doing; pretty cool, huh? There is a problem though. If we call our slash command endpoint from anywhere else, for instance if we just call it using Postman, it also returns all the information and stats! This would not be good for a production system, as sensitive information will be easily found by attackers. </p> <p></p> <p>So how can we ensure that the request comes from our Slack workspace? Luckily, Slack has thought about this, and sends a message signature with its requests. From the guide in Slack's docs, we can put together some code to check that the request is legitimately from Slack. The main parts of the check, copied from the docs, looks like this: </p>  <ul> <li>Retrieve the X-Slack-Request-Timestamp header on the HTTP request, and the body of the request.</li> <li>Concatenate the version number, the timestamp, and the body of the request to form a basestring. Use a colon as the delimiter between the three elements. For example, v0:123456789:command=/weather&amp;text=94070. The version number right now is always v0.</li> <li>With the help of HMAC SHA256 implemented in your favorite programming language, hash the above basestring, using the Slack Signing Secret as the key.</li> <li>Compare this computed signature to the X-Slack-Signature header on the request.</li> </ul>  <p>We can also check the timestamp to ensure that it is not a replay attack of a message from long ago. </p> <p>Ok, let's implement this in our project. First, we somehow need to access the raw body of the request, before it has been parsed by <code>body-parser</code>. This is to ensure that the signing hash we calculate is using the same data that Slack did. After parsing, there could be extra characters and formatting etc. Luckily, the body parser package has a verify option, which passes a binary buffer of the raw body request to a user defined function. Let's make a function that conforms to the specs given by <code>body-parser</code>. Add this code to your <code>index.js</code> file: </p> <pre><code>var rawBodySaver = function (req, res, buf, encoding) {\n  if (buf &amp;&amp; buf.length) {\n    req.rawBody = buf.toString(encoding || 'utf8');\n  }\n}\n</code></pre> <p>In this function, we grab the bit stream buffer <code>buf</code>, and check that it is not null and that it is not empty (by checking that it has a length). Then we tack it onto the request <code>req</code> as a new property <code>rawBody</code>. We also convert the buffer to a string, using the encoding supplied, or fall back to <code>utf8</code> as a default. Now that the <code>rawBody</code> is added to the request, it will be available for use by subsequent middleware. We can add it to the body parser by modifying the code where we add the body parser to the app. </p> <pre><code>app.use(bodyParser.urlencoded({ verify: rawBodySaver}));\n</code></pre> <p>In the code above, we added options to our body parser initialisation. We set the <code>verify</code> option to the method we added above. </p> <p>Now, let's make a new middleware function to calculate the signature and compare it. We'll be able to call this middleware before our current code for responding to our Slack slash command. Making it a middleware function will also allow us to easily re-use it on other routes, if we want to add more slash commands, or other commands from Slack in the future. We'll make a new file to hold this code. We'll call it <code>signing.js</code>. </p> <p>In the new file, let's add this code:</p> <pre><code>const crypto = require('crypto');\n\nfunction checkSlackMessageSignature(req, res, next){\n    const timestamp = req.headers['x-slack-request-timestamp']; \n    const fiveMinutesAgo = Math.floor(Date.now() / 1000) - (60 * 5);\n\n    if (timestamp &lt; fiveMinutesAgo) {\n        return res.sendFail(401, \"mismatched timestamp\");\n    }\n\n    const signing_secret = process.env.SLACK_SIGNING_SECRET; \n\n    const slack_signature = req.headers['x-slack-signature']; \n    const [version, slack_hash] = slack_signature.split('=');\n\n    const sig_basestring = version + ':' + timestamp + ':' + req.rawBody;\n    const hmac = crypto.createHmac('sha256', signing_secret); \n    hmac.update(sig_basestring); \n    const our_hash = hmac.digest('hex');    \n\n    if (crypto.timingSafeEqual(Buffer.from(slack_hash), Buffer.from(our_hash))) {\n        return next(); \n    }\n    else {\n        return res.send(401, \"Invalid request signature\");\n    }\n}\n\nmodule.exports = checkSlackMessageSignature; \n</code></pre> <p>Let's take a look at this code. Firstly, we import the crypto (cryptography) library. We don't need to install this as a package, as it is built into Node.js. This library will allow us to perform the hash of the basestring to compare with the signature. </p> <p>Next, we create a function, with the standard Express middleware parameters: - <code>req</code>, representing the request data. - <code>res</code>, representing an output object that we return results to the user via. - <code>next</code>, representing a function to call if we want to hand control to the next middleware function in the chain. It can also be used to pass an error object back up if something goes wrong processing the request.</p> <p>Then, on the first few lines of the function, we get the timestamp Slack sends from the request headers, and check that it is within the last few minutes. Note the name of the header is all in lowercase, even though Slack specifies that the header is capitalised. This is because Express converts all header keys to lowercase when serving a request. </p> <p>After that, we retrieve the Slack Signing Secret from our environment variables. Let's get our Signing Secret from Slack and add it to the Code Capsules environment now. Head over to your Slack app dashboard, and click on \"Basic Information\" in the left-hand sidebar. Then scroll down to App Credentials, and look for the Signing Secret. Click \"Show\", and copy the secret. </p> <p></p> <p>Now head over to your Capsule on Code Capsules, and click on the Config tab. Add a new environment variable with Name <code>SLACK_SIGNING_SECRET</code> and paste in the value of the Signing Secret we copied above. Click \"Update &amp; Start Build\" to save the changes. </p> <p></p> <p>Ok, back to the function. After we retrieve the signing secret from the environment variables, we read out the hash calculated and sent by Slack from the headers using <code>const slack_signature = req.headers['x-slack-signature']</code>. This will be a string that looks something like <code>v0=xxxxxxxxxxxxxxxxxxxxxxx</code>, where the <code>xxxx</code> represents the actual hash value. We need to split the version identifier <code>v0</code> from the beginning of the string though, as this is not part of the hash value. We do this in the next line, <code>const [version, slack_hash] = slack_signature.split('=')</code>. Now we have both the version, and the hash string in variables that we can access. </p> <p>After this, we construct our basestring, made from the version we extracted above, the timestamp of the request, and the <code>rawBody</code> (which we extracted in our body parser <code>verify</code> function earlier). </p> <p>The next two lines are where we actually calculate the hash. First, we set up the <code>crypto</code> module with our crypto algorithm type <code>SHA256</code>, and with our unique Signing Secret. This allows us to then create an HMAC \u2013 or Hash Based Message Authentication code, which is the fancy name for the message signature. We then use the <code>update</code> method on our newly created HMAC to load in our basestring that we constructed above. </p> <p>Now that the crypto HMAC is primed with all the info it needs, we can call the <code>digest</code> function to actually calculate the hash. We pass in as a parameter <code>hex</code> to indicate that we want the result back in hexadecimal format, as this is the same format that Slack sends their calculated hash value in. </p> <p>Great, so now we have Slack's signature hash, and our hash. We need to check that they are the same, which will prove that the message was legitimately sent by Slack. We could just use a normal string compare, i.e. <code>if (slack_hash === our_hash)</code>, but there is a slight security issue with this, known as a timing attack. This type of attack is based on the knowledge that a normal string compare function takes a different amount of time to compare two strings, depending on how close the strings are to each other. An attacker can take advantage of this timing difference to repeatedly send messages and, based on the time for our server to respond, can guess at how close their hash is to what we are expecting. With much patience and many thousands of messages, an attacker could eventually guess our Signing Secret, compromising all our checks. </p> <p>Luckily, there is a simple way to protect from this, and it's built right into the <code>crypto</code> library. This is where we call <code>crypto.timingSafeEqual</code>. This compare always returns in the same amount of time, regardless of how close the hashes are to each other. Therefore, we don't give any extra information away to would-be attackers. </p> <p>Now, if the hashes are equal, from our <code>timingSafeEqual</code> test, we just call <code>return next()</code> which exits our function and passes control to the next middleware function (which will be our slash command handler). </p> <p>If the hashes are not equal, then we know this request is not genuinely from Slack, so we can end early and send a <code>401</code>, which is a standard HTTP code for <code>Unauthorized</code>. Basically, we boot the imposter out. </p> <p>Now, the last line in this file is <code>module.exports = checkSlackMessageSignature</code>. This allows our middleware function to be visible to other modules that import this file. </p> <p>Ok, now that we've got this middleware created, let's link it to our slash command handler. Head on back to the <code>index.js</code> file, and import the middleware function by adding this line near the top of the file: </p> <pre><code>const checkSlackMessageSignature = require('./signing'); \n</code></pre> <p>Now, we can navigate to our slack command handler, which started like this: <code>app.post('/slack/command/stats'</code>. Modify that to include a call to the message signature check before the actual handler, like this: </p> <pre><code>app.post('/slack/command/stats', [checkSlackMessageSignature, function(req,res){\n</code></pre> <p>Fantastic, now our app is secure. You can commit all the changes, and push it up to Git, which will kick off our final deploy to Code Capsules: </p> <pre><code>git add . \ngit commit -am 'added message signature checking'\ngit push origin\n</code></pre> <p>Once the code is up and running on Code Capsules, test it out to see that it still responds to the Slack slash command. Then you can try again from Postman or other similar apps, and see that it will not send any info without a valid signature (you can use <code>v0=a2114d57b48eac39b9ad189dd8316235a7b4a8d21a10bd27519666489c69b503</code> as an example <code>x-slack-signature</code> parameter): </p> <p></p>","title":"Adding verification"},{"location":"tutorials/build-slackbot-with-node/#things-to-try-next","text":"<p>What else can we do? It's almost endless!</p> <ul> <li>Add this code to an existing app you have built to get easy info straight from Slack!</li> <li>Add in more slash commands for more info \u2013 for example, you could get current user count on your app, number of database records etc. Basically, any information you could need for dev ops.</li> <li>Look at some of the other functionality Slack offers for integration; for example, using modals, or listening in for keywords in messages.</li> </ul>","title":"Things to Try Next"},{"location":"tutorials/connect-mongodb-atlas-to-code-capsules/","text":"","title":"How to Connect a MongoDB using MongoDB Atlas with your Code Capsules Application"},{"location":"tutorials/connect-mongodb-atlas-to-code-capsules/#what-is-mongodb-atlas","text":"<p>MongoDB Atlas is a database as a service that hosts and manages MongoDBs online. In some ways, this service is similar to Code Capsules. Instead of managing and hosting applications, MongoDB Atlas manages and hosts MongoDBs for you \u2013 leaving you to worry about working with your database. </p> <p>If you have a project idea or a project already hosted on Code Capsules that needs a database, this guide will help you. We'll walk step by step through creating an account with MongoDB Atlas and cover how to connect your application on Code Capsules to MongoDB Atlas.</p>","title":"What is MongoDB Atlas?"},{"location":"tutorials/connect-mongodb-atlas-to-code-capsules/#creating-an-account-organization-and-project-with-mongodb-atlas","text":"<p>First, create an account with MongoDB Atlas and log in. </p> <p>Your MongoDB Atlas account consists of two organizational tools \u2013 Organizations and Projects:</p> <ul> <li>Projects contain all the clusters that host your databases.</li> <li>Organizations contain all of the Projects that you've created. </li> </ul> <p>Let's start by creating an organization. Navigate to the \"Organizations\" tab on your dashboard and click \"Create an Organization\". Then:</p> <ol> <li>Name your organization.</li> <li>Choose your cloud service.</li> <li>Invite anyone you'd like to your organization, then hit \"Create Organization\".</li> </ol> <p>Next up is creating a project:</p> <ol> <li>Navigate to the \"Projects\" tab.</li> <li>Click \"New Project\" at the top right of the screen.</li> <li>Choose a name for your project and hit \"Next\".</li> <li>Add any necessary project members, then click \"Create Project\".</li> </ol> <p>Next, we'll set up a cluster that'll host your database.</p>","title":"Creating an Account, Organization, and Project with MongoDB Atlas"},{"location":"tutorials/connect-mongodb-atlas-to-code-capsules/#setting-up-a-cluster","text":"<p>After creating the project, you'll see a \"Build a Cluster\" button. Click it, and follow the instructions to set up a new cluster. You can choose a paid cluster or a free \"Shared Cluster\". These \"Shared Clusters\" are appropriate for small projects or for learning how to use MongoDB.</p> <p>MongoDB Atlas will begin to create your cluster \u2013 this can take a couple of minutes. While the cluster generates, we can set up some configurations for your database.</p>","title":"Setting up a cluster"},{"location":"tutorials/connect-mongodb-atlas-to-code-capsules/#access-configurations","text":"<p>MongoDB Atlas requires you to create a \"user\" in order to access the database in your cluster. You can think of \"users\" as administrator accounts.</p> <ol> <li>Navigate to the \"Database Access\" tab under \"Security\".</li> <li>Click \"Add New Database User\".</li> <li>Choose the \"Password\" authentication method and follow the instructions. <ul> <li>Make sure to select \"read and write to any database\" under \"Database User Privileges\".</li> </ul> </li> </ol> <p>Now we need to authorize an IP address to connect to the database. Navigate to the \"Network Access\" tab under \"Security\". You'll see a button \"Add IP Address\". Adding an IP address means only computers on that IP address can connect to the database. </p> <p>Click \"Add IP Address\". We have a couple of options for adding an IP address.</p> <ul> <li> <p>If you only want to access the database from your current IP address, hit \"Add Current IP Address\" (note: If you select this option, Code Capsules will not be able to access your database).</p> </li> <li> <p>If you already have an application on Code Capsules, or plan on hosting an application on Code Capsules, select \"Allow Access From Anywhere\".</p> </li> </ul> <p>By this time, the cluster hosting your database should be ready. Let's see how we can connect to it.</p>","title":"Access configurations"},{"location":"tutorials/connect-mongodb-atlas-to-code-capsules/#connecting-to-the-cluster","text":"<p>Under \"Data Storage\" on the dashboard:</p> <ol> <li>Click \"Clusters\".</li> <li>Find your cluster.</li> <li>Click \"Connect\". </li> </ol> <p>There are multiple ways to connect to the a MongoDB Atlas cluster - we want to connect the database to an application, so, click \"Connect your application\".</p> <p>MongoDB Atlas provides drivers for various programming languages to connect to their databases. Choose your driver and version, and check the \"Include full driver code example\" box to see the code you'll need to connect to your database.</p> <p>Below is their Python driver, with \"Fin\" as the user.  </p> <p>In your driver, you'll see something like this: <code>mongodb+srv://YOURUSERNAME:&lt;password&gt;@cluster0.e2fw3.mongodb.net/&lt;dbname&gt;?retryWrites=true&amp;w=majorhostity</code>. This is a URI. To connect your application to your database, copy and paste the driver into your code. In your URI, replace <code>&lt;password&gt;</code> and <code>&lt;dbname&gt;</code> with the user's password we created previously . </p> <p>If you plan on hosting your application on Code Capsules, we need to perform one last step. </p>","title":"Connecting to the Cluster"},{"location":"tutorials/connect-mongodb-atlas-to-code-capsules/#connecting-your-database-to-code-capsules","text":"<p>Code Capsules connects to your GitHub repository containing your application's code. Therefore, anyone can see your code. This means you should not push your URI to GitHub. If you did, anyone could use your database. To get around this, set up an environment variable in your code for your URI and set the environment variable on Code Capsules.</p> <p>For example, an environment variable in Python program would look like:</p> <pre><code>import os\n\nclient = pymongo.MongoClient(os.getenv('DATABASE-URI'))\ndb = client.test\n\n### Do something here\n</code></pre> <p>On Code Capsules you would then set an environment variable named <code>DATABASE-URI</code>, containing the URI. </p> <p>To set environment variables on Code Capsules, host your application on Code Capsules and navigate to the \"Config\" tab in your Capsule. Make sure to click \"Update\" when done.</p> <p></p>","title":"Connecting your Database to Code Capsules"},{"location":"tutorials/create-and-host-telegram-bot/","text":"<p></p> <p>This guide uses Python. You can find the NodeJS version here.</p> <p>In a previous tutorial, we created and hosted an API on Code Capsules. In this tutorial, we'll create a client for this API in the form of a Telegram bot. This will allow us to pull temperature, weather and exchange rate data on the go by messaging our bot in the Telegram app. </p> <p>We'll also learn how to host this bot on Code Capsules so it can be used by others. Along the way, we'll learn some key concepts about hosting bots securely and efficiently.</p> <p>Let's get started!</p>","title":"How to Create and Host a Telegram Bot on Code Capsules"},{"location":"tutorials/create-and-host-telegram-bot/#requirements","text":"<p>To create a Telegram bot, we'll need:</p> <ul> <li>Python 3.6+ installed.</li> <li>A GitHub account and Git installed.</li> <li>Virtualenv installed.</li> <li>A Telegram account.</li> <li>A Code Capsules account.</li> <li>An API on Code Capsules, created using the Personal API tutorial.</li> </ul>","title":"Requirements"},{"location":"tutorials/create-and-host-telegram-bot/#about-telegram-bots","text":"<p>Telegram bots appear as contacts on the Telegram interface. Users interact with Telegram bots by messaging them with commands \u2013 these are words preceded by a forward slash, e.g. <code>/weather</code>, or <code>/currency</code>. Commands sent to the bot's account on Telegram will be passed to the bot's backend code (in our case, this will be the code we host on Code Capsules).</p> <p>For example, when we send the command <code>/weather</code> to our bot later in this article, the bot will reply with the weather data from our personal API.</p> <p>Let's create a Telegram bot.</p>","title":"About Telegram Bots"},{"location":"tutorials/create-and-host-telegram-bot/#registering-a-bot-account-and-talking-to-the-botfather","text":"<p>To create a Telegram bot, we need to download Telegram and create a user account. You can use Telegram from either your PC or your phone, or both. </p> <p>Once you have a Telegram account, you can register a new bot by sending a message to BotFather, a bot managed by Telegram themselves. Search for \"BotFather\" and initiate a chat. From the chat interface, follow these steps:</p> <ol> <li>Press \"start\".</li> <li>Type <code>/newbot</code>.</li> <li>Choose a name for your bot.</li> <li>Choose a username for your bot (must end in \"bot\").</li> </ol> <p>Once you've chosen a username, the BotFather will reply with an authorisation token. This is a string that enables your bot to send requests to the Telegram Bot API, similar to the authorisation tokens we used to retrieve weather and exchange rate data in the personal API tutorial. Make sure to save this token somewhere safe and private.</p> <p>To see if your bot was successfully created, search for the bot's username. You should see the bot and be able to start a conversation with it. Right now, our bot won't reply to anything you send it, as it doesnt have any backend code yet. Let's change that. </p>","title":"Registering a Bot Account and Talking to the BotFather"},{"location":"tutorials/create-and-host-telegram-bot/#planning-and-setup","text":"<p>We're going to implement two commands for our bot.</p> <ul> <li>When we send the command <code>/weather</code>, our bot will reply with the weather data from the API we created. </li> <li>When we send the command <code>/currency</code>, our bot will reply with the exchange rates from USD to CAD, EUR, and ZAR.</li> </ul>","title":"Planning and Setup"},{"location":"tutorials/create-and-host-telegram-bot/#creating-a-virtual-environment-and-installing-requirements","text":"<p>First, we need to create a local directory. Give it the same name as our bot. Then, from this directory, open a terminal and create a Python virtual environment by entering the following command:</p> <pre><code>virtualenv env\n</code></pre> <p>Enter the virtual environment using the appropriate command for your system:</p> <ul> <li>Linux/MacOSX: <code>source env/bin/activate</code></li> <li>Windows: <code>env\\Scripts\\activate.bat</code></li> </ul> <p>The virtual environment will help manage our dependencies for when we host the bot on Code Capsules.</p> <p>To interact with the Telegram Bot API, we need to install the python-telegram-bot library, a Python wrapper for the Telegram Bot API. We'll also use the Python library <code>requests</code> to retrieve data from the weather and currency exchange rate API. To install these requirements, enter the following in your terminal:</p> <pre><code>pip install python-telegram-bot requests\n</code></pre>","title":"Creating a virtual environment and installing requirements"},{"location":"tutorials/create-and-host-telegram-bot/#retrieving-data-from-the-api","text":"<p>Now we can start coding. Create a file named <code>bot.py</code> in the same directory where we activated the virtual environment. In this file, enter the following code, replacing <code>YOUR-URL-HERE</code> with the URL pointing to the weather and exchange rate API hosted on Code Capsules.</p> <pre><code>import requests\n\nurl = 'YOUR-URL-HERE/GET'\ndata = requests.get(url) # requests data from API\ndata = data.json() # converts return data to json\n\n# Retrieve values from API\ncurr_temp = data['curr_temp']\ncad_rate = data['usd_rates']['CAD']\neur_rate = data['usd_rates']['EUR']\nzar_rate = data['usd_rates']['ZAR']\n\n\ndef return_weather():\n    print('Hello. The current temperature in Cape Town is: '+str(curr_temp)+\" celsius.\")\n\n\ndef return_rates():\n    print(\"Hello. Today, USD conversion rates are as follows: USD-&gt;CAD = \"+str(cad_rate)+\n    \", USD-&gt;EUR = \"+str(eur_rate)+\", USD-&gt;ZAR = \"+str(zar_rate))\n\n\nreturn_weather()\n\nreturn_rates()\n</code></pre> <p>Here we request the currency and weather data from the API and parse the temperature and conversion rates. Then we print out the data using <code>return_weather()</code> and <code>return_rates()</code>.</p> <p>Try it out! Run the program to ensure everything works, then continue. </p>","title":"Retrieving Data from the API"},{"location":"tutorials/create-and-host-telegram-bot/#creating-the-bot","text":"<p>Now we can get to creating the actual bot. At the top of the <code>bot.py</code> file, add this line:</p> <pre><code>from telegram.ext import Updater, CommandHandler\n</code></pre> <p>From the <code>python-telegram-bot</code> library, we import two classes: <code>Updater</code> and <code>CommandHandler</code>. We'll talk about these classes soon.</p> <p>We don't need to print our data anymore \u2013 instead, we'll return a string to our bot, so the bot can display it on Telegram. Replace <code>def return_weather()</code> and <code>def return_rates()</code> with the following:</p> <pre><code>def return_weather():\n    return 'Hello. The current temperature in Cape Town is: '+str(curr_temp)+\" celsius.\"\n\n\ndef return_rates():\n    return \"Hello. Today, USD conversion rates are as follows: USD-&gt;CAD = \"+str(cad_rate)+\", USD-&gt;EUR = \"+str(eur_rate)+\", USD-&gt;ZAR = \"+str(zar_rate)\n</code></pre> <p>Now, replace the <code>return_weather()</code> and <code>return_rates()</code> function calls with the code below:</p> <pre><code>def main():\n    TOKEN = \"YOUR-BOT-TOKEN-HERE\"\n    updater = Updater(token=TOKEN, use_context=True)\n    dispatcher = updater.dispatcher\n\n    weather_handler = CommandHandler(\"weather\", weather)\n    currency_handler = CommandHandler(\"currency\", currency)\n    start_handler = CommandHandler(\"start\", start)\n\n    dispatcher.add_handler(weather_handler)\n    dispatcher.add_handler(currency_handler)\n    dispatcher.add_handler(start_handler)\n\n    updater.start_polling()\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>At the top of our new <code>main</code> method, which will be called when this file is run, we instantiate <code>updater</code>, an instance of the Telegram library's <code>Updater</code> class. This object will retrieve commands sent to our bot and pass them to an instance of the <code>Dispatcher</code> class. We've assigned this <code>Dispatcher</code> instance to the variable <code>dispatcher</code> for further use.</p> <p>Next, we create three different <code>CommandHandler</code> classes, one for each command that can be sent to our bot: <code>/start</code>, <code>/weather</code> and <code>/currency</code>. We pass two arguments into each instantiation: the command text (without the preceding <code>/</code>), and a function to call. For example, when a user enters the command <code>/weather</code>, the <code>weather()</code> function will be called.</p> <p>Let's define that function, and the other two. Just above <code>def main()</code>, enter the following three function definitions. </p> <pre><code>def weather(update, context):\n    context.bot.send_message(chat_id=update.effective_chat.id, text=return_weather())\n\ndef currency(update, context):\n    context.bot.send_message(chat_id=update.effective_chat.id, text=return_rates())\n\ndef start(update, context):\n    context.bot.send_message(chat_id=update.effective_chat.id, text=\"Hi! I respond to /weather and /currency. Try them!\")\n</code></pre> <p>Each of these functions calls the <code>python-telegram-bot</code> function <code>send_message()</code> with the ID of the current chat and the appropriate text, either returned from one of our other functions or specified as a string. The <code>update</code> and <code>context</code> arguments are supplied automatically by the dispatcher.</p> <p>Back in our <code>main()</code> function, we use <code>dispatch.add_handler</code> to add all three handlers to our dispatcher.</p> <p>Finally, <code>updater.start_polling()</code> will begin polling for updates from Telegram. This means our code will regularly ask Telegram's servers if any commands have been sent to it. Upon receiving commands, the appropriate handler will be invoked. In the next section, we'll discuss the pitfalls of polling and consider an alternative.</p> <p>The code <code>bot.py</code> file should now look like the code below. Once again, make sure to replace <code>YOUR-URL-HERE</code> with the URL of the API you created in the API tutorial.</p> <pre><code>from telegram.ext import Updater, CommandHandler\nimport requests\n\n\nurl = 'YOUR-URL-HERE/GET'\ndata = requests.get(url) # requests data from API\ndata = data.json() # converts return data to json\n\n# Retrieve values from API\ncurr_temp = data['curr_temp']\ncad_rate = data['usd_rates']['CAD']\neur_rate = data['usd_rates']['EUR']\nzar_rate = data['usd_rates']['ZAR']\n\n\ndef return_weather():\n    return'Hello. The current temperature in Cape Town is: '+str(curr_temp)+\" celsius.\"\n\ndef return_rates():\n    return \"Hello. Today, USD conversion rates are as follows: USD-&gt;CAD = \"+str(cad_rate)+ \", USD-&gt;EUR = \"+str(eur_rate)+\", USD-&gt;ZAR = \"+str(zar_rate)\n\ndef weather(update, context):\n    context.bot.send_message(chat_id=update.effective_chat.id, text=return_weather())\n\ndef currency(update, context):\n    context.bot.send_message(chat_id=update.effective_chat.id, text=return_rates())\n\ndef start(update, context):\n    context.bot.send_message(chat_id=update.effective_chat.id, text='Hi! I respond to /weather and /currency. Try these!')\n\ndef main():\n    TOKEN = \"YOUR-BOT-TOKEN-HERE\"\n    updater = Updater(token=TOKEN, use_context=True)\n    dispatcher = updater.dispatcher\n\n    weather_handler = CommandHandler('weather', weather)\n    currency_handler = CommandHandler('currency',currency)\n    start_handler = CommandHandler('start',start)\n\n    dispatcher.add_handler(weather_handler)\n    dispatcher.add_handler(currency_handler)\n    dispatcher.add_handler(start_handler)\n\n    updater.start_polling()\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>Below is a conversation with a bot created using this program. Run <code>bot.py</code> and try it out yourself.</p> <p></p> <p>We won't be able to send messages to our bot if this program isn't running, so hosting it on Code Capsules will allow us to interact with the bot without having to keep this code permanently running on our development PC.</p> <p>While we could deploy our bot to Code Capsules in its current state, there is a downside to our current implementation that we should remedy first.</p>","title":"Creating the Bot"},{"location":"tutorials/create-and-host-telegram-bot/#polling-versus-webhooks","text":"<p>There are two ways for our <code>bot.py</code> file to receive commands sent to it on Telegram. Currently, the code polls Telegram constantly, regardless of whether the bot is in use. If we hosted this current version on Code Capsules, we would be wasting bandwidth, as the vast majority of polls would return nothing.</p> <p>Instead of polling Telegram for changes, we can create a webhook. This will allow us to receive commands as they are sent by Telegram users, without having to continuously ask Telegram servers for them.</p> <p>We'll set up a webhook by telling Telegram to send commands sent to our bot account to our bot's Code Capsules URL. Our dispatcher will then process the command using the appropriate handler and send back the requested information. </p>","title":"Polling versus Webhooks"},{"location":"tutorials/create-and-host-telegram-bot/#creating-a-webhook","text":"<p>To set up the webhook, replace the line <code>updater.start_polling()</code> in the <code>main</code> function with the code below:</p> <pre><code>    PORT = int(os.environ.get('PORT', '443'))\n    HOOK_URL = 'YOUR-CODECAPSULES-URL-HERE' + '/' + TOKEN\n    updater.start_webhook(listen='0.0.0.0', port=PORT, url_path=TOKEN, webhook_url=HOOK_URL)\n    updater.idle()\n</code></pre> <p>Here we start a webhook that will listen on our Code Capsules URL at TCP port 443 and with the path of our token. Thus, Telegram will relay commands sent to our bot to the following URL:</p> <pre><code>https://YOUR-CODECAPSULES-SUBDOMAIN.codecapsules.io:443/TOKEN\n</code></pre> <p>If you've completed some of our other backend tutorials, you will be familiar with setting up web servers that receive <code>GET</code> and <code>POST</code> requests to different routes. You can think of a webhook as a very simple HTTP server that is intended to be used by bots and automated services rather than humans.</p>","title":"Creating a webhook"},{"location":"tutorials/create-and-host-telegram-bot/#preparing-for-deployment","text":"<p>Before we push our code to GitHub and deploy it on Code Capsules, we need to make one small code change and create some files.</p>","title":"Preparing For Deployment"},{"location":"tutorials/create-and-host-telegram-bot/#creating-an-api-key-environment-variable","text":"<p>Because we'll push our code to GitHub, we need to hide our bot's authentication key. If we don't, anyone could use our authentication key and take control of our bot.</p> <p>Replace this line</p> <pre><code>TOKEN = \"YOUR-BOT-TOKEN-HERE\"\n</code></pre> <p>with the below</p> <pre><code>import os\nTOKEN = os.getenv('BOTAPIKEY')\n</code></pre> <p><code>os.getenv('BOTAPIKEY')</code> will look for an environment variable with the name \"BOTAPIKEY\". When we host our bot on Code Capsules, we'll set this environment variable to the key we received from the BotFather.</p> <p>With that done, we must now create some files before we can push our code to GitHub and deploy it on Code Capsules. </p>","title":"Creating an API key environment variable"},{"location":"tutorials/create-and-host-telegram-bot/#creating-a-procfile-and-requirementstxt","text":"<p>Code Capsules requires a couple of files to deploy our application: <code>Procfile</code> and <code>requirements.txt</code>. The first one tells Code Capsules how to run our application, and the second one tells it which libraries it needs to install.</p> <p>To create the <code>Procfile</code>:</p> <ol> <li>Navigate to the directory containing the <code>bot.py</code> file and enter the virtual environment.</li> <li>Create a file named <code>Procfile</code> (with no file extension).</li> <li>Open <code>Procfile</code>, enter <code>web: python3 bot.py</code>, and save the file.</li> </ol> <p>In the same directory, open a terminal and activate the virtual environment. Then enter <code>pip3 freeze &gt; requirements.txt</code> to generate a list of requirements for our Code Capsules server.</p> <p>Now we can push our code to GitHub. Create a GitHub repository and send the <code>requirements.txt</code>, <code>Procfile</code>, and <code>bot.py</code> files to the repository. </p>","title":"Creating a Procfile and requirements.txt"},{"location":"tutorials/create-and-host-telegram-bot/#deploying-the-bot-to-code-capsules","text":"<p>With all of the files sent to GitHub, let's deploy the bot to Code Capsules:</p> <ol> <li>Log in to Code Capsules and create a Team and Space as necessary.</li> <li>Link Code Capsules to the GitHub repository created previously.</li> <li>Enter your Code Capsules Space.</li> <li>Create a new Capsule, selecting the \"Backend\" capsule type.</li> <li>Select the GitHub repository containing the bot \u2013 leave \"Repo subpath\" empty and click \"Next\".</li> <li>Leave the \"Run Command\" blank and click \"Create Capsule\".</li> </ol> <p>We haven't supplied our webhook a URL yet, and we still need to create an environment variable for our bot's authorisation token. To create an environment variable:</p> <ol> <li>Navigate to your Capsule.</li> <li>Click the \"Config\" tab.</li> <li>Add an environment variable with the name \"BOTAPIKEY\" and give it your bot's API key as a value. Make sure to hit the \"Update Capsule\" button after adding the variable.</li> </ol> <p></p> <p>Next, let's supply our webhook with the correct domain.</p> <ol> <li>Navigate to the \"Overview\" tab.</li> <li>Copy the domain found under \"Domains\".</li> <li>Open the <code>bot.py</code> file and find the line <code>HOOK_URL = 'YOUR-CODECAPSULES-URL-HERE' + '/' + TOKEN</code>.</li> <li>Replace \"YOUR-CODECAPSULES_URL\" with the domain just copied.</li> <li>Commit and push these changes to GitHub.</li> </ol> <p>After pushing these changes, the Capsule will rebuild. Once this is done, the bot is ready. Give it a try! </p>","title":"Deploying the Bot to Code Capsules"},{"location":"tutorials/create-and-host-telegram-bot/#further-reading","text":"<p>We've covered a lot above, from creating a Telegram bot to the differences between webhooks and polling.</p> <p>If you're interested in learning more about what you can do with Telegram bots, check out Telegram's bot developer introduction. If you have some ideas but require a deeper understanding of the <code>python-telegram-bot</code> library, browse their GitHub repository.</p> <p>You can find a thorough explanation of webhooks in this blog post.</p>","title":"Further Reading"},{"location":"tutorials/create-nodejs-telegram-bot/","text":"<p></p> <p>Social media bots allow you to automate responses and reactions to posts or messages sent to the bot.</p> <p>In this tutorial, we'll extend a boilerplate Express application on Code Capsules to create a Telegram bot in Node.js that tracks and responds with current Ethereum prices.</p>","title":"Create and Host a Telegram Bot with Node.js on Code Capsules"},{"location":"tutorials/create-nodejs-telegram-bot/#getting-started","text":"<p>Navigate to the Express.js deployment guide and follow the instructions outlined there to deploy the boilerplate application. You will need to clone the forked repository to your local development environment to extend the functionality of the boilerplate application and make a Telegram bot. </p> <p>We need to install the <code>node_modules</code> for the boilerplate application before we can run it locally. Navigate to the project's root folder in a terminal or command prompt window and run <code>npm install</code> there.</p> <p>Now you can run <code>npm start</code> in the project's root folder to see how the application looks.</p>","title":"Getting Started"},{"location":"tutorials/create-nodejs-telegram-bot/#register-a-bot-account","text":"<p>You'll need a Telegram user account before you can create a Telegram bot. Head over to Telegram and create an account if you don't already have one. </p> <p>When you've signed in to Telegram, search for \"BotFather\" (a bot for managing all other Telegram bots) and start a new chat with it. Follow the steps below to register a new bot with the BotFather:</p> <ol> <li>Type <code>/start</code> and press send.</li> <li>Type <code>/newbot</code> and press send.</li> <li>Choose a name for your bot.</li> <li>Choose a username for your bot that ends in <code>bot</code>. </li> </ol> <p>The BotFather will respond with a message containing an access token for your newly created bot. This access token will allow our application to access the Telegram API and tell our bot what to do when receiving different messages from users. </p> <p>To confirm that your bot was created successfully, search for the bot's username. You should be able to see it and start a conversation with it, although it won't respond as we haven't written the bot's logic yet. </p>","title":"Register a Bot Account"},{"location":"tutorials/create-nodejs-telegram-bot/#set-up-the-development-environment","text":"<p>Your bot's access token is sensitive data and shouldn't be written in the code because anyone with access to your token can control your bot, so it's important to store it where it's safe and secure. The solution is to use environment variables to reference sensitive information in code.</p> <p>Create a <code>.env</code> file in the project's root folder and add the line below to it, replacing <code>&lt;YOUR_BOT_TOKEN&gt;</code> with the actual access token you were issued with by the BotFather:</p> <pre><code>BOT_TOKEN=&lt;YOUR_BOT_TOKEN&gt;\n</code></pre> <p>Add <code>.env</code> to the <code>.gitignore</code> file on a new line so that the <code>.env</code> file won't be uploaded to your remote repository when you push your changes.</p>","title":"Set Up the Development Environment"},{"location":"tutorials/create-nodejs-telegram-bot/#install-required-packages","text":"<p>Next, install the package for loading environment variables by running the command below from a terminal window in the project's root folder:</p> <pre><code>npm install dotenv\n</code></pre> <p>Also install the <code>axios</code> and <code>telegraf</code> packages by running the commands listed below from a terminal window in the project's root folder:</p> <pre><code>npm install axios\nnpm install telegraf\n</code></pre>","title":"Install Required Packages"},{"location":"tutorials/create-nodejs-telegram-bot/#create-the-bot-logic","text":"<p>Open <code>index.js</code> in the root folder and modify its contents with the code below:</p> <pre><code>const express = require('express')\nconst expressApp = express()\nconst axios = require(\"axios\");\nconst path = require(\"path\")\nconst port = process.env.PORT || 3000;\nexpressApp.use(express.static('static'))\nexpressApp.use(express.json());\nrequire('dotenv').config();\n\nconst { Telegraf } = require('telegraf');\n\nconst bot = new Telegraf(process.env.BOT_TOKEN);\n\nexpressApp.get(\"/\", (req, res) =&gt; {\n  res.sendFile(path.join(__dirname + '/index.html'));\n});\n\nbot.launch()\n</code></pre> <p>The code snippet above instantiates <code>express</code>, <code>axios</code> and <code>telegraf</code> objects, which we'll need to create the telegram bot. Notice how we use environment variables to reference our bot's access token in this line: <code>const bot = new Telegraf(process.env.BOT_TOKEN);</code>. </p> <p>Using the <code>bot.launch()</code> command isn't efficient from a bandwidth perspective, as our bot continously polls the Telegram API to check if it has received any new messages. Later in the tutorial, we will look at how to use webhooks in order to be more conservative with the bandwidth our bot uses. </p>","title":"Create the Bot Logic"},{"location":"tutorials/create-nodejs-telegram-bot/#add-bot-commands","text":"<p>Now it's time to add the logic for the commands which tell our bot how to respond to different messages. Add the code below to <code>index.js</code> just above the <code>bot.launch()</code> line: </p> <pre><code>bot.command('start', ctx =&gt; {\n  console.log(ctx.from)\n  bot.telegram.sendMessage(ctx.chat.id, 'Hello there! Welcome to the Code Capsules telegram bot.\\nI respond to /ethereum. Please try it', {\n  })\n})\n\nbot.command('ethereum', ctx =&gt; {\n  var rate;\n  console.log(ctx.from)\n  axios.get(`https://api.coingecko.com/api/v3/simple/price?ids=ethereum&amp;vs_currencies=usd`)\n  .then(response =&gt; {\n    console.log(response.data)\n    rate = response.data.ethereum\n    const message = `Hello, today the ethereum price is ${rate.usd}USD`\n    bot.telegram.sendMessage(ctx.chat.id, message, {\n    })\n  })\n})\n</code></pre> <p>The first command is a startup message, which is triggered when a user sends a <code>/start</code> message to the bot. The startup message contains a greeting that tells the user which other commands the bot can respond to, in this case, the <code>/ethereum</code> command.</p> <p>When a user sends an <code>/ethereum</code> message, the bot first checks for the latest price of ethereum at CoinGecko then send it to the user. </p>","title":"Add Bot Commands"},{"location":"tutorials/create-nodejs-telegram-bot/#run-bot-locally","text":"<p>Now that our bot can respond to users if they send it <code>/start</code> or <code>/ethereum</code> messages, run <code>npm start</code> in a terminal window while in the project's root folder to test this functionality. </p> <p>Send your bot <code>/start</code> and <code>/ethereum</code> messages in Telegram, and it should respond with the correct messages.</p> <p></p>","title":"Run Bot Locally"},{"location":"tutorials/create-nodejs-telegram-bot/#polling-vs-webhooks","text":"<p>Earlier on, we mentioned that the <code>bot.launch()</code> command uses polling, which isn't the best practice when deploying any application to production. Using webhooks is a good alternative to polling, as it ensures our bot receives commands as they are sent by Telegram users, as opposed to constantly polling or asking the Telegram API for them.</p> <p>Add the code below to the <code>index.js</code> file to add a webhook to our bot and comment out the <code>bot.launch()</code> line:</p> <pre><code>expressApp.use(bot.webhookCallback('/secret-path'))\nbot.telegram.setWebhook('&lt;YOUR_CAPSULE_URL&gt;/secret-path')\n\n.\n.\n.\n\n// bot.launch()\n\nexpressApp.listen(port, () =&gt; console.log(`Listening on ${port}`));\n</code></pre> <p>Navigate to the capsule you deployed at the start of this tutorial and copy its domain from the \"Overview\" tab. In the code snippet above replace <code>&lt;YOUR_CAPSULE_URL&gt;</code> with the domain you just copied.</p>","title":"Polling vs Webhooks"},{"location":"tutorials/create-nodejs-telegram-bot/#deploying-the-bot","text":"<p>On Code Capsules, navigate to the \"Configure\" tab of your capsule and add a <code>BOT_TOKEN</code> environment variable giving it the value of your bot's access token. </p> <p></p> <p>Now head over to your local development environment and commit your changes if you haven't already. Run <code>git push</code> in a terminal window while in the project's root folder to deploy your bot to production!</p>","title":"Deploying the Bot"},{"location":"tutorials/creating-and-hosting-a-flask-api/","text":"<p></p> <p>An API, or Application Programming Interface, is a tool enabling developers to interact with data online. Imagine: you navigate to some website and see your location's temperature displayed on their homepage. How did they present this information?</p> <p>Without a doubt, they used an API. APIs are hosted on a server and operate as an access point between the user and some data. </p> <p>Part of this guide takes a look at the weatherstack API \u2013 an API providing weather data. For the website to retrieve your location's temperature, they would've sent a request to an API like weatherstack. In the request, they would include information about your computer's location. weatherstack's API would then return weather data related to your locale, such as the temperature and cloud cover. The weather website will then display this data on their homepage for you to view. </p> <p>In this tutorial, we'll learn how to create a personal API with Python (using Flask). Our API will use data from the weatherstack and OpenExchangeRates APIs to give us up-to-the-minute USD exchange rates and the temperature of a given city. </p> <p>We'll host our API on Code Capsules so that anyone will be able to request information from it, no matter their location. </p>","title":"Creating and Hosting an API with Flask and Code Capsules"},{"location":"tutorials/creating-and-hosting-a-flask-api/#prerequisites","text":"<p>Before starting, we'll need a GitHub account and knowledge of how to push code from a local repository to a remote repository. </p> <p>Also ensure you've installed the following:</p> <ul> <li>Git</li> <li>Python 3.XX+</li> <li>Virtualenv </li> </ul>","title":"Prerequisites"},{"location":"tutorials/creating-and-hosting-a-flask-api/#setting-up-our-environment","text":"<p>First, let's set up a virtual Python environment using Virtualenv. Virtualenv provides a clean Python install with no third-party libraries or packages, allowing us to work on this project without interfering with the dependencies of our other projects.</p> <ol> <li>Open your terminal and create an empty folder.</li> <li>Navigate to the folder via your terminal, and enter: </li> </ol> <pre><code>virtualenv env\n</code></pre> <p>To activate the virtual environment, enter one of the following:</p> <p>Linux/MacOSX <pre><code>source env/bin/activate\n</code></pre></p> <p>Windows <pre><code>\\env\\Scripts\\activate.bat\n</code></pre></p> <p>If the virtual environment has activated correctly, you'll see <code>(env)</code> to the left of your name in the terminal.</p> <p></p>","title":"Setting Up Our Environment"},{"location":"tutorials/creating-and-hosting-a-flask-api/#installing-the-dependencies","text":"<p>Now that we've activated the virtual environment, let's take a look at the packages we'll use to create our API: </p> <ul> <li>Flask is a minimal web development framework for Python. Flask provides resources and tools for building and maintaining web applications, websites, and more.</li> <li>Gunicorn is a WSGI server that will help serve our Python application (the API hosted on Code Capsules). </li> <li>Requests is a Python library we will use to interact with APIs.</li> </ul> <p>From your terminal where you activated the virtual environment, install these packages with: </p> <pre><code>pip3 install flask gunicorn requests\n</code></pre> <p>Note pip will have automatically been installed when you set the virtual environment if not you can follow this guide to install it.</p>","title":"Installing the Dependencies"},{"location":"tutorials/creating-and-hosting-a-flask-api/#registering-accounts-on-openexchangerates-and-weatherstack","text":"<p>Our API will return the current temperature of a chosen city and the USD exchange rates for three currencies. We'll create our API by combining data from two other APIs \u2013 weatherstack and OpenExchangeRates. As their names suggest, weatherstack will provide the temperature data, and OpenExchangeRates the exchange rate data. </p> <p>Registering an account is required so that we can receive a unique API key. An API key is a password that lets us use a particular API. In APIs with more sensitive data, these are used to prevent unauthorised access, but for open APIs like weatherstack and OpenExchangeRates, they're used for rate limiting to prevent users from sending too many requests at once and overwhelming the system.</p>","title":"Registering Accounts on OpenExchangeRates and weatherstack"},{"location":"tutorials/creating-and-hosting-a-flask-api/#creating-our-accounts","text":"<p>First, let's register an account on OpenExchangeRates. Navigate to here and:</p> <ol> <li>Sign up and log in.</li> <li>On the dashboard, click \"App IDs\". </li> <li> <p>Take note of your \"App ID\" (API key) you will need to paste it into the code below.</p> <p></p> </li> </ol> <p>Obtaining the weatherstack API key is similar:</p> <ol> <li>Create a free account on weatherstack</li> <li> <p>Log in and take note of the API key presented in the control panel, you will need to paste it into the code below.</p> <p></p> </li> </ol> <p>Now we can retrieve data from the OpenExchangeRates and weatherstack APIs using our API keys. Let's try that out now.</p>","title":"Creating our accounts"},{"location":"tutorials/creating-and-hosting-a-flask-api/#getting-exchange-rates","text":"<p>First, let's see how requesting data from OpenExchangeRates works. Create a file named <code>app.py</code> and open it.</p> <p>To request data from an API, we need an endpoint for the type of data we want. APIs often provide multiple endpoints for different information \u2013 for example, a weather API may have one endpoint for temperature and another for humidity.</p> <p>In the code below, the <code>EXCHANGE_URL</code> variable contains the OpenExchangeRates endpoint for retrieving the latest exchange rates. Enter it in your <code>app.py</code> file now, replacing <code>YOUR-API-KEY-HERE</code> with the OpenExchangeRates API key you saved earlier.</p> <pre><code>import requests\n\nEXCHANGE_URL = 'https://openexchangerates.org/api/latest.json?app_id=YOUR-API-KEY-HERE'\nexchange_data = requests.get(EXCHANGE_URL)  \n</code></pre> <p>Note that we are including a secret API key in our codebase, which is bad practice. In later tutorials, you'll see how to use environment variables with Code Capsules for better security.</p> <p>In this code, we're using the <code>requests</code> module to fetch data from the API. It does this over HTTPS, the same way your browser would. In fact, if you copy the value of <code>EXCHANGE_URL</code> to your browser now, you'll see exactly what data your code is fetching.</p> <p>Note the format of the URL:</p> <ul> <li><code>https://openexchangerates.org</code> is the website.</li> <li><code>/api/</code> is the path containing the API portion of the website.</li> <li><code>latest.json</code> is the API endpoint which returns the latest exchange rates.</li> <li><code>?app_id=YOUR-API-KEY-HERE</code> specifies our password for accessing the API.</li> </ul> <p>OpenExchangeRates has many other endpoints, each of which provides a different set of data. For example, you could request data from the <code>historical</code> endpoint (<code>https://openexchangerates.org/api/historical/</code>) to access past exchange rates.</p> <p>Now let's print the data using the <code>.json()</code> method. This method converts the data from raw text into in JSON (Javascript Object Notation), which we can work with like a Python dictionary. </p> <pre><code>print(exchange_data.json())\n</code></pre> <p>When running the program, you will see a lot of output. This is because we are currently retrieving every exchange rate OpenExchangeRates provides. Let's modify the code to only receive exchange rates from USD to EUR, CAD, and ZAR. </p> <p>Add the following lines below <code>EXCHANGE_URL</code>:</p> <pre><code>EXCHANGE_PARAMS =  {'symbols':'ZAR,EUR,CAD'}\n\nexchange_data = requests.get(EXCHANGE_URL, EXCHANGE_PARAMS)  \n</code></pre> <p>Then change your <code>print</code> statement as follows:</p> <pre><code>print(exchange_data.json()['rates']) # Print only exchange rates\n</code></pre> <p>Now we've included an <code>EXCHANGE_PARAMS</code> variable. Providing parameters to an API endpoint will alter which data is retrieved. The parameters available will depend on the API endpoint. You can find a list of parameters for the <code>latest</code> endpoint here. </p> <p>In our case, we supplied the parameter <code>symbols</code> with the three currencies we want data for. When you run the program again, you should only see three exchange rates.  </p>","title":"Getting exchange rates"},{"location":"tutorials/creating-and-hosting-a-flask-api/#getting-the-temperature","text":"<p>Now that we've obtained the exchange rates, we can retrieve the temperature for a city. Let's modify the program by adding the following below the <code>print</code> statement. Make sure to replace <code>YOUR-API-KEY-HERE</code> with the weatherstack API key.</p> <pre><code>WEATHER_URL = 'http://api.weatherstack.com/current?access_key=YOUR-API-KEY-HERE'\nWEATHER_PARAMS = {'query':'Cape Town'}\n\nweather = requests.get(WEATHER_URL, params=WEATHER_PARAMS) \n\nprint(weather.json()['current']['temperature']) # will print only the temperature; print without indexing to see all the values returned!\n</code></pre> <p>Here we retrieve the temperature for Cape Town, South Africa. You can replace \"Cape Town\" with another city of your choice to see its temperature. </p>","title":"Getting the temperature"},{"location":"tutorials/creating-and-hosting-a-flask-api/#creating-our-api","text":"<p>Now we'll get to creating the API with Flask. Our API will package the weatherstack and OpenExchangeRates data together in a single endpoint.</p> <p>This means we can build other applications later which will be able to retrieve all of the data above by calling <code>requests.get(MY_CODE_CAPSULES_URL)</code>. </p>","title":"Creating our API"},{"location":"tutorials/creating-and-hosting-a-flask-api/#beginning-steps-with-flask","text":"<p>First, we can remove all the print statements in our <code>app.py</code> file. Afterwards, edit the file accordingly:</p> <pre><code>import requests\nfrom flask import Flask, jsonify\n\nEXCHANGE_URL = 'https://openexchangerates.org/api/latest.json?app_id=YOUR-API-KEY-HERE'\nEXCHANGE_PARAMS =  {'symbols':'ZAR,EUR,CAD'}\n\nWEATHER_URL = 'http://api.weatherstack.com/current?access_key=YOUR-API-KEY-HERE'\nWEATHER_PARAMS = {'query':'Cape Town'}\n\napp = Flask(__name__) \n\n@app.route('/') # Create main page of web-application\ndef index():\n    return \"Welcome to my API!\" # Display text on main page\n\nif __name__ == '__main__':\n    app.run() # Run the application\n</code></pre> <p>After instantiating a Flask object, we add <code>@app.route('/')</code>. The <code>@</code> symbol is known as a Python decorator \u2013 their use isn't very important for our application. Just understand that the below creates the homepage for your API:</p> <pre><code>@app.route(`/`)\ndef index():\n    return \"Welcome to my API!\"\n</code></pre> <p>Once the API is hosted on Code Capsules, you'll see \"Welcome to my API!\" when you visit the app's URL which you can find under the domains section of the capsule.</p> <p>Next, we'll implement the ability to \"get\" (using <code>requests.get()</code>) our data from the API when it's hosted. </p>","title":"Beginning steps with Flask"},{"location":"tutorials/creating-and-hosting-a-flask-api/#combining-the-apis","text":"<p>We've already written code to retrieve our data \u2013 now we just need to combine it and create an endpoint to fetch it. We'll do this by creating a new endpoint called <code>/get</code> that returns our selected data.</p> <pre><code>@app.route('/get',methods=['GET']) # Add an endpoint to access our API\ndef get():\n    exchange_data = requests.get(EXCHANGE_URL, EXCHANGE_PARAMS)  \n    weather = requests.get(WEATHER_URL,params=WEATHER_PARAMS) \n\n    return jsonify({\n        'usd_rates': exchange_data.json()['rates'],\n        'curr_temp': weather.json()['current']['temperature']\n    })\n</code></pre> <p><code>@app.route('/get', methods=['GET'])</code> adds an endpoint, <code>/get</code>, allowing us to retrieve data from the API. When Code Capsules gives us a URL for our API, we'll be able to use this URL plus the endpoint <code>/get</code> to retrieve data from our API, combining the inputs from the two APIs we are calling out to in turn.</p> <p>Next, the statement below returns our data in JSON:</p> <pre><code>return jsonify({\n    'usd_rates' : exchange_data.json()['rates'],\n    'curr_temp' : weather.json()['current']['temperature']\n    })\n</code></pre> <p>Here, the exchange rate data is stored under <code>'usd_rates'</code> and the temperature data under <code>curr_temp</code>. This means that if we request our data and store it in a variable like <code>my_data</code>, we'll be able to print out the exchange rates by executing <code>print(my_data['usd_rates'])</code>, and print the temperature by executing <code>print(my_data['curr_temp'])</code>.</p> <p>The API is complete \u2013 only a few steps left before hosting it on Code Capsules.</p>","title":"Combining the APIs"},{"location":"tutorials/creating-and-hosting-a-flask-api/#freezing-requirements-and-creating-the-procfile","text":"<p>Before sending our API to GitHub (so Code Capsules can host it), we need the <code>requirements.txt</code> file, and a Procfile.  </p> <p>The <code>requirements.txt</code> file contains information about the libraries we've used to make our API, which will allow Code Capsules to install those same libraries when we deploy it. To create this file, first ensure your terminal is still in the virtual environment. Then, in the same directory as the <code>app.py</code> file, enter <code>pip3 freeze &gt; requirements.txt</code> in your terminal.</p> <p>Next, create a new file named <code>Procfile</code> in the same directory. Open the <code>Procfile</code> and enter:</p> <pre><code>web: gunicorn app:app\n</code></pre> <p>This tells Code Capsules to use the Gunicorn WSGI server to serve the HTTP data sent and received by our Flask API.</p>","title":"Freezing Requirements and Creating the Procfile"},{"location":"tutorials/creating-and-hosting-a-flask-api/#hosting-the-api-on-code-capsules","text":"<p>The API is now ready to host on Code Capsules. Follow these steps to get it online:</p> <ol> <li>Create a remote repository on GitHub.</li> <li>Push the <code>Procfile</code>, <code>requirements.txt</code>, and <code>app.py</code> files to the repository.</li> <li>Link the repository to your Code Capsules account following this guide.</li> <li>Create a new Team and Space (as necessary).</li> </ol> <p>With the repository linked to Code Capsules, we just need to store the API on a Capsule:</p> <ol> <li>Create a new Capsule.</li> <li>Choose Backend Capsule and continue.</li> <li>Select your product type and GitHub repository, click next. </li> <li>Leave the \"Run Command\" field blank (our <code>Procfile</code> handles this step).</li> <li>Create the Capsule.</li> </ol> <p>Once the Capsule has built, the API is hosted! Let's take a quick look at how to interact with it.</p>","title":"Hosting the API on Code Capsules"},{"location":"tutorials/creating-and-hosting-a-flask-api/#viewing-and-interacting-with-our-api","text":"<p>Once the Capsule has been built, Code Capsules will provide you with a URL (found in the \"Overview\" tab). Enter the URL in your browser, and you'll be greeted with \"Welcome to my API!\". To view the API data, add <code>/get</code> to the end of the URL. </p> <p>Depending on your browser (Google Chrome was used below), you'll see something like this:</p> <p></p> <p>Now try interacting with the API through code. In a new file, enter the following, replacing the URL with your Code Capsules URL (ensure <code>/get</code> is at the end of the URL):</p> <pre><code>import requests\n\nMY_URL = 'https://my-code-capsules-url.codecapsules.space/get'\n\napi_data = requests.get(MY_URL) \n\nprint(api_data.json())\n</code></pre> <p>All done!</p>","title":"Viewing and interacting with our API"},{"location":"tutorials/creating-and-hosting-a-flask-api/#further-reading","text":"<p>We've learned a lot about APIs; how to interact with them, how to use API endpoints, and how to create and host an API with Flask and Code Capsules. If you'd like a more in-depth look at APIs, check out this article.</p> <p>If you're interested in learning more about Flask or want to know what else you can do with it, start with their tutorial or their documentation.</p>","title":"Further Reading"},{"location":"tutorials/customising-domain/","text":"<p></p> <p>In this tutorial, we'll set up a custom domain name for your website or application hosted on Code Capsules.</p>","title":"Customising Your Domain on Code Capsules"},{"location":"tutorials/customising-domain/#why-custom-domains-and-how-do-they-work","text":"<p>Custom domains garner name recognition for your web-application or website. Consider the Google search-engine: without a domain, you would need to type in the IP address for it. This would be far more difficult to remember than the URL www.google.com \u2013 instantly recognizable. </p> <p>Web-addresses like www.google.com act as placeholders for an IP address and help us remember the website. When you type a URL in your search bar, your computer sends a request with the URL to the Domain Name System (DNS) \u2013 a cluster of servers worldwide containing domain names and corresponding IP addresses. The DNS then returns the URL's corresponding IP address, and you connect to the website you were trying to reach. </p> <p>Following this guide, we'll learn how to buy a domain and route it to a Code Capsules hosted web-application. Along the way, we'll learn more about the DNS and related topics.</p>","title":"Why Custom Domains and How Do They Work?"},{"location":"tutorials/customising-domain/#prerequisites","text":"<p>To complete this tutorial, we'll need:</p> <ul> <li>A web-application hosted on Code Capsules. </li> <li>A valid payment method (credit card, PayPal, cryptocurrency, bank transfer) to purchase a custom domain.</li> </ul>","title":"Prerequisites"},{"location":"tutorials/customising-domain/#where-to-buy-a-domain","text":"<p>Domain Registrars are businesses accredited to sell domains. We'll purchase a domain from the registrar www.gandi.net. Some things to keep in mind when choosing a domain name:</p> <ul> <li> <p>Domains that don't contain highly sought after words are usually inexpensive. </p> </li> <li> <p>You can save on domains by using less popular Top-level domains(TLD's) \u2013 for example: rather than register a \".com\" website, register a \".info\" website.</p> </li> </ul> <p>Keeping these tips in mind, let's purchase a domain.</p>","title":"Where to Buy a Domain"},{"location":"tutorials/customising-domain/#purchasing-a-domain-from-gandi","text":"<p>To purchase a domain on Gandi:</p> <ol> <li>Navigate to www.gandi.net.</li> <li>Enter the domain you want in the domain search box (ex: https://www.lincolnsportfolio.co.za)</li> <li>Add the domain to the shopping cart.</li> <li>Checkout by clicking the shopping cart at the top right of the screen.</li> <li>Decide how many years you'd like to host the domain, and press the Checkout button.</li> </ol> <p>Follow the prompts to create an account and purchase your domain. Then log in to Gandi.net with your new account and click the \"Domain\" button on the dashboard.</p> <p></p> <p>If Gandi has processed the domain, find it under the \"Active\" tab \u2013 if it's still processing, view it under the \"Pending\" tab. Processing a domain can take some time.</p> <p>Before routing the new domain to a web application, we have something left to consider \u2013 the security of your web-application.</p>","title":"Purchasing a domain from Gandi"},{"location":"tutorials/customising-domain/#http-vs-https","text":"<p>Domain names are one portion of a URL (Uniform Resource Locator) \u2013 Google's domain name is google.com, and the URL is http://www.google.com. Similarly, example.com is a domain name, and http://www.example.com is the URL associated with it.</p> <p>HTTP stands for Hypertext Transfer Protocol. When you see HTTP beginning a URL such as http://www.google.com, you know that the information retrieved by entering this address returns in clear text. This means data is vulnerable when interacting with this website, presenting a problem for any website dealing with sensitive information. The alternative is HTTPS \u2013 Hypertext Transfer Protocol Secure. </p> <p>HTTPS encrypts data sent between you and the server that you're connected to. Because of the security risks associated with HTTP, many websites \"force\" an HTTPS connection. Try entering http://www.google.com in your web browser. You'll notice the <code>http</code> portion automatically becomes <code>https</code>. </p> <p>Like the Google example, we'll make sure that if a user attempts to connect via <code>http://www.yourwebsitehere.com</code>, they'll redirect to <code>https:/www.yourwebitehere.com</code>. </p> <p>Setting up HTTPS is a quick process with Gandi \u2013 let's do that for your domain.</p>","title":"HTTP vs. HTTPS"},{"location":"tutorials/customising-domain/#setting-up-https-for-your-domain","text":"<p>To set up HTTPS with the domain, we need to register a free SSL (Secure Sockets Layer) certificate. In short, an SSL certificate helps encrypt the data sent when connected via HTTPS.</p> <p>To register an SSL certificate for our domain we must:</p> <ol> <li> <p>Click on the domain under the active tab.</p> </li> <li> <p>Navigate to the Web Forwarding tab.</p> </li> <li> <p>Click Create at the top right.</p> </li> <li> <p>From the Address drop-down menu, choose \"HTTP:// + HTTPS://\"</p> </li> <li> <p>Type \"www\" in the textbox to the right. </p> </li> <li> <p>From the Address to forward to drop-down menu, choose \"HTTPS://\"</p> </li> <li> <p>Type in the name of the domain. </p> </li> <li> <p>Choose \"Permanent\" under Type of web forwarding</p> <p></p> </li> <li> <p>The above image shows an example form \u2013 click create when done.</p> </li> <li> <p>Repeat this process, but choose \"http://\" in the Address drop-down and type \"*\" in the textbox next to it.</p> </li> </ol> <p>This will forward any users connect to <code>http://www.yourdomainhere.tld</code> or <code>http://yourdomainhere.tld</code> to <code>https://yourdomainhere.tld</code> \u2013 it forces users to take advantage of HTTPS. After creating this forwarding address, Gandi automatically creates an SSL certificate. This can take some time to process. </p> <p>You'll need to verify your email address with Gandi before receiving the SSL certificate, so check your email for a verification link from Gandi.</p> <p>Now that the domain has an SSL certificate, we'll route your Code Capsules web-application to the domain. Navigate to your domain on the Gandi dashboard.</p>","title":"Setting Up HTTPS for Your Domain"},{"location":"tutorials/customising-domain/#routing-your-web-application-to-the-domain","text":"<p>Click the \"DNS Records\" tab at the top of the page. DNS records contain your domain's \"information\". When users enter your domain in their search bar, their computer will receive these records (or information). </p> <p>Gandi supplies numerous DNS records with default values upon domain creation. We'll only concern ourselves with entries containing the \"A\" and \"CNAME\" types.</p> <p>An A record stores the IP address of the server that hosts your web-application (in this case, Code Capsules). When you type in a domain name, your computer requests the A record associated with the domain from the DNS. The DNS returns the A record containing the IP address \u2013 this is what you finally connect to.</p> <p>Let's modify the default A record to route to your web-application:</p> <ol> <li> <p>On Code Capsules, navigate to the Capsule you wish to route to your new domain.</p> </li> <li> <p>Click Overview then Add A Custom Domain.</p> </li> <li> <p>Copy the supplied IP address and type in the name of the web-address purchased.</p> </li> <li> <p>Click Create Domain.</p> </li> <li> <p>At the DNS record tab in domain view on Gandi, edit the entry with \"A\" as the type.</p> </li> <li> <p>Enter \"@\" for its name and paste the Code Capsules supplied IP address in the IPv4 address text box.</p> </li> <li> <p>Click create.</p> </li> </ol> <p>It may take up to 3 hours for these changes to process. View your web-application by typing <code>https://yourdomainname.tld</code>, replacing your domain name with \"yourdomainname\" and \".tld\" with your extension (such as .com).</p> <p>Notice that if you type <code>https://www.yourdomainhere.tld</code>, you'll receive a 404 error. To fix this, we'll add a new \"CNAME\" record. A CNAME is like an alias for a domain \u2013 we're going to create one that tells the DNS that it should direct users who enter the leading \"www.\" to the same place as those who leave it out. </p> <p>To allow users to enter in \"www.\" before your domain name:</p> <ol> <li> <p>Return to Code Capsules and press the Add A Custom Domain button again.</p> </li> <li> <p>Under domain name, enter <code>www.yourdomainname.tld</code>, replacing your name and TLD appropriately.</p> </li> <li> <p>Return to the DNS record tab on Gandi, and press Add at the top right.</p> </li> <li> <p>Choose the CNAME type.</p> </li> <li> <p>Enter \"www\" in the name text-box.</p> </li> <li> <p>Type your default Code Capsules web-application URL under Hostname (find this in the \"Overview\" tab in your web-application's Capsule), with a period at the end. It should look like the below:     </p> </li> <li> <p>Click create.</p> </li> </ol> <p>You can now view your web-application by entering either <code>https://yourdomainname.tld</code> or <code>https://www.yourdomainname.tld</code>. Once more, it may take up to 3 hours for these changes to process.  </p>","title":"Routing Your Web-application to The Domain"},{"location":"tutorials/customising-domain/#what-next","text":"<p>We've learned how to purchase, secure, and configure a domain, route a domain to your Code Capsules application, and even a little bit about DNS. </p> <p>If you're interested, there is still a lot to learn about DNS. A fine place to start is Amazon Web Services' page on DNS. </p> <p>If you'd like to know about the rest of the DNS records associated with your new domain, this Google help page contains a good overview</p> <p>Finally, if you'd like to read more about how the HTTP protocol works, this Mozilla Developers Network page is a good place to start.</p>","title":"What Next?"},{"location":"tutorials/develop-persistent-sleep-tracker-part-1/","text":"<p></p>","title":"Developing a Persistent Sleep Tracker Part 1: Handling Users with Flask-Login"},{"location":"tutorials/develop-persistent-sleep-tracker-part-1/#introduction","text":"<p>In this two-part tutorial series, we'll learn how to create a sleep tracker web application hosted on Code Capsules. Users will register an account with the sleep tracker and log in. To track their sleep data, users will enter a date and number of hours slept. We'll present users with a graph showing the sleep data they've logged, so users can get a visual representation of their sleep habits over time. </p> <p>Throughout this tutorial series, we'll use many tools to create an interactive experience. We'll learn how to: </p> <ul> <li>Create a user login and register system with Python's Flask.</li> <li>Use a MongoDB NoSQL database to store data.</li> <li>Create interactive Plotly graphs. </li> </ul> <p>This tutorial series is best suited for those with some Python, HTML, and Flask experience. But even if you feel you don't have much experience with these, don't worry. We'll walk through this application step-by-step. Let's get started! </p>","title":"Introduction"},{"location":"tutorials/develop-persistent-sleep-tracker-part-1/#mongodb-data-capsule","text":"<p>One of the most important aspects of this tutorial is using a Mongo Database (MongoDB). With this MongoDB, we can track users' login information and sleep data. MongoDB is a NoSQL databases, which means we can store data easily, in variable formats, without having to first create tables, as we would have to with a traditional SQL databse. If you're unfamiliar with NoSQL databases or MongoDB in general, take a look at this explainer by the MongoDB organization. </p> <p>Follow this short tutorial to create a MongoDB data capsule that we'll use to store the user data for this sleep tracker application. This step is extremely important \u2013 without a database, our application will not function. </p> <p>Once you've set up a MongoDB data capsule, continue with this tutorial.</p>","title":"MongoDB Data Capsule"},{"location":"tutorials/develop-persistent-sleep-tracker-part-1/#requirements","text":"<p>In addition to creating a MongoDB Data Capsule, make sure you have the following:</p> <ul> <li>Git installed and a registered GitHub account.</li> <li>Virtualenv installed. </li> <li>A registered Code Capsules account.</li> </ul>","title":"Requirements"},{"location":"tutorials/develop-persistent-sleep-tracker-part-1/#project-setup-and-introduction","text":"<p>Creating this sleep tracker will be a two-part process. First, we will create a login and registration page and a user management backend. Second, we will create a page where users enter their sleep data and view a graph. </p> <p></p> <p></p> <p>This tutorial will focus on the first part: dealing with user management. To start, create a <code>sleep-tracker</code> directory somewhere on your computer. All of our project's files will be in this directory.</p>","title":"Project Setup and Introduction"},{"location":"tutorials/develop-persistent-sleep-tracker-part-1/#setting-up-virtual-env","text":"<p>With our <code>sleep-tracker</code> directory created, we need to set up a virtual environment. Setting up a virtual environment will be useful when we host our web application on Code Capsules. Virtual environments ensure that only the libraries used in the development of our sleep tracker application will be installed by Code Capsule's servers. </p> <p>To create a virtual environment, navigate to the <code>sleep-tracker</code> directory in a terminal and enter <code>virtualenv env</code>.</p> <p>Then, activate the virtual environment with:</p> <ul> <li>Linux/MacOSX: <code>source env/bin/activate</code></li> <li>Windows: <code>\\env\\Scripts\\activate.bat</code></li> </ul> <p>If the virtual environment activated correctly, you'll notice <code>(env)</code> to the left of your name in the terminal. Keep this terminal open \u2013 we'll install the project dependencies next.</p>","title":"Setting up Virtual Env"},{"location":"tutorials/develop-persistent-sleep-tracker-part-1/#installing-requirements","text":"<p>Our sleep tracker will use the following Python libraries:</p> <ul> <li>Flask is a lightweight Python web development framework.</li> <li>Flask-Login provides user session management for Flask. This will help us implement a user login and registeration system without having to create one from scratch. </li> <li>Flask Bcrypt is a hashing extension for Flask. This allow us to store users' passwords securely and without knowing what they are.</li> <li>Gunicorn is the WSGI server we'll use to host our application on Code Capsules.</li> <li>Pymongo is a Python library that has tools for interacting with MongoDBs. We'll use Pymongo to connect and send data to our MongoDB.</li> </ul> <p>To install these libraries, activate the virtual environment in your terminal and type the following:</p> <pre><code>pip3 install flask flask-login flask-bcrypt gunicorn pymongo\n</code></pre> <p>Next, we'll create all the files and directories that we'll use in both parts of this series. </p>","title":"Installing requirements"},{"location":"tutorials/develop-persistent-sleep-tracker-part-1/#creating-the-file-structure","text":"<p>Because we'll use Flask to render our HTML files and serve static content, we need to have a specific project structure. Flask expects to find HTML files in a directory named <code>templates</code> and static content such as CSS stylesheets and images in a directory named <code>static</code>. In the <code>sleep-tracker</code> directory, create both of these directories.</p> <p>Inside <code>templates</code>, create three files: <code>base.html</code>, <code>login.html</code>, and <code>main.html</code>. </p> <ul> <li><code>base.html</code> will contain the skeleton for our website's other HTML pages. </li> <li><code>login.html</code> will contain the HTML for the main page of our web application. Here, users will log in or register an account with our sleep tracker.</li> <li><code>main.html</code> will contain the HTML for the page where users will enter their sleep data and view a graph of this data. We'll deal with this file in the second part of this tutorial.</li> </ul> <p>Next, open the <code>static</code> directory and create a file named <code>style.css</code>. This will be the only file in this directory, and will conain the CSS style for our website.</p> <p>Finally, in the main <code>sleep-tracker</code> directory, create a file named <code>app.py</code>. In this file, we'll write the Python code that serves our HTML content to user and manages their activities on the web application. </p>","title":"Creating the file structure"},{"location":"tutorials/develop-persistent-sleep-tracker-part-1/#creating-the-html-templates","text":"<p>Flask uses the Jinja templating library to allow us to embed Python-like code in HTML. This will allow us to create web pages which change dynamically in response to user actions such as registration, login and entering sleep tracking data. In this section, we will be populating the files we created in <code>templates</code> above, starting with <code>base.html</code>.</p>","title":"Creating the HTML Templates"},{"location":"tutorials/develop-persistent-sleep-tracker-part-1/#basehtml","text":"<p>The <code>base.html</code> file will contain all of the HTML code common throughout our application. This allows us to use it as a skeleton for every other page and avoid repeating standard markup such as stylesheet links. Open the <code>base.html</code> file and enter the following markup:</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt; Sleep Tracker &lt;/title&gt;\n    &lt;meta name=\"author\" content=\"your-name-here\"&gt;\n    &lt;meta name=\"description\" content=\"This web-application\n    helps you track your sleep!\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"{{url_for('static',filename='style.css')}}\"&gt;\n  &lt;/head&gt;\n\n&lt;body&gt;\n{% block content %}{% endblock %}\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>This is our skeleton. When Flask serves our <code>login.html</code> or  <code>main.html</code> pages, it will replace the <code>{% block content %}{% endblock %}</code> with that page's unique content.</p> <p>Any code between <code>{%</code> and <code>%}</code> or <code>{{</code> and <code>}}</code> is Jinja syntax, which is largely similar to Python code. Flask will evaluate this code before rendering HTML files and serving them to users. In this example, we use Jinja syntax to call Flask's <code>url_for()</code> function. To link our stylesheet, Flask uses the <code>url_for()</code> function to find the <code>style.css</code> file in the <code>static</code> directory. </p>","title":"Base.html"},{"location":"tutorials/develop-persistent-sleep-tracker-part-1/#creating-the-login-page","text":"<p>Now that we've created the <code>base.html</code> file, we can implement our <code>login.html</code> file. Open <code>login.html</code>and add the following markup:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block content %}\n&lt;h2&gt;Login or register here to track your sleep!&lt;/h2&gt;\n&lt;form action=\"\" method=\"POST\"&gt;\n  &lt;ul&gt;\n    &lt;li&gt; \n      &lt;label for=\"username\"&gt;Username:&lt;/label&gt;\n    &lt;input type=\"text\" id=\"name\" name=\"user_name\"&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n      &lt;label for=\"password\"&gt;Password:&lt;/label&gt;\n    &lt;input type=\"password\" id=\"password\" name=\"user_pw\"&gt;\n    &lt;/li&gt;\n    &lt;li class = \"button\"&gt;\n      &lt;input type=\"submit\" name='login' value='Login'&gt;\n    &lt;input type=\"submit\" name='register' value='Register'&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/form&gt;\n{% endblock %}\n</code></pre> <p>The line <code>{% extends \"base.html\" %}</code> tells Jinja to render this page by populating each of <code>base.html</code>'s named <code>block</code> directives with the corresponding <code>block</code> content defined in <code>login.html</code>. In this instance, we've only defined a single block named <code>content</code>, but we could define multiple blocks. For example, we might want to have a <code>head</code> block that defines some page-specific content that needs to be in the HTML <code>&lt;head&gt;</code> tag.</p> <p>On this page, we've created a form containing input fields for users to enter their username and password, as well as login and register buttons. Note the <code>POST</code> HTTP method \u2013 this will ensure that the username and password are sent as <code>POST</code> parameters in the HTTP request body, rather than as <code>GET</code> parameters in the URL. This allows us to differentate between when a user visits the login page (a <code>GET</code> request) versus when they click the register or login button.</p> <p>Before we take a look at our work so far, let's populate our <code>style.css</code> file to make our HTML look a bit better.</p>","title":"Creating the Login Page"},{"location":"tutorials/develop-persistent-sleep-tracker-part-1/#adding-styles","text":"<p>Open the <code>style.css</code> file in the <code>static</code> directory and add the following:</p> <pre><code>form {\n  margin: auto;\n  width: 500px;\n}\n\nform li + li {\n  margin-top: 1em;\n}\n\nul {\n  /* Remove unordered list dots */\n  list-style: none;\n  padding: .1;\n  margin: .1;\n}\n\nlabel {\n  display: inline-block;\n  width: 100px;\n  text-align: right;\n}\n\ninput,\ntextarea {\n  font: \"Times New Roman\", serif;\n  /* Change border &amp; width of textarea */\n  border: 1px solid #000000;\n  width: 300px;\n  box-sizing: border-box;\n}\n\n\n.button {\n  /* Align w/ text box */\n  padding-left: 105px; \n}\n\nh2 {\n  text-align: center;\n  font: \"Times New Roman\", serif;\n}\n</code></pre> <p>Feel free to add your own personal touches, such as a favourite colour or font. </p>","title":"Adding styles"},{"location":"tutorials/develop-persistent-sleep-tracker-part-1/#testing-what-we-have","text":"<p>Now that we've created our templates and stylesheet, let's add some initial functionality to <code>app.py</code>. Open the file and enter the following code:</p> <pre><code>from flask import Flask, render_template, url_for, request, redirect\n\napp = Flask(__name__)\n\n## Login/Register page\n@app.route('/')\ndef login():\n    return render_template('login.html')\n\n@app.route('/main')\ndef main():\n    return render_template('main.html')\n</code></pre> <p>Here we've created two routes: + <code>/</code>, which will be our web application's homepage and serve the content of <code>login.html</code>. + <code>/main</code>, which will be our web application's sleep tracker page and serve the content of <code>main.html</code>. </p> <p>Flask uses the <code>@app.route</code> function decorator to determine which functions will be executed when the user visits different routes.</p> <p>View the application by opening a terminal in the <code>sleep-tracker</code> directory and and entering <code>flask run</code>.</p> <p>After running the application, Flask will provide you with URL. Enter this URL in your web browser, and you'll see the login screen. It should look something like this:</p> <p></p>","title":"Testing what we have"},{"location":"tutorials/develop-persistent-sleep-tracker-part-1/#handling-user-registration-and-login","text":"<p>Rather than implementing a user registration and login system ourselves, we'll use the Flask Login library that we installed earlier to provide this functionality. This will help us to save time and avoid common usability and security pitfalls. We will store user information in the database we created at the beginning of this tutorial.</p> <p>First, let's import the functionality we'll need from: + <code>flask-login</code>, <code>flask-bcrypt</code>, to handle users. + <code>pymongo</code>, to interface with MongoDB. + <code>re</code>, to validate user input. </p> <p>Enter the following code below the line that starts with <code>from flask import</code>:</p> <pre><code>from flask_login import LoginManager, UserMixin, login_required, login_user, logout_user, current_user\nfrom flask_bcrypt import Bcrypt\nimport pymongo, re\n</code></pre> <p>Now we can create an instance of the <code>LoginManager</code> class and set a secret key for our application. Just below the line that defines <code>app</code>, add:</p> <pre><code>app.config['SECRET_KEY'] = 'your-secret-key-here'\nlogin_manager = LoginManager(app)\n</code></pre> <p>This class does exactly what it says \u2013 manages logged in users and communicates any necessary information about a user to Flask. Replace <code>your-secret-key-here</code> with a long randomly generated string. UUIDs are good for this purpose. You can generate one with the following terminal command:</p> <pre><code>python3 -c 'import uuid; print(uuid.uuid4().hex.upper())'\n</code></pre> <p>Next, we need to initialise a bcrypt object for our application. Add the following code below the line that defines <code>login_manager</code>:</p> <pre><code>bcrypt = Bcrypt(app)\n</code></pre> <p>When a user registers with our sleep tracker, we'll create a new entry in our MongoDB with the user's username and password. That way, when a user logs in to our sleep tracker, we can see if the information they entered matches the information in our MongoDB. Beneath the last line we added, add the following:</p> <pre><code>client = pymongo.MongoClient('mongodb+srv://YOURUSERNAME:YOURPASSWORD@cluster0.e2fw3.mongodb.net/&lt;dbname&gt;?retryWrites=true&amp;w=majorhostity')\ndb = client.user_login\n</code></pre> <p>Here we import the <code>pymongo</code> library and use it to connect to our MongoDB instance. Replace <code>YOURUSERNAME</code> and <code>YOURPASSWORD</code> with your data capsule account information.</p>","title":"Handling User Registration and Login"},{"location":"tutorials/develop-persistent-sleep-tracker-part-1/#create-the-user-class","text":"<p>For Flask Login to work, we need to create a <code>User</code> class. This <code>User</code> class will contain information pertaining to the user that is currently logged in to our sleep tracker.</p> <p>Flask Login expects us to implement four methods in our <code>User</code> class: <code>is_authenticated</code>, <code>is_active</code>, <code>is_anonymous</code> and <code>get_id</code>. Rather than implementing all of these ourselves, we will have our <code>User</code> class inherit from Flask's <code>UserMixin</code>, which provides generic implementations for the first three, leaving us with only <code>get_id</code>. In addition, we'll need to implement our own <code>load_user</code> and <code>check_password</code> methods.</p> <p>Below the line <code>db = client.user_login</code>, enter the following code:</p> <pre><code>class User(UserMixin):\n    def __init__(self, username):\n        self.username = username\n\n    def get_id(self):\n        return self.username\n</code></pre> <p>Here we've created the class, inherited from <code>UserMixin</code> and implemented the <code>get_id</code> method, which simply returns the user's username. To facilitate user login, we need to implement two methods, <code>load_user</code> and <code>check_password</code>. Let's implement <code>load_user</code> first. This method will be used to fetch a user from the MongoDB database corresponding to the username entered in the login form. Add the following code to the <code>User</code> class:</p> <pre><code>    @login_manager.user_loader\n    def load_user(username):\n        user = db.users.find_one({ \"username\": username })\n        if user is None:\n            return None\n        return User(username=user['username'])\n</code></pre> <p>The decorate <code>@login_manager.user_loader</code> tells the <code>login_manager</code> to use this method to load users.</p> <p>Now let's add a <code>check_password</code> method. This method will be called to determine whether a user has entered the correct password for the username they specify. When we register users, we will hash their passwords with the bcrypt one-way encryption function before storing them in MongoDB. This will keep our users' passwords secret from us and, should our application be compromised in future, ensure that hackers cannot easily recover our users' passwords and use them on other websites those users may have account on. Therefore, when checking the password a user has entered on login, we need to hash this input with bcrypt before comparing it to the password entry in our MongoDB database. To do this, add the following code to the <code>User</code> class:</p> <pre><code>    @staticmethod\n    def check_password(password_entered, password):\n        if bcrypt.check_password_hash(password, password_entered):\n            return True\n        return False\n</code></pre> <p>By making <code>check_password</code> a static method, we enabled it to be called without instantiating an instance of our <code>User</code> class.</p> <p>That's all we need for user login. Now we need to link our login and registration form to this functionality. </p>","title":"Create the user class"},{"location":"tutorials/develop-persistent-sleep-tracker-part-1/#add-functionality-to-the-login-and-register-buttons","text":"<p>When a user clicks the register button, we will create a new user document in our MongoDB users collection, containing their username and hashed password. When a user clicks \"Login\", we will log them in if they've entered a valid username and password combination and redirect them to the <code>main.html</code> file. </p> <p>To do this, we'll create a new function that handles login and registration. Add the following code below the <code>def login()</code> function:</p> <pre><code>@app.route(\"/\", methods = [\"POST\"])\ndef login_or_register():\n    if request.method == 'POST':\n        name_entered = str(request.form.get('user_name')) # Get username and password from form\n        pw_entered = str(request.form.get('user_pw'))\n\n        if request.form.get('login'): # Log in logic\n            user = db.users.find_one({ 'username': name_entered })\n            if user and User.check_password(pw_entered, user['password']):\n                usr_obj = User(username=user['username'])\n                login_user(usr_obj)\n                return redirect(url_for('main'))\n            else:\n                return \"Incorrect username or password.\"\n\n        elif request.form.get('register'): # Register logic\n            # Validate username and password\n            if not re.match(\"[a-zA-Z0-9_]{1,20}\", name_entered):\n                return \"Username must be between 1 and 20 characters. Letters, numbers and underscores allowed.\"\n            if len(pw_entered) &lt; 8:\n                return \"Password must be at least 8 characters.\"\n\n            if db.users.find_one({ 'username': name_entered }):\n                return \"User already exists.\"\n\n            new_user = { 'username': name_entered,\n                         'password': bcrypt.generate_password_hash(pw_entered) }\n            db.users.insert_one(new_user) # insert new user to db\n            return redirect(url_for('login')) # redirect after register\n</code></pre> <p>First, note the <code>POST</code> method. As mentioned when we created our <code>login.html</code> file, using a <code>POST</code> method for user login and registration allows our application to transmit username and information more securely and allows us to differentiate between a user login or registration (<code>POST</code>) and a user merely visiting the page (<code>GET</code>).</p> <p>If the login button is pressed (<code>if request.form.get('login')</code>), we check our MongoDB for a username that matches the one entered. Then we check if the password entered matches that user's password in the MongoDB. If <code>check_password</code> evaluates to true, we log the user in and redirect to the <code>main</code> route (which we'll create in the next part of this series. Otherwise, we provide the user with an error message. To redirect users, we use Flask's <code>redirect</code> function and <code>url_for</code> functions. The <code>url_for</code> function finds the <code>main</code> route, and the <code>redirect</code> function sends users to that route. </p> <p>If a user clicks \"Register\", we first validate the username and password they've provided. We're restricting usernames to a length of 20 characters, containing only alphanumeric characters and underscores. We're also ensuring that the chosen password is eight or more characters long. We then check whether the username they're trying to use is already taken. If their username and password are acceptable, we create a <code>new_user</code> dictionary with the specified name and a bcrypt hash of the specified password, which we then insert it into our MongoDB. Then we send the user back to the login page.</p>","title":"Add functionality to the login and register buttons"},{"location":"tutorials/develop-persistent-sleep-tracker-part-1/#trying-out-the-login-system","text":"<p>We've implemented the login and register buttons. Try running the program by opening a terminal in the <code>sleep-tracker</code> directory and entering <code>flask run</code>. Test out registering a few new accounts and logging into them. Remember, we haven't put any HTML in our <code>main.html</code> file, so when you log in, you'll see a blank page. Don't worry, everything is working! </p> <p>In the next part of this series, we'll implement the rest of the sleep tracker application. This means populating the <code>main.html</code> file and learning how to store user sleep data in MongoDB. </p>","title":"Trying out the login system"},{"location":"tutorials/develop-persistent-sleep-tracker-part-1/#further-reading","text":"<p>To learn more about Flask-Login, take a look at their documentation. The Explore Flask documentation site also has a guide for handling users that goes into further depth than we have, including features such as a way for users to reset forgotten passwords.</p> <p>For more information on the Jinja templating language, their documentation can be found here.</p> <p>Finally, when you're ready, finish the sleep tracker application by following the second tutorial in this series.</p>","title":"Further Reading"},{"location":"tutorials/develop-persistent-sleep-tracker-part-2/","text":"<p>This is the second part of our sleep tracker web application tutorial, covering the creation of the sleep tracker interface.</p>","title":"Developing a Persistent Sleep Tracker Part 2: Tracking and Graphing Sleep Data"},{"location":"tutorials/develop-persistent-sleep-tracker-part-2/#recap","text":"<p>In the first part of this series, we built a web application with user registration and login using Python's Flask web framework and a hosted NoSQL MongoDB database for data persistence. We will now build on the code we wrote in that tutorial, so you must have completed it.</p> <p>In this second part of the series, we'll implement the logic that allows users to enter their sleep data and see that data on an interactive graph, generated using Plotly. Registered users will be able to log the number of hours slept on different days and visualise this data as a graph. </p>","title":"Recap"},{"location":"tutorials/develop-persistent-sleep-tracker-part-2/#creating-the-sleep-tracker-front-end","text":"<p>At the end of our last tutorial, we saw a blank page when we logged in and were redirected to the application's <code>/main</code> page. This happened because our <code>main.html</code> file was empty, so let's add some content to it. We'll need the following: </p> <ol> <li>A form with fields for the date and hours slept, so users can provide sleep data for different days.</li> <li>A way to view a graph of this data.</li> <li>A logout button, that logs the user out. </li> </ol> <p>To do all of this, we will first need to build a <code>main.html</code> containing both static HTML and dynamic Jinja template components that will change depending on which user is logged in and what sleep data they've provided. We will also implement some front-end JavaScript code to make our sleep data graph interactive.</p> <p>Let's add the sleep data logging form first. Open the <code>main.html</code> file in the <code>templates</code> directory. Add the following:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block content %}\n&lt;h2&gt;Hey, {{ user['username'] }}! Let's track your sleep.&lt;/h2&gt;\n&lt;form action=\"\" method=\"POST\"&gt;\n  &lt;ul&gt;\n    &lt;li&gt; \n      &lt;label for=\"time\"&gt;Time Slept (hours):&lt;/label&gt;\n    &lt;input type=\"text\" id=\"time\" name=\"time\"&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n      &lt;label for=\"date\"&gt;Date:&lt;/label&gt;\n    &lt;input type=\"date\" id=\"date\" name=\"date\"\n         value=\"\"&gt;\n    &lt;/li&gt;\n    &lt;li class = \"button\"&gt;\n      &lt;input type=\"submit\" name='submit' value='Submit'&gt;\n    &lt;input type=\"submit\" name='graph' value='View Graph'&gt;\n    &lt;input type=\"submit\" name='logout' value='Logout'&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/form&gt;\n{% endblock %}\n</code></pre> <p>This works similarly to the <code>login.html</code> file we created in the previous tutorial, with <code>base.html</code> acting as the page skeleton and our unique content being entered between the <code>{% block content %}</code> and <code>{% endblock %}</code> lines. We also ensure that our form uses the <code>POST</code> method so we can differentiate between a user visiting the page and clicking one of the three form buttons. To determine which button a user has clicked in a given <code>POST</code> request, we'll use the button's HTML <code>name</code> attribute (<code>submit</code>, <code>graph</code> or <code>logout</code>) in Flask.</p> <p>Notice the Jinja snippet <code>{{ user['username'] }}</code>. This will display data sent from our Flask back-end code in the page \u2013 in this case, the user's name.</p> <p>The <code>&lt;input type=\"date\" id=\"date\" name=\"date\" value=\"\"&gt;</code> line creates an interactive calendar so users can click on dates rather than typing them out.</p>","title":"Creating the Sleep Tracker Front-end"},{"location":"tutorials/develop-persistent-sleep-tracker-part-2/#adding-sleep-data-submission-and-logout","text":"<p>In the <code>app.py</code> file, add the following line below the <code>app = Flask(__name__)</code>  line.</p> <pre><code>app.config['plotting'] = False\n</code></pre> <p>Here we add a new entry in our Flask application's configuration settings. This will come in handy soon \u2013 we'll use this line to tell whether or not a user has clicked the \"View Graph\" button in our <code>main.html</code> file. If a user has clicked the button, we'll set this line to \"True\" and a graph with the user's sleep data will display. </p> <p>Now, we can implement the functionality for our \"Submit\", \"View Graph\" and \"Logout\" buttons. Add the following code below the <code>main()</code> function.</p> <pre><code>@app.route('/main', methods = ['POST'])\ndef submit_sleep():\n    if request.form.get('submit'): # if submitting new sleep data\n        time_entered = float(request.form.get('time'))\n        date_entered = request.form.get('date')\n        message = add_sleep(time_entered,date_entered,db.users.find_one({'username':current_user.get_id()}))\n        if message:\n          return message\n\n    if request.form.get('logout'):\n        logout_user()\n        app.config['plotting'] = False\n        return 'You logged out!'\n\n    elif request.form.get('graph'):\n        app.config['plotting'] = True\n\n    return redirect(url_for('main'))\n</code></pre> <p>This function operates similarly as our <code>login_or_register</code> function:</p> <ul> <li>If a user clicks \"Submit\", the data they entered will be stored in their MongoDB entry via the <code>add_sleep</code> function (that we'll create next). This function will return a string with an error message if it encounters an error, and <code>None</code> if it succeeds.</li> <li>If a user clicks \"Logout\", the user will be logged out. </li> <li>If a user clicks \"View Graph\", the <code>app.config['plotting']</code> entry is set to <code>True</code>. Later, we'll expand <code>main.html</code> to display the graph.</li> </ul> <p>Let's wrap up our button functionality by creating the <code>add_sleep</code> function that is called when a user clicks \"Submit\". Add the following code above the <code>submit_logout_plot</code> function to create the <code>add_sleep</code> function:</p> <pre><code>def add_sleep(time, date, user):\n    if not re.match(\"[0-9]{4}-[0-1][0-9]-[0-3][0-9]\", date):\n        return \"Invalid date supplied.\"\n\n    if time &lt; 0.0 or time &gt; 24.0:\n        return \"Sleep time must be between 0 and 24 hours.\"\n\n    if 'date' in user:\n        user['date'].append(date)\n        user['time'].append(time)\n    else: # adding sleep data for the first time\n        user['date'] = [date]\n        user['time'] = [time]\n\n    # Update MongoDB \n    db.users.update_one({ 'username': user['username'] },\n        { '$set': { 'date': user['date'],\n          'time': user['time'] }})\n</code></pre> <p>Our <code>add_sleep</code> function takes three variables:</p> <ul> <li><code>time</code>: The number of hours slept that the user entered.</li> <li><code>date</code>: The calendar date the user selected.</li> <li><code>user</code>: The user's MongoDB entry.</li> </ul> <p>First, we validate the user's input to ensure that a correctly formatted date has been provided and that the time given is not a negative number or larger than 24. If either value does not pass validation, we return a relevant error message from the function without writing to the database. Otherwise we continue.</p> <p>If a user has never entered any sleep data, we add a new <code>'date'</code> and <code>'time'</code> entry to the user's MongoDB entry with the date and time entered. Otherwise, we take the data they entered and add it to their existing sleep data. Finally, we update the user's MongoDB entry with <code>db.users.update_one</code>. </p> <p>We've implemented functionality for all three buttons. Now we need to modify the <code>main()</code> function to pass the current user's data to <code>main.html</code>. This will allow us to display their username on the page, and to graph their sleep data. Find the <code>main()</code> function and modify it like so:</p> <pre><code>@app.route('/main')\ndef main():\n    if current_user.get_id() is None:\n        return redirect(url_for('login')) # redirect to login page if not logged in\n\n    user_data = db.users.find_one({ 'username': current_user.get_id() })\n    return render_template(\"main.html\", user=user_data, plot=app.config['plotting'])\n</code></pre> <p>First, we leverage Flask-Login's anonymous users functionality to check if the current user is not logged in and, if so, we redirect them to the login page. If the current user is logged it, we retrieve their MongoDB entry and assign it to <code>user_data</code>. Then we pass this variable to the <code>render_template</code> function as <code>user</code>. This is how the line below will access and display the user's name.</p> <pre><code>&lt;h2&gt;Hey, {{ user['username'] }}! Let's track your sleep.&lt;/h2&gt;\n</code></pre> <p>As <code>user_data</code> contains the entire MongoDB user entry, our template will be able to access the current user's sleep data from the <code>user</code> variable as well.</p> <p>We've also passed the template the value of <code>app.config['plotting']</code> in <code>plot</code>. This is how our application will know whether or not to display a graph on the <code>/main</code> page. </p> <p>All that's left now is to add the sleep data graph in our <code>main.html</code> file. After that, we can deploy our application to Code Capsules.</p>","title":"Adding Sleep Data Submission and Logout"},{"location":"tutorials/develop-persistent-sleep-tracker-part-2/#adding-the-plotly-graph","text":"<p>As mentioned at the beginning of the article, we'll add the ability to graph sleep data with the help of Plotly. Plotly provides an external JavaScript library that we can use to create interactive graphs for the web. </p> <p>In the <code>main.html</code> file, find the <code>&lt;/form&gt;</code> line. Right below this line, add the following: </p> <pre><code>{% if plot %}\n&lt;script src=\"https://cdn.plot.ly/plotly-latest.min.js\"&gt;&lt;/script&gt;\n&lt;div id=\"graph\"&gt;\n    &lt;script&gt;\n      var x = {{user['date'] | safe }};\n      var y = {{user['time'] | safe }};\n\n    var trace1 = {\n    x: x,\n    y: y,\n    type: 'bar'\n  };\n\n  var data = [trace1];\n\n  var layout = {\n\n    title: {\n      text:'My Sleep',\n      font: {\n        family: 'Courier New, monospace',\n        size: 24\n      },\n      xref: 'paper',\n      x: 0.05,\n    },\n    xaxis: {\n      title: {\n        text: 'Date',\n        font: {\n          family: 'Courier New, monospace',\n          size: 18,\n          color: '#7f7f7f'\n        }\n      },\n    },\n    yaxis: {\n      title: {\n        text: 'Time Slept (hrs)',\n        font: {\n          family: 'Courier New, monospace',\n          size: 18,\n          color: '#7f7f7f'\n        }\n      }\n    }\n  };\n  Plotly.newPlot('graph', data, layout);\n    &lt;/script&gt;\n&lt;/div&gt;\n{% endif %}\n</code></pre> <p>Let's break this down, starting with the line <code>{% if plot %}</code>. This line references the <code>plot</code> variable we created in our <code>app.py</code> file in the <code>main</code> function. If someone has clicked \"View Graph\", we set <code>plot</code>  to true. If <code>plot</code> is true, the HTML between <code>{% if plot %}</code> and <code>{% endif %}</code> will be included in the page served to the user, otherwise it will be left out.</p> <p>The line <code>&lt;script src=\"https://cdn.plot.ly/plotly-latest.min.js\"&gt;&lt;/script&gt;</code> imports the Plotly graphing library. This is similar to an <code>import</code> statement in Python.</p> <p>Under this line, we see a lot of code enclosed in <code>&lt;script&gt;...&lt;/script&gt;</code> tags. This is all JavaScript code. In this code, we create two variables, <code>x</code> and <code>y</code>, which contain arrays of the dates and number of hours slept that a user has logged.</p> <p>Note that we have set these variables as <code>safe</code>, which means that Jinja will not attempt to escape or encode any of the characters within them when it renders the HTML. This is dangerous to do with user input, which is why we validated both the date and time values in our Python code. If we had not validated them, a malicious user might be able to supply JavaScript code in the date or time input fields and alter the behaviour of this page.</p> <p>The code inside <code>var trace1 = {...}</code> tells Plotly which data to use for the x and y axes, and the type of graph we'll make \u2013 a bar graph.</p> <p>All the code in <code>var layout = {...}</code> effects things like x and y axis labelling, font type, and size of font. Customise this to your liking!</p> <p>Finally, The line <code>Plotly.newPlot('graph', data, layout)</code> creates the actual graph and displays it to a user. </p> <p>Try running the application by opening a terminal in the <code>sleep-tracker</code> directory, activating the virtual environment and entering <code>flask run</code>. You should be able to register a new user account, log in, enter sleep data, and view your graph. </p>","title":"Adding the Plotly Graph"},{"location":"tutorials/develop-persistent-sleep-tracker-part-2/#preparing-for-deployment","text":"<p>With our sleep tracker functionally complete, we need to make one last modification to our <code>app.py</code> file and add some files in the <code>sleep-tracker</code> directory before we can push our code to GitHub and deploy it on Code Capsules. </p>","title":"Preparing for Deployment"},{"location":"tutorials/develop-persistent-sleep-tracker-part-2/#creating-environment-variables","text":"<p>Before we push our code to GitHub, we need to remove our <code>app.config['SECRET_KEY']</code> and the MongoDB user credentials. If we were to push our code now, anyone could use our secret key to forge user sessions on our application or our MongoDB credentials to alter our database. Luckily, there is an easy fix. </p> <p>First, save your secret key and MongoDB credentials somewhere safe, outside of this project's directory so that you don't lose them. Then, at the top of <code>app.py</code>, add the line:</p> <pre><code>import os\n</code></pre> <p>Then, replace the line:</p> <pre><code>app.config['SECRET_KEY'] = 'your-secret-key-here' \n</code></pre> <p>with this:</p> <pre><code>app.config['SECRET_KEY'] = os.getenv('SECRET_KEY') \n</code></pre> <p>And replace this line:</p> <pre><code>client = pymongo.MongoClient('mongodb+srv://YOURUSERNAME:&lt;password&gt;@cluster0.e2fw3.mongodb.net/&lt;dbname&gt;?retryWrites=true&amp;w=majorhostity')\n</code></pre> <p>with this:</p> <pre><code>client = pymongo.MongoClient('MONGO_CONNECTION_STRING')\n</code></pre> <p><code>os.getenv('SECRET_KEY')</code> and <code>os.getenv('MONGO_CONNECTION_STRING')</code> will look for environment variables with the names \"SECRET_KEY\" and \"MONGO_CONNECTION_STRING\". When we host the sleep tracker application on Code Capsules, we'll set these environment variables to the values we removed from the code. </p>","title":"Creating environment variables"},{"location":"tutorials/develop-persistent-sleep-tracker-part-2/#creating-a-procfile-and-requirementstxt","text":"<p>Code Capsules requires a couple of files to deploy our application: <code>Procfile</code> and <code>requirements.txt</code>. The first one tells Code Capsules how to run our application, and the second one tells it which libraries it needs to install.</p> <p>To create the <code>Procfile</code>:</p> <ol> <li>Create a file named <code>Procfile</code> in your project directory (do not add a file extension).</li> <li>Open the <code>Procfile</code>, enter <code>web: gunicorn app:app</code>, and save the file. This tells Code Capsules to use the Gunicorn WSGI server to run <code>app.py</code>.</li> </ol> <p>In the same terminal, activate the virtual environment and enter <code>pip3 freeze &gt; requirements.txt</code> to create <code>requirements.txt</code> and populate it with all the libraries we've used to create this application.</p> <p>Now we can push our code to GitHub. Create a GitHub repository and send every file and directory to GitHub, except for virtual env's <code>env</code> directory.</p>","title":"Creating a Procfile and requirements.txt"},{"location":"tutorials/develop-persistent-sleep-tracker-part-2/#deploying-the-sleep-tracker-to-code-capsules","text":"<p>With all of the files on GitHub, we can deploy the sleep tracer to Code Capsules:</p> <ol> <li>Log in to Code Capsules, and create a Team and Space as necessary.</li> <li>Link Code Capsules to the GitHub repository created previously.</li> <li>Enter your Code Capsules Space.</li> <li>Create a new Capsule, selecting the \"Backend\" capsule type.</li> <li>Select the GitHub repository containing the sleep tracker \u2013 leave \"Repo subpath\" empty and click \"Next\".</li> <li>Leave the \"Run Command\" blank and click \"Create Capsule\".</li> </ol> <p>Now we just need to set those environment variables we mentioned previously.</p>","title":"Deploying the Sleep Tracker to Code Capsules"},{"location":"tutorials/develop-persistent-sleep-tracker-part-2/#creating-environment-variables-in-code-capsules","text":"<p>Let's create set the environment variables so our sleep tracker will work properly: </p> <ol> <li>Navigate to your Capsule.</li> <li>Click the \"Config\" tab.</li> <li>Add two environment variables, one named \"SECRET_KEY\" and another \"MONGO_CONNECTION_STRING\". Enter the secret key and connection string values you saved earlier.</li> </ol> <p>When done, make sure to click \"Update\". </p> <p>Now the sleep tracker is ready to try out! The application is complete.</p>","title":"Creating environment variables in Code Capsules"},{"location":"tutorials/develop-persistent-sleep-tracker-part-2/#what-next","text":"<p>There are many ways to expand or improve this application. Some ideas include:</p> <ul> <li>Improve the application's styling \u2013 it's fairly simple right now. If you want to learn more about CSS styling, this tutorial written by Mozilla is a great place to start.</li> <li>Add a way for users to keep track of other data (calories, daily notes, exercise).</li> <li>Display better looking error messages, preferably somewhere in the current page.</li> </ul>","title":"What Next?"},{"location":"tutorials/game-catalogue-with-nodejs-and-mysql/","text":"<p></p> <p>APIs are a common way to expose data and information on the internet. Many web services and apps run off of multiple APIs in the background. Because APIs are so ubiquitous, it is very useful to learn the basics of how to build one. </p> <p>In this tutorial, we'll build a simple HTTP REST API to provide Create, Read, Update and Delete (CRUD for short) functions for a personal game catalogue. We'll secure it with HTTP Basic authentication, while allowing for an easy upgrade to a more secure scheme. </p> <p>We'll use MySQL as the data store, Node.js as the application language, and Code Capsules to host all the components.</p>","title":"Building a Game Catalogue API"},{"location":"tutorials/game-catalogue-with-nodejs-and-mysql/#overview-and-requirements","text":"<p>You'll need the following services and software set up for this tutorial: </p> <ul> <li>Git setup and installed, and a registered GitHub account.</li> <li>Node.js installed.</li> <li>A registered Code Capsules account.</li> <li>An IDE or text editor to create the project in. This tutorial was made using Visual Studio Code, but you can use any tool you like.</li> <li>The Postman app to interact with our API.</li> </ul>","title":"Overview and Requirements"},{"location":"tutorials/game-catalogue-with-nodejs-and-mysql/#setting-up-the-project","text":"<p>With our requirements in place, we can get started setting them up to work as needed for our game catalogue project.</p>","title":"Setting up the Project"},{"location":"tutorials/game-catalogue-with-nodejs-and-mysql/#creating-a-new-repo","text":"<p>We need a place to store our code from which Code Capsules can deploy to a Capsule.</p> <p>Head over to GitHub and create a new repo. We're calling it game-api here, but you can give it any name. Choose a Node <code>.gitignore</code> file to get started. Then clone the new GitHub repo onto your computer and navigate to that directory in a terminal (or command prompt, if you're on Windows).</p>","title":"Creating a New Repo"},{"location":"tutorials/game-catalogue-with-nodejs-and-mysql/#initialising-the-base-project","text":"<p>We'll use the Express generator to create the project base. Express is a lightweight web framework for Node.js. To create the base project, type in the following: </p> <pre><code>npx express-generator --no-view\nnpm install\n</code></pre> <p>This creates a few files and folders that we can edit. The <code>--no-view</code> option tells the generator to skip adding an HTML view engine. This is because we don't need any views for an API. </p> <p>The command <code>npm install</code> downloads and installs all the dependencies and packages required by the base project. Open the folder with Visual Studio Code or an editor of your choice, and browse through the files to get familiar with them. The <code>app.js</code> file in the project root is the main entry point for the app. </p> <p>Great, it's time to push this boilerplate project up to Git. We can do it with the following commands, from the command prompt or terminal: </p> <pre><code>git add . \ngit commit -am 'added base files for project'\ngit push origin\n</code></pre>","title":"Initialising the Base Project"},{"location":"tutorials/game-catalogue-with-nodejs-and-mysql/#creating-a-new-backend-capsule","text":"<p>We'll need a place to host our app. </p> <ol> <li>Log in to Code Capsules, and create a Team and Space as necessary.</li> <li>Link Code Capsules to the GitHub repository you created above. You can do this by clicking your username at the top right in Code Capsules, and choosing Edit Profile. Now you can click the GitHub button to link to a repo. </li> <li>Create a new Capsule, selecting the \"Backend\" capsule type.</li> <li>Select the GitHub repository. If you are only using the repo for this project, you can leave the Repo Subpath field empty. You may need to add your repo to the team repo if you haven't already. Click the Modify Team Repos to do so. </li> <li>Click Next, then on the following page, click Create Capsule. </li> <li>You can follow this in-depth guide if you'd like more information on linking to GitHub and creating an express.js Backend Capsule.</li> </ol>","title":"Creating a New Backend Capsule"},{"location":"tutorials/game-catalogue-with-nodejs-and-mysql/#creating-a-new-data-capsule","text":"<p>We'll need some data storage to store the files that are uploaded to the web drive. </p> <ol> <li>Create a new Capsule, selecting the \"Data Capsule\" type. </li> <li>Select \"MySQL\" as the Data Type. Choose a product size, and give it a name. </li> <li>Click \"Create Capsule\". </li> <li>You can follow the in-depth creation guide if you'd like more information on creating a Data Capsule. </li> </ol>","title":"Creating a New Data Capsule"},{"location":"tutorials/game-catalogue-with-nodejs-and-mysql/#link-the-capsules","text":"<p>To use the Data Capsule with the Backend Capsule, we need to link them. Head over to the Backend Capsule you created above, and click on the \"Configure\" tab. Then scroll down to \"Bind Data Capsule\", and click \"Bind\" under the name of the data capsule you created. </p> <p></p> <p>After binding the Capsules, scroll up to the section \"Capsule Parameters\". You'll notice that an environment variable, <code>DATABASE_URL</code>, is automatically added containing the connection string to the MySQL database. We'll use this environment variable in the code to access the MySQL database. </p> <p></p>","title":"Link the Capsules"},{"location":"tutorials/game-catalogue-with-nodejs-and-mysql/#writing-the-api-code","text":"<p>Now that we have all our systems set up, we can get onto the coding part. </p>","title":"Writing the API Code"},{"location":"tutorials/game-catalogue-with-nodejs-and-mysql/#creating-the-database-tables","text":"<p>We need to set up our database with a table to store the list of all our games. We'll create a very simple table with the following columns:</p>    id title system year            <p>We don't have direct access to the Data Capsule and the MySQL database it's running. We can only access the Data Capsule from our Backend Capsule. So, to make a new table, we'll create a setup script which we can direct the Backend Capsule to run. </p> <p>Create a new file called <code>setup.js</code> in the root of your project. Now we need to install a package that will allow us connect to MySQL and send commands. We'll use MySQL2. Use <code>npm</code> from the terminal to install this package:</p> <pre><code>npm install mysql2\n</code></pre> <p>Now we can add the code to create the table. In the new <code>setup.js</code> file, add the following code: </p> <p><pre><code>const mysql = require('mysql2');\n\nconsole.log('Setting up Database....');\n\nconst connection = mysql.createConnection(process.env.DATABASE_URL);\n\nconsole.log('Creating tables...');\nconnection.execute(`\n    create table games\n      (\n        id int auto_increment,\n        title varchar(500) not null,\n        platform varchar(500) not null,\n        year int not null,\n        constraint games_pk\n          primary key (id)\n      );\n    `, \n    function(err, results, fields){\n      if (err) {\n        console.error(err);\n      }\n      console.log(results); \n}); \n</code></pre> This code imports the <code>mysql2</code> driver package. We write a boot message to the console, just so we can see when the code runs in the logs. Then we can create a new connection to the database, using the connection string that was automatically added to the <code>DATABASE_URL</code> environment variable when we bound the capsules. Then we use the <code>execute</code> function to send a SQL command to the database. The SQL command creates a new table with the columns defined above. It has a callback to let us know if the operation is a success or if it has an error. In both cases, we write the output to the console, so we'll be able to see what happened when we read the logs. </p> <p>Now, we need a way for the Backend Capsule to run this setup script. We can use the <code>package.json</code> file to register a new command that <code>npm</code> will be able to run. Open the <code>package.json</code> file and add in the following line to the <code>scripts</code> object:</p> <pre><code>    \"setup\": \"node setup.js\"\n</code></pre> <p>The complete <code>package.json</code> file should look like this now: </p> <pre><code>{\n  \"name\": \"game-api\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"node ./bin/www\",\n    \"setup\": \"node setup.js\"\n  },\n  \"dependencies\": {\n    \"cookie-parser\": \"~1.4.4\",\n    \"debug\": \"~2.6.9\",\n    \"express\": \"~4.16.1\",\n    \"morgan\": \"~1.9.1\",\n    \"mysql2\": \"^2.3.0\"\n  }\n}\n</code></pre> <p>We'll need to let our Backend Capsule know to run this script. Navigate to the \"Configure\" tab on the Backend Capsule, and scroll down to the \"Run Command\" section. Change this to:</p> <p><pre><code>npm run setup\n</code></pre> Click \"Update Capsule\" to save this new setting. </p> <p></p> <p>Let's commit the above code to the repo, and push it up so that Code Capsules can run it. Commit and push using the following commands in the terminal: </p> <pre><code>git add . \ngit commit -am 'added database setup script'\ngit push origin\n</code></pre> <p>If you navigate to the \"Logs\" tab on the Backend Capsule, you should see the script booting up and the result of the <code>CREATE TABLE</code> command. </p> <p></p> <p>Once this is done, you can change the \"Run Command\" under the \"Configure\" tab back to:</p> <pre><code>npm run start\n</code></pre> <p>Remember to click \"Update Capsule\" to save this. </p>","title":"Creating the Database Tables"},{"location":"tutorials/game-catalogue-with-nodejs-and-mysql/#adding-a-read-route","text":"<p>Our database is set up with a new table. Let's add some code to create an API route to read from this table. </p> <p>To keep the solution neater, we'll add a new file to contain the API route code. Add a new file called <code>games.js</code> in the <code>routes</code> folder in your project, with the following code:</p> <p><pre><code>var express = require('express');\nconst mysql = require('mysql2');\n\nvar router = express.Router();\n\nconst connection = mysql.createConnection(process.env.DATABASE_URL);\n\nrouter.get('/', function(req, res, next){\n\n  connection.query(\n    `SELECT * FROM games`,\n    queryResults\n  ); \n\n  function queryResults(err, results, fields){\n    if (err) return next(err); \n    return res.json(results); \n  }\n});\n\nmodule.exports = router;\n</code></pre> This code imports the Express module so that we can construct a <code>router</code>, and the <code>mysql2</code> module so that we can connect to the database. </p> <p>We create a <code>router</code>, which is an object that allows us to group routes and middleware together logically. We'll add all our CRUD routes to this router object. Then we create a new database connection, as we did in our setup script. </p> <p>Express routers allow us to add routes using the following structure:</p> <pre><code>router.METHOD(PATH, HANDLER)\n</code></pre> <p><code>METHOD</code> is one of the standard HTTP request methods to use. <code>PATH</code> is the relative part of the server URL to get to the route, and <code>HANDLER</code> is a function that we want run when the route is accessed. </p> <p>To create the read route, we use the HTTP <code>GET</code> verb, which can be configured using the <code>get</code> method on the router. Since we need no parameters, we set the path to <code>/</code>. Then we add our handler function. The function accepts 3 arguments from the Express router: </p> <ul> <li><code>req</code>, which is all the incoming request parameters and context from the client.</li> <li><code>res</code>, a results object where we can specify how to return data to the client.</li> <li><code>next</code>, a function that we can call to hand control to the next middleware in our route, if there is any. If we want to signal an error, we can pass an argument to <code>next</code>, and Express will return an error to the client with the data in that argument. </li> </ul> <p>In our <code>get</code> handler, we run a SQL query to select all entries from the database. The <code>query</code> method takes a SQL query and a callback function. This callback is called with the results or error from the SQL server. We use a separate named function as our callback. This is mainly a stylistic choice - we could write the function inline, but our code would be less readable, as it would have many indentations and creep to the right-hand side of the screen. </p> <p>In the callback, we check if the <code>err</code>, or error, parameter is set. If it is, we use the <code>next</code> function along with the error to exit the route early. This will send an error message to the client. </p> <p>If there is no error, we send the results of the SQL query back, formatted as JSON. </p> <p>Now that we have the router set up and our first route created, we can hook them up to the main Express app. Open the <code>app.js</code> file in the route folder and add the following code above the line <code>var app = express();</code>:</p> <pre><code>var gamesRouter = require('./routes/games');\n</code></pre> <p>This adds a reference to the router we defined in the <code>game.js</code> file. </p> <p>Now, let's use this reference to add the router to the Express app. Add the following line just above the <code>module.exports = app;</code>: </p> <pre><code>app.use('/games', [ gamesRouter ]); \n</code></pre> <p>This mounts the route at the path <code>/games</code> on our server. </p> <p>Let's test all of this by committing and pushing these changes:</p> <pre><code>git add . \ngit commit -am 'added get route for games'\ngit push origin\n</code></pre> <p>If you visit the Code Capsules dashboard for the Backend Capsule, you should see a note that it's building. Once it's finished building, head over to your site in a browser and navigate to the <code>/games</code> route. You should see it return an empty array:</p> <p></p> <p>This works, but is not very interesting! Let's add a create route so that we can add new game entries. </p>","title":"Adding a Read Route"},{"location":"tutorials/game-catalogue-with-nodejs-and-mysql/#adding-a-create-route","text":"<p>We'll use the HTTP POST method as the verb for creating a new game in the catalogue. </p> <p>For the create route, it would be nice to return the newly created entry, along with the id automatically created by MySQL for the entry. To do this, we'll first need to <code>INSERT</code> the new data into the database, and then run a <code>SELECT</code> command to retrieve the fully created database object. We can use the concept of \"middleware\" in Express to achieve this. </p> <p>Each route allows us to chain multiple handlers to it, with each handler running one after the other. This is the core concept of middleware. So to implement our create route with its two distinct operations, we can chain 2 handlers, like this: </p> <pre><code>router.post('/', [functionOne, functionTwo])\n</code></pre> <p>Here, <code>functionOne</code> can pass control to <code>functionTwo</code> by calling the <code>next()</code> parameter, which is passed into each handler by Express. We can also pass custom information from one handler to another by adding it onto the <code>req</code> object, which is also passed to each handler by Express.</p> <p>Ok, enough theory, let's add this code in <code>games.js</code> above the line <code>module.exports = router;</code> using what we know from above:</p> <pre><code>router.post('/', [addNewGame, returnGameById]);  \n\n\nfunction addNewGame(req, res, next){\n  connection.query(\n    `INSERT INTO games\n      (title, platform, year)\n      VALUES (?, ?, ?)`, \n      [req.body.title, req.body.platform, req.body.year],\n    queryResults\n  );\n\n  function queryResults(err, results, fields){\n    if (err) return next(err); \n    req.body.id = results.insertId\n    return next(); \n  }\n}\n\nfunction returnGameById(req, res, done){\n  connection.query(`\n    SELECT * FROM games\n    WHERE id = ?\n    `,\n    [req.body.id],\n    queryResults\n  ); \n\n  function queryResults(err, results, fields){\n    if (err) return next(err); \n    return res.json(results); \n  }\n}\n</code></pre> <p>We've implemented each of the handlers as separate, named functions. You could implement both as inline functions, but again, it's a stylistic choice to improve readability. Also, by writing each handler as a named function, the list of the functions passed to the router is almost self-documenting, telling us the steps the route takes. Lastly, we can also re-use each of the handlers in other routes if we need to. </p> <p>The first handler, <code>addNewGame</code>, uses a SQL <code>INSERT</code> query to create a new database row. Note the <code>?</code> placeholders in the query. This feature of the MySQL2 package allows us to pass in arguments to the query, instead of concating the query with our incoming values. The values passed in from the client can be found on the <code>req.body</code> object, neatly parsed into JSON by Express. We can pass these values in an array as an argument to the query function. The function will substitute each <code>?</code> for a value, in the order that they are passed in the array. We use a function <code>queryResults</code> as we did for the <code>get</code> route, as our callback. Note here that the <code>results</code> parameter on this occasion will have an object of stats and information on the <code>INSERT</code> operation. One of the fields is <code>insertId</code>, which is the automatically assigned <code>id</code> of the new record in the database. We add this to the <code>req.body</code> object, and then call <code>next()</code> to pass control to the next handler, <code>returnGameById</code>. </p> <p>The handler <code>returnGameById</code> queries the database for the newly created object, using the <code>id</code> field we added to the <code>req.body</code> object in the first handler. In the callback for the query, <code>queryResults</code>, we return the database row as a JSON object, using the <code>res.json</code> method. </p> <p>To test this, commit and push the code up again to Code Capsules.</p> <pre><code>git add . \ngit commit -am 'added post route for games'\ngit push origin\n</code></pre> <p>Once it has successfully built and deployed on Code Capsules, we can try this new route out. To do this, download Postman, which is a tool that makes it easier to interact with APIs. </p> <p>Create a new query in Postman, with the HTTP method set to \"POST\". Set the URL to the URL of your Backend Capsule, along with the <code>/games</code> path. Then click the \"Body\" tab, select \"raw\" as the mime type, and select \"JSON\" from the dropdown as the content type. </p> <p>Add the following JSON payload to the body:</p> <pre><code>{\n    \"title\" : \"Super Mario Brothers\", \n    \"platform\" : \"NES\",\n    \"year\" : 1985\n}\n</code></pre> <p>Click \"Send\", and your API should send back the newly inserted game, along with its <code>id</code>:</p> <p></p>","title":"Adding a Create Route"},{"location":"tutorials/game-catalogue-with-nodejs-and-mysql/#adding-an-update-route","text":"<p>Now that we can add a game, and read back the catalogue, we might need to update an entry if we find an entry has a mistake. This is usually expressed as the HTTP PUT method. As a convention, the <code>id</code> of the document to update is passed in the URL path, and the updated document values are sent in the body. </p> <p>We'll use the same pattern as we did for the <code>post</code> route, and re-use the <code>returnGameById</code> function to retrieve the newly updated row from the database. </p> <p>Add this code to add the update route: </p> <pre><code>router.put('/:id', [updateGame, returnGameById]);\n\nfunction updateGame(req, res, next){\n  connection.query(\n    `UPDATE games\n      SET title = ?, platform = ?, year = ?\n      WHERE id = ?`, \n    [req.body.title, req.body.platform, req.body.year, req.params.id], \n    queryResults\n  ); \n\n  function queryResults(err, results, fields){\n    if (err) return next(err); \n    req.body.id = req.params.id\n    return next(); \n  }\n}\n</code></pre> <p>This code is very similar to the <code>post</code> route. The major difference being that we use the SQL <code>UPDATE</code> statement to update an existing row. Note that we get the <code>id</code> of the row to update from the <code>req.params</code> object. This object contains all the parameters passed and defined in the path. </p> <p>In the <code>queryResults</code> callback, we set the <code>req.body.id</code> field to the <code>id</code> from the <code>params</code>. This is so the <code>next()</code> handler can access the <code>id</code> of the updated record and retrieve the latest version from the database. </p> <p>Commit and push this code to deploy it to Code Capsules. Now you can test this route in Postman, by updating the HTTP method to <code>put</code>. Add the id <code>1</code> to the games path, and change some of the information in the body. Click \"Send\" and you should see the API return the updated document. </p> <p></p>","title":"Adding an Update Route"},{"location":"tutorials/game-catalogue-with-nodejs-and-mysql/#adding-a-delete-route","text":"<p>The last route we need to add is a delete route to remove a game entry. Luckily, HTTP has a <code>DELETE</code> method as part of its standard. </p> <p>The delete route will work similarly to our other routes. However, since we are removing a record, we don't need to return any data. We can just return the usual status code to signal everything worked OK. </p> <pre><code>router.delete('/:id', function(req, res, next){\n  connection.query(\n    `DELETE FROM games\n      WHERE id = ?`, \n    [req.params.id],\n    queryResults\n  )\n\n  function queryResults(err, results, fields){\n    if (err) return next(err); \n    return res.sendStatus(200);  \n  }\n});\n</code></pre> <p>As in the update route, we expect the <code>id</code> of the record to delete to be provided by the client in the URL path. Then we run the SQL <code>DELETE</code> command, with the <code>id</code> from the path in <code>req.params.id</code> passed in to replace the single <code>?</code> placeholder. </p> <p>Because we don't have any record to return (we deleted it!), we just return a status code <code>200</code>, which means everything worked OK. </p> <p>Great, it's time to commit this code, push it up and test it. You should be able select the \"DELETE\" verb in Postman, and add in a game <code>id</code> to the route. Click \"Send\", and you should see a blank reply, with the status code as <code>200 OK</code>. </p> <p></p>","title":"Adding a Delete Route"},{"location":"tutorials/game-catalogue-with-nodejs-and-mysql/#adding-authentication","text":"<p>We've built a basic CRUD API, and we can do all the usual operations on it. However, anyone can access it. Let's add some authentication to take care of that issue. </p> <p>For this tutorial, we'll implement a very simple access control system, that only allows access to one pre-defined user. We'll use the HTTP Basic authentication scheme for this, implemented with the Passport package. </p> <p>Let's start by installing the two packages required. The first is the base Passport package, and the second is a package with the HTTP Basic authentication strategy. </p> <pre><code>npm install passport passport-http\n</code></pre> <p>Now we add this as middleware, to check credentials before our <code>games</code> routes are called. In the <code>app.js</code> file, add the following near the top of the file, just under the other package <code>require</code> statements: </p> <pre><code>const passport = require('passport');  \nconst BasicStrategy = require('passport-http').BasicStrategy; \n</code></pre> <p>We'll need a place to store the user credentials, so we can check them against the credentials the client supplies. We can store them in the environment settings, as they'll be stored in plain text, i.e. unencrypted. In a production application, you would store them in the database, with the password hashed and salted. We'll leave that option as something for you to explore :). </p> <p>Head over to the \"Config\" page on your Backend Capsule, and add 2 new environment variables : <code>USERNAME</code> and <code>PASSWORD</code>. Supply values of your own to set your username and password, and click <code>Update Capsule</code> when you are done.  </p> <p></p> <p>Now we can add the Passport code to check incoming credentials against these stored credentials. Add this code just above the <code>var gamesRouter = require('./routes/games');</code> line in <code>app.js</code>:</p> <pre><code>passport.use(new BasicStrategy(\n  function(username, password, done) {\n    if (username === process.env.USERNAME &amp;&amp; password === process.env.PASSWORD){\n      return done(null, {username: process.env.USERNAME }); \n    }\n    else {\n      return done(null, false); \n    }\n  })\n);\n</code></pre> <p>This sets up Passport to use the \"basic\" strategy for authentication. We supply a callback function which checks the incoming credentials against the credentials in the environment variables. If they match, we call the Passport <code>done()</code> function, with the a simple user object containing the user name. If there is no match, we call the <code>done()</code> function with <code>false</code> to signal that we found no match for the user. </p> <p>The final part is to add the Passport authenticate middleware to the routes we want to protect. We'll add it to all our game routes. </p> <p>Update the line:  <pre><code>app.use('/games', [gamesRouter]); \n</code></pre></p> <p>to: </p> <pre><code>app.use('/games', [passport.authenticate('basic', {session: false}), gamesRouter]); \n</code></pre> <p>We set the <code>session</code> flag to false, as the convention for APIs is to require credentials to be passed with every request, i.e. no session cookies are used. </p> <p>Commit and push this updated code to deploy it. Once it is running, if you try any of the routes in Postman, you should see an authentication error message. </p> <p></p> <p>To send the credentials along with your request, select the \"Authorisation\" tab in Postman. Choose \"Basic Auth\" from the dropdown list, and enter the credentials you set in the right-hand pane.</p> <p></p> <p>If you try your query again, it should let you pass, and come back with the usual response. </p> <p></p>","title":"Adding Authentication"},{"location":"tutorials/game-catalogue-with-nodejs-and-mysql/#next-steps","text":"<p>Now that you've built an HTTP REST CRUD API, here are a couple more things to try: </p> <ul> <li>Add more routes. For example, you could add a review for each game.</li> <li>Try different authentication schemes. There are a lot on Passport to choose from. It could be interesting to implement an OAuth 2.0 scheme, as these are often used in production. </li> <li>Try adding validation to the routes, to ensure that the incoming data is in the correct format and has all the necessary fields. </li> </ul>","title":"Next Steps"},{"location":"tutorials/generative-art/","text":"<p></p> <p>Python\u2019s Pillow package provides support for image manipulation that we can leverage to create random graphic images.</p> <p>In this tutorial, we\u2019ll show you how to build a web application that creates images with rectangle graphics of different colors and sizes, and makes them available for download when requested by a user.</p> <p>Here's an example of a graphic image that can be created by the app we'll build:</p> <p></p> <p>You can also add text to the generated images to create image covers and different marketing posts.</p>","title":"Build a Generative Art Application with Pillow, Flask and HTMx"},{"location":"tutorials/generative-art/#requirements","text":"<p>You will need the following to complete the tutorial and host your application on Code Capsules:</p> <ul> <li>A Code Capsules account</li> <li>Git set up and installed, and a registered GitHub account</li> <li>IDE or text editor of your choice</li> <li>Python 3 installed</li> </ul>","title":"Requirements"},{"location":"tutorials/generative-art/#project-set-up","text":"<p>To begin, we need to create a project folder to house all our files.</p> <p>In a terminal, navigate to the directory you'll be keeping the application files in. Run the commands below to create the project folder and navigate into it.</p> <pre><code>mkdir generate-graphics\ncd generate-graphics\n</code></pre> <p>Next we'll create a virtual environment, which will allow us to isolate the packages we need to run our application from the computer system. Run the command below from a terminal in the project root folder to create a virtual environment called <code>env</code>:</p> <pre><code>python -m venv env\n</code></pre> <p>To activate the virtual environment, run one of the following commands depending on your OS:</p> <p>MacOS</p> <pre><code>source env/bin/activate\n</code></pre> <p>Windows</p> <pre><code>.\\env\\Scripts\\activate\n</code></pre> <p>When you\u2019ve activated the virtual environment, the name <code>env</code> will appear on the far left of your current line. This confirms that the activation was successful.</p> <p></p> <p>Now we can install dependencies our app needs to the environment. Run the command below from a terminal in the project root folder to install the packages we\u2019ll need:</p> <pre><code>pip install flask pillow gunicorn\n</code></pre> <p>Let's initialize a Git repository so that we can make use of version control throughout the course of this tutorial and keep track of our changes. Run the command <code>git init</code> to create a new empty repository in the project root folder.</p> <p>The final set up step is to link to GitHub. We'll link our newly created local <code>git</code> repository to a remote one that we can deploy to Code Capsules from. The remote repository can be thought of as a mirror image of the local one, and we'll update the remote repository when new code works as expected locally.</p> <p>Head over to GitHub and create a new repository. You\u2019ll be presented with instructions for linking your new remote repository to a local one. Go back to your terminal in the project root folder and run the command below, taking care to replace the <code>username</code> and <code>repository_name</code> with your own values.</p> <pre><code>git remote add origin git@github.com:username/repository_name.git\n</code></pre>","title":"Project Set Up"},{"location":"tutorials/generative-art/#build-the-frontend","text":"<p>We can now start building our generative art app and we\u2019ll start with the frontend using Flask templates. Create an <code>app/templates</code> folder inside the project root folder and add a file named <code>home.html</code> to it. This file will contain the code for the landing page of our app. Populate it with the code below:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta content=\"width=device-width, initial-scale=1\" name=\"viewport\" /&gt;\n  &lt;title&gt;Generate Art without NFTs&lt;/title&gt;\n  &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\n      integrity=\"sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1\" crossorigin=\"anonymous\"&gt;\n  &lt;!-- HTMX --&gt;\n  &lt;script src=\"https://unpkg.com/htmx.org@1.5.0\"&gt;&lt;/script&gt;\n  &lt;style&gt;\n    @media (min-width: 1000px) {\n      .button-row{\n            width: 50%\n        }  \n      .image-frame {\n        width: 50%;\n        height: 50%;\n      }\n      p {\n        font-size: 20px;\n        padding: 0 180px;\n      }\n    }\n    @media (max-width: 1000px) {\n        .button-row{\n            width: 80%\n        }\n        .image-frame {\n        width: 100%;\n        height: 100%;\n      }\n      p {\n        font-size: 20px;\n        padding: 0 12px;\n      }\n      button{\n        width: 115px;\n        height: 87px;\n        margin: 0 10px;\n      }\n    }\n    body{\n        padding: 20px;\n        text-align: center;\n    }\n    img{\n        width: 75%;\n      height: 75%;\n    }\n    .image-frame{\n        border: 10px solid #213e49;\n        border-radius: 5px;\n        margin: auto;\n        margin-top: 20px;\n    }\n    .button-row{\n        display: flex;\n        flex-direction: row;\n        justify-content: space-around;\n        margin: auto;\n        margin-top: 25px;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;!-- Insert body code here --&gt;\n&lt;/html&gt;\n</code></pre> <p>The <code>&lt;link&gt;</code> tag in the <code>&lt;head&gt;</code> section links to Bootstrap to simplify styling for common HTML elements like forms and buttons, while the <code>&lt;style&gt;</code> tag adds any extra unique styling and responsiveness we might need.</p> <p>The <code>&lt;meta&gt;</code> tag in the <code>&lt;head&gt;</code> section provides the relevant metadata required to allow our <code>@media</code> queries to give our app responsiveness, making it readable on both large and smaller screens.</p> <p>We\u2019ll be using HTMx to send requests to generate a new graphic image, and we include it in the project by adding the <code>&lt;script&gt;</code> tag below the <code>&lt;link&gt;</code> tag. HTMx makes it possible to add interactivity to traditional multipage HTML sites without any of the extra complexity that\u2019s introduced by popular single page frameworks.</p> <p>Next, we'll add the code for the body of the home page. Copy and paste the snippet below underneath the closing <code>&lt;/head&gt;</code> tag in <code>home.html</code>:</p> <pre><code>&lt;body&gt;\n  &lt;h1&gt;Generate Art&lt;/h1&gt;\n\n  &lt;p&gt;The art below is unique. It will never be seen again if you press \"I hate this art, make me another\". If you like it, you can download it and keep it. No need to get blockchain or NFTs or Open Sea involved: just a few lines of Python. Read our tutorial &lt;a href=\"https://codecapsules.io/docs/tutorials/generative-art/\"&gt;Build a Generative Art Application with Pillow, Flask and HTMx&lt;/a&gt; to build your own.&lt;/p&gt;\n\n  &lt;div id=\"image-update-div\"&gt;\n    &lt;div class=\"image-frame\"&gt;\n      &lt;img id=\"new-image\" alt=\"Image could not be found.\" src=\"data:image/png;base64,{{image}}\" /&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"button-row\"&gt;\n      &lt;a download=\"art.png\" href=\"data:image/png;base64,{{image}}\"&gt;\n        &lt;button class=\"btn btn-primary\"&gt;Download&lt;/button&gt;&lt;/a&gt;\n      &lt;button class=\"btn btn-primary\" hx-target=\"#image-update-div\" hx-get=\"/generate-another\" hx-swap=\"outerHTML\"&gt;\n        I hate this art, make me another\n      &lt;/button&gt;\n    &lt;/div&gt;\n\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre> <p>Our app has two main features: it allows a user to generate new graphic images and to download them. The \"I hate this art, make me another\" button sends a request to the <code>/generate-another</code> route, which handles the creation of a new graphic image. When the app generates an image a user likes, the user can download that image by pressing the \"Download\" button. This download button has access to the newly created graphic image.</p> <p>The <code>&lt;img&gt;</code> tag below the page header takes in a Base64 string as input and renders the corresponding graphic image to the screen. The download button also accesses this Base64 string to allow for the download of the image. We\u2019ve assigned an <code>id</code> value of <code>\"image-update-div\"</code> to the div that contains both this image and download button to allow us to use HTMx to update the image when a user clicks the \"I hate this art, make me another\" button. You\u2019ll notice three HTMx attributes in the button's <code>src</code> code, which is located at the bottom of the page. Let\u2019s go over them and see what each one is responsible for:</p> <ul> <li><code>hx-target</code>: This attribute accepts an <code>id</code> value prefixed by a <code>#</code>. It lets HTMx know which element to swap on a successful request.</li> <li><code>hx-get</code>: The <code>hx-get</code> attribute sends a <code>GET</code> request to the specified URL. If we wanted to send a <code>POST</code> request, we would have used the <code>hx-post</code> attribute instead.</li> <li><code>hx-swap</code>: This attribute tells HTMx how to swap out the old with the new elements after a successful request. In our case we\u2019ve used the value of <code>\"outerHTML\"</code> to specify that the entire <code>&lt;div&gt;</code> element be replaced by the response. Other accepted values include but are not limited to <code>innerHTML</code>, <code>beforeend</code>, and <code>afterend</code>.</li> </ul> <p>You can view other HTMx attributes and their functionalities in this HTMx reference guide.</p>","title":"Build the Frontend"},{"location":"tutorials/generative-art/#build-the-backend","text":"<p>The backend contains the interesting bits of our app\u2019s logic. Here, we will see the logic for the two routes that are called in the frontend.</p> <p>Create a file named <code>run.py</code> in the project root folder and populate it with the code below:</p> <pre><code>from app import app\n\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>The code above is responsible for starting our application by calling Flask\u2019s <code>run</code> method.</p>","title":"Build the Backend"},{"location":"tutorials/generative-art/#initialize-app-module","text":"<p>Let\u2019s go ahead and initialize the <code>app</code> module we imported in the previous code snippet. Create an <code>__init__.py</code> file inside the <code>/app</code> folder and populate it with the code below:</p> <pre><code>from flask import Flask\n\napp = Flask(__name__)\n\nfrom app import views\n</code></pre> <p>In the code above, we create a Flask <code>app</code> object and import the app views we\u2019ll add later on.</p>","title":"Initialize <code>app</code> Module"},{"location":"tutorials/generative-art/#add-graphic-image-generation-logic","text":"<p>The next step is to add logic for the graphic image generation. Create a file named <code>palettes.json</code> in the project root folder and populate it with the code in this file. This is a list of 2D arrays containing random numbers that represent different color palettes. We sourced these color palettes from Color-Hex. Our app will pick randomly from these each time a user chooses to generate a new image.</p> <p>Next, let\u2019s create the file that will make use of the palettes we defined. In the <code>/app</code> folder, add a file named <code>make_squares.py</code> and populate it with the code below:</p> <pre><code>import base64\nimport json\nimport random\nimport io\n\nfrom PIL import Image, ImageDraw\n\nBLACK = (0, 0, 0, 255)\n\npalettes = []\nwith open(\"palettes.json\") as f:\n    ps = json.load(f)\n    for p in ps:\n        palette = [tuple(x) for x in p]\n        palettes.append(palette)\n\n\ndef create(save_path):\n    img = Image.new(\"RGBA\", (1000, 1000), (255, 255, 255, 255))\n    d = ImageDraw.Draw(img)\n\n    num_recs = random.randrange(20, 40)\n    min_size = random.randrange(20, 50)\n    max_size = min_size + random.randrange(20, 100)\n    colors = random.choice(palettes)\n    stroke_width = random.randrange(1, 5)\n    xoffset = 0\n    yoffset = 0\n    for row in range(num_recs):\n        for rec in range(num_recs):\n            topleftx = random.randrange(0, 50) + xoffset\n            toplefty = random.randrange(0, 50) + yoffset\n            bottomrightx = topleftx + random.randrange(min_size, max_size)\n            bottomrighty = toplefty + random.randrange(min_size, max_size)\n            color = random.choice(colors)\n            xoffset += 50\n            r = d.rectangle(\n                [topleftx, toplefty, bottomrightx, bottomrighty],\n                fill=color,\n                outline=BLACK,\n                width=stroke_width,\n            )\n        yoffset += 50\n        xoffset = 0\n    img.save(save_path)\n    image = io.BytesIO()\n    img.save(image, \"PNG\")\n    image.seek(0)\n    img_b64 = base64.b64encode(image.getvalue()).decode()\n    return img_b64\n</code></pre> <p>The module defined in the code snippet above leverages the Pillow package to create new random images using the palettes we defined in the <code>palettes.json</code> file. In lines 10-15, we open the <code>palettes.json</code> file and add its contents to a local array named <code>palettes</code> that we\u2019ll use in the <code>create()</code> method.</p> <p>The <code>create()</code> method is responsible for generating Base64 image strings for new random images. It does so by first creating a blank canvas and adding a random number of rectangles of different sizes and colours. When the image has been created, it\u2019s returned as a Base64 image string, which is more efficient to transfer between our app modules.</p>","title":"Add Graphic Image Generation Logic"},{"location":"tutorials/generative-art/#add-app-views","text":"<p>The last step in building our backend is to add the application views. To do this, create a file named <code>views.py</code> inside the <code>/app</code> folder and populate it with the code below:</p> <pre><code>from app import app\nfrom flask import render_template, send_file, request\nfrom app.make_squares import create\nimport io, base64\nfrom PIL import Image\nimport os\n\ntmp_file_path = \"/tmp/imgnew.png\"\n\n\n@app.route(\"/\", methods=[\"GET\"])\ndef index():\n    graphic_image = create(tmp_file_path)\n    return render_template(\"home.html\", image=graphic_image)\n\n\n@app.route(\"/generate-another\", methods=[\"GET\"])\ndef generate_another():\n    graphic_image = create(tmp_file_path)\n    response = f\"\"\"\n    &lt;div id=\"image-update-div\"&gt;\n      &lt;div class=\"image-frame\"&gt;\n      &lt;img id=\"new-image\" src=\"data:image/png;base64,{graphic_image}\" /&gt;\n      &lt;/div&gt;\n      &lt;div class=\"button-row\"&gt;\n        &lt;a download=\"art.png\" href=\"data:image/png;base64,{graphic_image}\"&gt;\n          &lt;button class=\"btn btn-primary\"&gt;Download&lt;/button&gt;&lt;/a&gt;\n        &lt;button class=\"btn btn-primary\" hx-target=\"#image-update-div\" hx-get=\"/generate-another\" hx-swap=\"outerHTML\"&gt;\n          I hate this art, make me another\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    \"\"\"\n    return response\n</code></pre> <p>At the top of the file, we import the <code>create</code> method from the <code>make_squares</code> module, since our views need to return the Base64 image string when responding.</p> <p>The <code>index</code> route is called when the app is first started, and it calls the <code>create()</code> method to generate a Base64 image string and returns it in the <code>home.html</code> template. The <code>/generate-another</code> route is called when a user clicks on the \"I hate this art, make me another\" button. It saves the new graphic image to the <code>/tmp</code> folder before returning it as part of an HTML response, since the request is triggered by HTMx. This allows our app to only refresh the image element, and download refrence, and not the whole page, like in the case of rendering templates.</p>","title":"Add App Views"},{"location":"tutorials/generative-art/#prepare-for-deployment","text":"<p>Our generate art app is now complete and we are only left with adding the files necessary for deployment before we can publish it.</p>","title":"Prepare for Deployment"},{"location":"tutorials/generative-art/#add-procfile-and-requirementstxt","text":"<p>We\u2019ll start by creating a Procfile, which tells Code Capsules how to run our app. Create a file named <code>Procfile</code> in the project root folder and add the following code to it:</p> <pre><code>web: gunicorn run:app\n</code></pre> <p>We use the <code>gunicorn</code> server to run our app in production, since the built-in Flask server is less secure and only suitable to be used in a development environment.</p> <p>Next, we need to generate a <code>requirements.txt</code> file to tell Code Capsules which packages need to be installed first before our app can start. Run the command below from a terminal while in the project\u2019s root folder to create a <code>requirements.txt</code> file.</p> <pre><code>pip freeze \u2013local &gt; requirements.txt\n</code></pre>","title":"Add Procfile and <code>requirements.txt</code>"},{"location":"tutorials/generative-art/#add-virtual-environment-to-gitignore","text":"<p>Before we push our local changes to the remote repository, we need to stop tracking our virtual environment folder. Create a file named <code>.gitignore</code> in the project root folder and add the code below to it:</p> <pre><code>/env\n</code></pre>","title":"Add Virtual Environment to <code>.gitignore</code>"},{"location":"tutorials/generative-art/#add-commit-and-push-git-changes","text":"<p>Let's add and commit all the files we created to our local repository and then push them to the remote one. Do this by running the commands listed below in a terminal while in the project\u2019s root folder:</p> <pre><code>git add -A\ngit commit -m \"Added generative graphics files\"\ngit push -u origin main\n</code></pre> <p>Your remote repository will now be up to date with your local one. </p>","title":"Add, Commit, and Push Git Changes"},{"location":"tutorials/generative-art/#deploy-to-code-capsules","text":"<p>The final step is to deploy our app. Log into your Code Capsules account and link your remote GitHub repository to Code Capsules. Create a Backend Capsule and deploy the app there. You can follow this deployment guide to see how to do this in greater detail.</p> <p>That\u2019s it! Your \"Generate Art\" app should be live and fully functional now.</p> <p></p>","title":"Deploy to Code Capsules"},{"location":"tutorials/host-a-frontend/","text":"<p></p> <p>Static websites allow you to deliver simple content to people over the web. Setting up a static page that demonstrates your business, product, or skills doesn't have to be complex. Skip the learning curve surrounding server management and focus on getting out quality content with Code Capsules.</p> <p>In this tutorial, we'll create a front-end, which is content that visitors see when they load your website. Code Capsules is a service that hosts front-end (and back-end) code online, so we can use it to host a simple portfolio website for free.  </p> <p>With Code Capsules you can:</p> <ul> <li>Manage all of the technical details \u2013 no server management required. </li> <li>Integrate with GitHub to deploy your code with a single <code>git push</code>.</li> </ul> <p>First, we'll take a look at choosing a portfolio template and personalising it. After, we'll push the portfolio to a GitHub repository and connect Code Capsules to GitHub to make the portfolio visible to the world. </p>","title":"Host your front-end developer portfolio"},{"location":"tutorials/host-a-frontend/#requirements-prerequisite-knowledge","text":"<p>Hosting a portfolio on Code Capsules requires no previous knowledge about servers or front-end development. To personalise a portfolio template and deploy it to Code Capsules, we'll need:</p> <ul> <li>A text editor, such as Sublime Text, or VSCode. </li> <li>A registered GitHub account.</li> <li>The Git command-line interface installed. </li> </ul>","title":"Requirements &amp; Prerequisite Knowledge"},{"location":"tutorials/host-a-frontend/#creating-a-portfolio","text":"<p>HTML5 UP provides HTML site templates for free. We'll use the Massively template \u2013 an easy to modify and elegant HTML template.</p> <p>To get started:</p> <ol> <li>Download the Massively template.</li> <li>Create a folder somewhere on your computer, then enter it.</li> <li>Within this folder, create another folder, and extract the Massively template files into it.</li> </ol> <p>This last step is necessary for hosting a web-page on Code Capsules. The file structure should look something like this:</p> <pre><code>myPortfolio  \n    portFolder \n        + assets\n        + images\n        + generic.html\n        + elements.html\n        + index.html\n        + LICENSE.txt\n        + README.txt\n</code></pre> <p>The <code>index.html</code> file contains all of the HTML code for our portfolio \u2013 any changes to this code will result in a change to the portfolio. To view changes you make as we begin to modify the template, double click the <code>index.html</code> file to open the portfolio in a web-browser.</p>","title":"Creating a Portfolio"},{"location":"tutorials/host-a-frontend/#personalizing-the-template","text":"<p>This tutorial will following the creation of a portfolio for a front-end developer. We'll take a closer look at some things you wouldn't want in a portfolio. The next few sections will cover how to modify the following elements of the portfolio template:</p> <ul> <li>The title and subheading.</li> <li>Creating personlised text.</li> <li>The \"Generic Page\" and \"Elements Reference\" tabs.</li> <li>Pagination.</li> <li>The email contact form.</li> <li>Personal information (address, social media account).</li> </ul> <p>Let's start with the title and subheading of the portfolio. Open the index.html file in your text editor. You'll see the following block of HTML near the top of the file:</p> <pre><code>&lt;head&gt;\n    &lt;title&gt;Massively by HTML5 UP&lt;/title&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no\" /&gt;\n    &lt;link rel=\"stylesheet\" href=\"assets/css/main.css\" /&gt;\n    &lt;noscript&gt;&lt;link rel=\"stylesheet\" href=\"assets/css/noscript.css\" /&gt;&lt;/noscript&gt;\n&lt;/head&gt;\n</code></pre> <p>Change the text within the <code>&lt;title&gt;</code> tags to whatever you'd like, such as: \"My Portfolio\". This is what will appear in search engines and browser tabs.</p> <p>Now we'll change the text that displays at the top of the portfolio. Scroll down in your text editor, until you see the following code:</p> <pre><code>&lt;!-- Intro --&gt;\n    &lt;div id=\"intro\"&gt;\n        &lt;h1&gt;This is&lt;br /&gt;\n        Massively&lt;/h1&gt;\n        &lt;p&gt;A free, fully responsive HTML5 + CSS3 site template designed by &lt;a href=\"https://twitter.com/ajlkn\"&gt;@ajlkn&lt;/a&gt; for &lt;a href=\"https://html5up.net\"&gt;HTML5 UP&lt;/a&gt;&lt;br /&gt;\n        and released for free under the &lt;a href=\"https://html5up.net/license\"&gt;Creative Commons license&lt;/a&gt;.&lt;/p&gt;\n        &lt;ul class=\"actions\"&gt;\n            &lt;li&gt;&lt;a href=\"#header\" class=\"button icon solid solo fa-arrow-down scrolly\"&gt;Continue&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n\n&lt;!-- Header --&gt;\n    &lt;header id=\"header\"&gt;\n        &lt;a href=\"index.html\" class=\"logo\"&gt;Massively&lt;/a&gt;\n    &lt;/header&gt;\n</code></pre> <ol> <li> <p>Customise the words wrapped in the <code>&lt;h1&gt;...&lt;/h1&gt;</code> tags \u2013 this is the large text that displays at the top of the portfolio. </p> </li> <li> <p>Change the text within the <code>&lt;p&gt;...&lt;/p&gt;</code> tags to edit the subheading of the portfolio \u2013 the <code>&lt;br /&gt;</code> tags and the <code>&lt;a&gt;...&lt;/a&gt;</code> tags are safe to delete.</p> </li> <li> <p>Edit the \"return-to-top\" button, that appears as you scroll down the portfolio, by editing the text in the \"Massively\" text in the <code>&lt;!-- Header --&gt;</code> section. You can also delete this button  by deleting the three lines wrapped in <code>&lt;header&gt;...&lt;/header&gt;</code> tags.</p> </li> </ol> <p>Save the file and open it in a web browser. Our portfolio should now look something like this: </p> <p></p> <p>Next, we'll take a look at deleting the date entries above each portfolio piece, removing the \"Generic Page\" and \"Elements Reference\" tabs, and modifying the social media links. </p>","title":"Personalizing the Template"},{"location":"tutorials/host-a-frontend/#removing-the-tabs-dates-and-links","text":"<p>The default layout for Massively is designed for a blog or news website containing articles. You may not need dates on a portfolio page. To delete the dates above each article entry, locate and delete all lines beginning with <code>&lt;span class=\"date\"...&gt;</code>.</p> <p>To make this a single-page portfolio, we can delete the \"Generic Page\" and \"Elements Reference\" tabs by finding and deleting these lines:</p> <pre><code>&lt;li&gt;&lt;a href=\"generic.html\"&gt;Generic Page&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"elements.html\"&gt;Elements Reference&lt;/a&gt;&lt;/li&gt;\n</code></pre> <p>While we're at it, alter the title of the main tab by changing the \"This is Massively\" text found just above those lines:</p> <pre><code>&lt;li class=\"active\"&gt;&lt;a href=\"index.html\"&gt;This is Massively&lt;/a&gt;&lt;/li&gt;\n</code></pre> <p>The code for social media accounts is located at the top and bottom of the index.html file. Starting at the top, find this block of code:</p> <pre><code>&lt;ul class=\"icons\"&gt;\n    &lt;li&gt;&lt;a href=\"#\" class=\"icon brands fa-twitter\"&gt;&lt;span class=\"label\"&gt;Twitter&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\" class=\"icon brands fa-facebook-f\"&gt;&lt;span class=\"label\"&gt;Facebook&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\" class=\"icon brands fa-instagram\"&gt;&lt;span class=\"label\"&gt;Instagram&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\" class=\"icon brands fa-github\"&gt;&lt;span class=\"label\"&gt;GitHub&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>Delete any social media account you don't need. Say you don't have an Instagram account, you would delete the following line to remove the Instagram link: </p> <pre><code>&lt;li&gt;&lt;a href=\"#\" class=\"icon brands fa-instagram\"&gt;&lt;span class=\"label\"&gt;Instagram&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n</code></pre> <p>If you'd like to link your social media accounts, enter the account link in place of the <code>#</code> in <code>href=\"#\"</code>. For example, to link a Twitter account, you'd edit the Twitter line like so: </p> <pre><code>&lt;li&gt;&lt;a href=\"https://twitter.com/your_username\" class=\"icon brands fa-twitter\"&gt;&lt;span class=\"label\"&gt;Twitter&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n</code></pre> <p>The social media code at the bottom of the <code>index.html</code> is nearly identical \u2013 follow this same process to edit the code at the bottom. </p>","title":"Removing the tabs, dates, and links"},{"location":"tutorials/host-a-frontend/#removing-unnecessary-content-and-further-personalisation","text":"<p>In this section we'll:</p> <ul> <li> <p>Remove the contact form</p> </li> <li> <p>Remove pagination     </p> </li> <li> <p>Update or remove contact information</p> </li> </ul> <p>1.Remove the contact form found at the bottom of the portfolio by deleting the following code:</p> <pre><code>&lt;section&gt;\n&lt;form method=\"post\" action=\"#\"&gt;\n    &lt;div class=\"fields\"&gt;\n        &lt;div class=\"field\"&gt;\n            &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n            &lt;input type=\"text\" name=\"name\" id=\"name\" /&gt;\n        &lt;/div&gt;\n        &lt;div class=\"field\"&gt;\n            &lt;label for=\"email\"&gt;Email&lt;/label&gt;\n            &lt;input type=\"text\" name=\"email\" id=\"email\" /&gt;\n        &lt;/div&gt;\n        &lt;div class=\"field\"&gt;\n            &lt;label for=\"message\"&gt;Message&lt;/label&gt;\n            &lt;textarea name=\"message\" id=\"message\" rows=\"3\"&gt;&lt;/textarea&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;ul class=\"actions\"&gt;\n        &lt;li&gt;&lt;input type=\"submit\" value=\"Send Message\" /&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/form&gt;\n&lt;/section&gt;\n</code></pre> <p>2.Remove pagination by deleting:</p> <pre><code>&lt;footer&gt;\n  &lt;div class=\"pagination\"&gt;\n      &lt;!--&lt;a href=\"#\" class=\"previous\"&gt;Prev&lt;/a&gt;--&gt;\n      &lt;a href=\"#\" class=\"page active\"&gt;1&lt;/a&gt;\n      &lt;a href=\"#\" class=\"page\"&gt;2&lt;/a&gt;\n      &lt;a href=\"#\" class=\"page\"&gt;3&lt;/a&gt;\n      &lt;span class=\"extra\"&gt;&amp;hellip;&lt;/span&gt;\n      &lt;a href=\"#\" class=\"page\"&gt;8&lt;/a&gt;\n      &lt;a href=\"#\" class=\"page\"&gt;9&lt;/a&gt;\n      &lt;a href=\"#\" class=\"page\"&gt;10&lt;/a&gt;\n      &lt;a href=\"#\" class=\"next\"&gt;Next&lt;/a&gt;\n  &lt;/div&gt;\n&lt;/footer&gt;\n</code></pre> <p>3.To delete specific contact information sections (the address section is shown below), delete the <code>&lt;section&gt;</code> tag, all of the information within that tag, and the corresponding <code>&lt;/section&gt;</code> tag. </p> <pre><code>&lt;section class=\"alt\"&gt;\n    &lt;h3&gt;Address&lt;/h3&gt;\n    &lt;p&gt;1234 Somewhere Road #87257&lt;br /&gt;\n    Nashville, TN 00000-0000&lt;/p&gt;\n&lt;/section&gt;\n</code></pre> <p>If you'd like to personalise your contact information instead, edit the text within the <code>&lt;h3&gt;...&lt;/h3&gt;</code> tags and the <code>&lt;p&gt;...&lt;/p&gt;</code> tags.</p>","title":"Removing unnecessary content and further personalisation"},{"location":"tutorials/host-a-frontend/#personalising-portfolio-pieces","text":"<p>Our portfolio is almost complete \u2013 we just need to personalise the actual portfolio pieces \u2013 customising the images, button links, and other text. Let's start with the images.</p> <p>Gather any images you'd like to replace with the default images. Then, place your images in the <code>images</code> directory, located in the same directory as the <code>index.html</code> file.</p> <p>You can swap images by finding lines wrapped in <code>&lt;img.../&gt;</code> tags, like the below line.</p> <p><pre><code>&lt;img src=\"images/pic01.jpg\" alt=\"\" /&gt;\n</code></pre> <code>images</code> is the name of the directory where you placed your image. To change the image, replace the text \"pic01.jpg\" with the name and file extension of your desired image.</p> <p>Replace the <code>bg.png</code> image in the <code>images</code> folder to replace the background image for the website.</p> <p>Once we've replaced the images, we should change the text for each portfolio entry. Find code blocks wrapped in <code>&lt;article&gt;...&lt;/article&gt;</code> tags, such as: </p> <p><pre><code>&lt;article&gt;\n    &lt;header&gt;\n        &lt;h2&gt;&lt;a href=\"#\"&gt;Sed magna&lt;br /&gt;\n        ipsum faucibus&lt;/a&gt;&lt;/h2&gt;\n    &lt;/header&gt;\n    &lt;a href=\"#\" class=\"image fit\"&gt;&lt;img src=\"images/pic02.jpg\" alt=\"\" /&gt;&lt;/a&gt;\n    &lt;p&gt;Donec eget ex magna. Interdum et malesuada fames ac ante ipsum primis in faucibus. Pellentesque venenatis dolor imperdiet dolor mattis sagittis magna etiam.&lt;/p&gt;\n    &lt;ul class=\"actions special\"&gt;\n        &lt;li&gt;&lt;a href=\"#\" class=\"button\"&gt;Full Story&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/article&gt;\n</code></pre> You can:</p> <ul> <li>Change the entry's title by editing the text within the <code>&lt;h2&gt;...&lt;/h2&gt;</code> tags. </li> <li>Personalise the entry text by editing the Latin wrapped in the <code>&lt;p&gt;...&lt;/p&gt;</code> tags.</li> <li>Customise buttons by finding the <code>&lt;li&gt;&lt;a href=\"#\" class=\"button\"&gt;Full Story&lt;/a&gt;&lt;/li&gt;</code> lines and replacing the \"#\" with a link to your portfolio piece. These buttons can link to more detail about your portfolio piece, say on a youtube or twitter account, by replacing the <code>\"#\"</code> with a link to the details.</li> <li>Replace \"Full Story\" text with something more appropriate.</li> <li>If you don't the button you can delete the <code>&lt;li&gt;&lt;a href=\"#\" class=\"button\"&gt;Full Story&lt;/a&gt;&lt;/li&gt;</code> line.</li> </ul> <p>If you would like to remove a portfolio piece, delete the <code>&lt;article&gt;...&lt;/article&gt;</code> tags and all the text wrapped in the tags.</p> <p>Once finished with the portfolio, we need to push it to GitHub. After, the portfolio can be deployed to Code Capsules, making the portfolio publicly viewable. </p>","title":"Personalising portfolio pieces"},{"location":"tutorials/host-a-frontend/#uploading-to-github","text":"<p>If you already know how to push code from a local repository to a remote repository on GitHub, push the sub-directory containing the portfolio to GitHub and skip to the next section. </p> <p>Otherwise, we'll push (or send) our portfolio code to a GitHub remote repository (a place where your code stores on GitHub). Once complete, Code Capsules can connect to the repository and automatically \"deploy\" the portfolio online. Let's create the remote repository now. </p>","title":"Uploading to GitHub"},{"location":"tutorials/host-a-frontend/#creating-the-remote-repository","text":"<p>Follow the steps below to create a remote repository on GitHub: </p> <ul> <li>Go to www.github.com and log in.</li> <li>Find the \"Create new repository\" button and click it.</li> <li>Name your repository anything (in this picture it was named \"myPortfolio\").</li> <li> <p>Copy the URL given to you under \"Quick setup\".</p> <p> Locate the link to your repository under \"Quick Setup\"</p> </li> </ul>","title":"Creating the remote repository"},{"location":"tutorials/host-a-frontend/#sending-files-to-the-github-repository","text":"<p>We've created the remote repository \u2013 now we need to push the portfolio to GitHub.</p> <p>Open a terminal and navigate to the top-level directory containing the portfolio. This directory should contain the sub-directory that has all the portfolio files. </p> <p>If your file structure looked like: <pre><code>myPortfolio  \n    portFolder \n        + assets\n        + images\n        + generic.html\n        + elements.html\n        + index.html\n        + LICENSE.txt\n        + README.txt\n</code></pre></p> <p>You would open the terminal in the <code>myPortfolio</code> directory. Not the <code>portFolder</code> directory.</p> <p>Enter each command in order:</p> <pre><code>git init\ngit add .\ngit commit -m \"First commit!\"\ngit branch -M main\ngit remote add origin https://github.com/yourusername/yourrepositoryname.git  \ngit push -u origin main\n</code></pre> <p>Replace the URL above with the URL to your remote repository (copied in the previous section).</p> <p>Now you can see the portfolio code in your GitHub repository. Your repository should look similar to the below, where all of your portfolio code is contained in a sub-directory (in this image, the sub-directory is \"portFolder\"):</p> <p></p> <p>Now Code Capsules can host the portfolio. </p>","title":"Sending files to the GitHub repository"},{"location":"tutorials/host-a-frontend/#deploying-to-code-capsules","text":"<p>To deploy the portfolio to Code Capsules, navigate to https://codecapsules.io/, create an account, and log in. </p> <p>After logging in, you'll be greeted with a page that looks like the below.</p> <p></p> <p>Click \"Go to personal Team\" to continue. Notice the \"Team Personal\" at the top left. Every new account starts with a \"Team Personal\". Code Capsules provides Teams for collaborative development \u2013 you can invite other people to your Team and Team members can view and edit your web-applications. You can create other teams - but the default \"Personal\" team is fine for now. </p> <p></p> <p>Click on the box labeled \"Personal\". This is called a Space. Spaces act as a further layer of organization. Spaces can contain one or many Capsules (more on Capsules shortly) and can help organize large projects. We'll take a look at this space soon, but we first need to link Code Capsules to Github.</p>","title":"Deploying to Code Capsules"},{"location":"tutorials/host-a-frontend/#linking-the-repository","text":"<p>We need to give Code Capsules access to our portfolio. Click on your profile image at the top right of the screen, then find the \"GitHub\" button \u2013 click on it. Code Capsules will redirect you to GitHub.</p> <p></p> <p>Then: </p> <ol> <li>Log in to GitHub.</li> <li>Click your username.</li> <li>Press \"Only select repositories\".</li> <li>From the drop-down menu, type the repository's name containing your portfolio and select it.</li> <li> <p>Press \"Install &amp; Authorize\".</p> <p></p> </li> </ol> <p>Now we can deploy our portfolio. Return back to your Team, and enter the space labeled \"Personal\"</p>","title":"Linking the repository"},{"location":"tutorials/host-a-frontend/#creating-capsule-and-viewing-the-portfolio","text":"<p>The last step to deploying the Portfolio is creating a Capsule. Capsules provide the server for your application or code \u2013 in our case, we'll create a Capsule that'll host our portfolio. Click \"Create a new Capsule for your Space\". </p> <p></p> <p>You'll be prompted to choose a Capsule type \u2013 our portfolio contains only front-end code, so choose a \"Frontend\" Capsule and:</p> <ol> <li>Add a repo to your Team.</li> <li>Select a front-end Capsule.</li> <li>Select the \"Trial\" product type, select the repository containing the portfolio, and press \"Next\".</li> <li>Leave the build command blank and enter the name of the sub-directory containing the portfolio files in the \"Static Content Folder Path\" entry box.</li> <li>Press \"Create Capsule\". </li> </ol> <p></p> <p></p> <p></p> <p></p> <p>Your Capsule is now building. This process will make your portfolio visible online. After it has deployed, click the \"Overview\" tab, then press the link under \"Domains\" to view your portfolio.</p> <p></p>","title":"Creating Capsule, and viewing the portfolio"},{"location":"tutorials/host-a-frontend/#conclusion-and-further-reading","text":"<p></p> <p>We've created a portfolio, pushed it to GitHub, and made the portfolio visible to the world. In the future, we'll take a look at \"Backend\" capsules. These \"Backend\" capsules will enable us to host back-end code and provide additional functionality \u2013 like implementing the contact form we removed at the beginning of the tutorial. </p> <p>We'll also take a look at customising your domain, so people can view your portfolio by typing something like <code>https://www.myportfolio.co.za</code></p> <p>If any of the HTML code was confusing, or you'd like to learn more for further customisation, check out this tutorial written by Mozilla. </p> <p>For any help with GitHub, take a look at their documentation.</p>","title":"Conclusion and Further Reading"},{"location":"tutorials/image-api/","text":"<p></p> <p>Creating graphics for social media is a common task. Often the final file combines a template image with some headline text and a logo. While creating this type of image can be done fairly easily with a graphics app, it can quickly become boring and tedious if you need to do it often. </p> <p>Luckily, some programming knowledge can help us out. We can automate the task to give us free time to do other things, like more programming!</p> <p>In this tutorial, we'll build an HTTP REST API to create composite images for social media. </p>","title":"Building an Image Overlay API with Express"},{"location":"tutorials/image-api/#overview-and-requirements","text":"<p>You'll need the following services and software set up for this tutorial:</p> <ul> <li>Git installed and set up, and a registered GitHub account.</li> <li>Node.js installed.</li> <li>A registered Code Capsules account.</li> <li>An IDE or text editor to create the project in. This tutorial was made using Visual Studio Code, but feel free to use any tool you like.</li> </ul>","title":"Overview and Requirements"},{"location":"tutorials/image-api/#setting-up-the-project","text":"<p>With our requirements in place, we can get started on setting them up to work as needed for our web file project.</p>","title":"Setting up the Project"},{"location":"tutorials/image-api/#creating-a-new-repo","text":"<p>We need a place to store our code and from which Code Capsules can deploy to a capsule.</p> <p>Head over to GitHub and create a new repository. We're calling the repo <code>image-api</code> here, but you can call it whatever you like. You can choose a Node <code>.gitignore</code> file to get started.</p> <p></p>","title":"Creating a New Repo"},{"location":"tutorials/image-api/#initializing-the-base-project","text":"<p>Let's get the base code set up. Start by cloning the new GitHub repo onto your local computer and navigate to that directory in a terminal (or command prompt, if you're on Windows).</p> <p>We can initialize a new Node.js project by typing the following in the terminal:</p> <pre><code>npm init\n</code></pre> <p>You'll be asked a bunch of questions \u2013 it's fine to press enter for each of the questions, the defaults are good to start with.</p>","title":"Initializing the Base Project"},{"location":"tutorials/image-api/#installing-packages","text":"<p>Now that we have our project initialized, we can add the packages we will need for our API. These are:</p> <ul> <li>Express, to act as our web server and HTTP request router. We'll use Express to route requests from Slack to the correct logic. </li> <li>node-canvas, to put the images together. node-canvas is a graphics library that mimics an HTML canvas element. Canvas elements are 2D graphics elements that can be drawn on.</li> </ul> <p>Type the following in the terminal to install the packages:</p> <pre><code>npm install express canvas\n</code></pre> <p>Now let's create an <code>index.js</code> file, which will be the main file for our app. An easy way to do this is to open up your project folder in an editor like Visual Studio Code. Now you can create a new <code>index.js</code> file. </p> <p></p> <p>Save this blank file. </p> <p>We also have a font file that we'll need to add to the project. Download and copy this font to your project folder.</p> <p>Great, it's time to push this boilerplate project up to Git. We can do it with the following from the command prompt or terminal: </p> <pre><code>git add . \ngit commit -am 'added libraries, index.js and font'\ngit push origin\n</code></pre>","title":"Installing Packages"},{"location":"tutorials/image-api/#getting-started-with-express","text":"<p>Let's define the inputs and interface of the API to build. We need the user to provide three elements:</p> <ul> <li>A URL to an image to use as the <code>background</code>.</li> <li>Headline <code>text</code> to render over the image.</li> <li>A URL to a <code>logo</code> to use in the image.</li> </ul> <p>A call to the API should look similar to this: </p> <p><pre><code>https://image-api.codecapsules.co.za?background=https://example.com/background.png&amp;logo=https://example.com/logo.png&amp;text=my inspirational message\n</code></pre> When calling an API, the parameters are separated by <code>&amp;</code> and the key-value pairs are separated by <code>=</code>. The values are also typically URL encoded to ensure they are not misinterpreted. The above call URL encoded would be:</p> <pre><code>https://image-api.codecapsules.co.za?background=https%3A%2F%2Fexample.com%2Fbackground.png&amp;logo=https%3A%2F%2Fexample.com%2Flogo.png&amp;text=my%20inspirational%20message\n</code></pre> <p>Express is a popular and well established API framework for Node.js. It is built around the concept of middleware functions. Middleware functions are chained together to provide a processing pipeline for an API request. Let's take a brief look at what that means. </p> <p>A basic Express API route looks something like this:</p> <pre><code>app.get(\"/\", function (req, res) {\n  res.send(\"Hello World!\");\n});\n</code></pre> <p>In this example, <code>app</code> refers to an Express application, which provides all the API functionality. The <code>\"/\"</code> defines the URL endpoint. In this case, it is just the root of the API. The inline function is the route handler, which takes the incoming request <code>req</code>, and provides an object to return the API's result <code>res</code>. </p> <p>This would be enough to create the image API, as we could put all the code in the one route handler function. However, because Express enables multiple middleware functions to be chained together, we can split our code up more logically. Express allows a route to have multiple chained functions, which are run one after the other. Instead of passing the route one route handler, Express allows us to pass an array of them, like this: </p> <p><pre><code>app.get(\"/\", [function (req, res, next) {\n  // do something\n  next();\n}, function (req, res, next) {\n  // do something else\n  next();\n}, function (req, res) {\n  // send the response\n  res.send(\"Hello World!\");\n}]);\n</code></pre> Notice that the <code>next()</code> function is called after each middleware function has completed its particular function. This is how we can chain together multiple middleware functions.</p> <p>The functions don't have to be inline \u2013 we can use named functions. This makes the code very readable, and it's like writing down the steps we need to take. We can then implement the functions one at a time. </p> <p>If we were to break down the processing that the image API needs to do, one sequence could be: </p> <ul> <li>Validate the incoming request for the required parameters.</li> <li>Create a unique identifier for the request, so that multiple requests can be handled in parallel.</li> <li>Download the background image from the given URL.</li> <li>Download the logo image from the given URL.</li> <li>Combine the two images, along with the text.</li> <li>Send the image back to the caller.</li> <li>Clean up the downloaded and temporary files made. </li> </ul> <p>If we write this as a series of middleware functions for the route, it would look something like this:</p> <pre><code>app.get(\"/\", [\n  validateRequest,\n  createIdentifier,\n  downloadBackground,\n  downloadLogo,\n  composeImage,\n  sendImage,\n  cleanupFiles,\n]);\n</code></pre> <p>This is a very readable way to write the code. It becomes clear to others what steps the API route takes, and the order that it takes them. We can implement each of the steps one at a time.</p> <p>Let's start by adding the above code to the <code>index.js</code> file. We'll also need to import the Express library and set up the Express app. Put together, we can add the following code to the <code>index.js</code> file:</p> <pre><code>const express = require(\"express\");\n\nconst app = express();\nconst port = process.env.PORT || '3000';\n\napp.get(\"/\", [\n  validateRequest,\n  createIdentifier,\n  downloadBackground,\n  downloadLogo,\n  composeImage,\n  sendImage,\n  cleanupFiles,\n]);\n\n// Add the middleware function implementations below this line\n\napp.listen(port, function () {\n  console.log(`Image API listening on port ${port}!`);\n});\n</code></pre> <ul> <li>The first line imports the Express library. </li> <li>The second line creates the Express app. </li> <li>The third line sets the port to listen on. This is normally passed in as an environment variable <code>process.env.PORT</code> when the application is hosted. We provide a default value of <code>3000</code> if the environment variable is not set.</li> <li>Then we have the route handler and the calls to the middleware functions. We'll implement these functions in the next section.</li> <li>Finally, we call the <code>app.listen()</code> function to start the server on the given port.</li> </ul>","title":"Getting Started with Express"},{"location":"tutorials/image-api/#writing-the-middleware-functions","text":"<p>Now that we have the outline of the API and a list of all the middleware we need to write, we can implement each step. </p>","title":"Writing the Middleware Functions"},{"location":"tutorials/image-api/#validation-middleware","text":"<p>To validate the request, we'll need to check that the request contains the required parameters. Express provides a <code>req</code> object that contains all the information about the request. The <code>req</code> object has a <code>query</code> property that contains the query parameters. We can use this to check that the request contains the required parameters. If it doesn't, we can return an HTTP <code>400</code> error, which means that the there was something wrong with the request from the caller. We'll also provide a helpful message to the caller, so they are not left guessing what they did wrong. Add the following function just below the <code>Add the middleware functions below this line</code> comment.</p> <pre><code>function validateRequest(req, res, next) {\n  if (!req.query.background){\n    return res.status(400).send(\"missing background\");\n  }\n  if (!req.query.logo){\n    return res.status(400).send(\"missing logo\");\n  }\n  if (!req.query.text){\n    return res.status(400).send(\"missing text\");\n  }\n  next();\n}\n</code></pre>","title":"Validation Middleware"},{"location":"tutorials/image-api/#create-identifier-middleware","text":"<p>Next up, we need to create a unique identifier for the request. This is because we'll be downloading the images from the request URLs, and we'll be creating an output composite image. We'll want to create a unique name, so that it's easy to refer to the images, and so that we can handle multiple requests in parallel. If we just called the downloaded images <code>background</code> and <code>logo</code> for example, as one request is being served, the files might get overwritten by another incoming request. We'd get the images crossed, and probably end up with some very strange end results. </p> <p>To create a unique identifier, we could just create a random number. This would work a lot of the time, but there is a chance that the same number could be chosen. Luckily, this problem has been solved with the very clever invention of something called a Universally Unique Identifier, or UUID for short. They are also known as Globally Unique Identifiers, or GUIDs. UUIDs / GUIDs are a type of randomly generated identifier that is virtually guaranteed to be unique - in the whole world, not just our project!</p> <p>Node has a built-in cryptography module <code>crypto</code> that can create UUIDs. We can import the <code>crypto</code> module by adding the following <code>require</code> line to the top of the <code>index.js</code> file:</p> <pre><code>const crypto = require('crypto');\n</code></pre> <p>Now let's implement the <code>createIdentifier</code> middleware function. Add the following function just below the previous middleware function:</p> <pre><code>function createIdentifier(req, res, next) {\n  const identifier = crypto.randomUUID();\n  req.identifier = identifier;\n  next();\n}\n</code></pre> <p>This function creates a random UUID and stores it in the <code>req</code> object. Since the <code>req</code> object is passed to each of the following middleware functions, we can access this identifier in all of the subsequent functions. You can store all kinds of information on the <code>req</code> object - it's sort of like a backpack that you can put stuff in and carry through all the middleware functions.</p>","title":"Create Identifier Middleware"},{"location":"tutorials/image-api/#download-background-image-middleware","text":"<p>Next up is the <code>downloadBackground</code> function. We need to make a web call to the URL provided by the caller, and save the image to work with later. We'll use the built-in <code>https</code> module to make the web call, and the <code>fs</code> module to save the image to a temporary location.</p> <p>First, we'll need to import the <code>https</code> and <code>fs</code> modules. Add the following <code>require</code> lines to the top of the <code>index.js</code> file:</p> <pre><code>const fs = require(\"fs\");\nconst client = require(\"https\");\n</code></pre> <p>Now let's use these imports in the <code>downloadBackground</code> function. Add the following function just below the previous middleware function.</p> <pre><code>function downloadBackground(req, res, next) {\n  const url = req.query.background;\n  const file = fs.createWriteStream(`./${req.identifier}-background.jpg`);\n\n  client.get(url, (webRes) =&gt; {\n    if (webRes.statusCode &lt; 200 || webRes.statusCode &gt; 299) {\n      return res.status(400).send(`Got status code ${webRes.statusCode} while downloading background`);\n    }\n    webRes.pipe(file).once(\"close\", () =&gt; {\n      next();\n    });\n  }).on(\"error\",(err)=&gt;{\n    return res.status(500).send(\"error downloading background\");\n  });\n}\n</code></pre> <p>Here we retrieve the URL of the image to download from the <code>req</code> object. This is stored in the <code>req.query.background</code> property. Then we create a file stream to write the image to. We'll use the <code>fs</code> module to create the file stream, using the <code>createWriteStream()</code> function. The argument to this function is the path to the file we want to write to. Notice that we combine the <code>identifier</code> we added to the <code>req</code>, along with the word <code>background</code> to make a unique filename.</p> <p>Then we make the web call to the URL. We use the built-in <code>https</code> module, using its <code>get()</code> function to make the web call. The first argument to this function is the URL to download the image from. The second argument is a callback function that is called when the web call is complete. The callback function passes a web response object to the callback.</p> <p>We can check this web response object <code>webRes</code> to see if the web call was successful. A simple (but not totally foolproof) way of checking if the call was successful is to check the status code. By convention, web servers should return an <code>OK</code> code, which is generally a code within the 200-299 range. Therefore, if the status code is less than 200 or greater than 299, we can return an error and exit early. Note that by calling <code>res.send</code> early, we prevent the next middleware function from being called.</p> <p>If the web call was successful, we pipe the web response to the file stream. This means that the web response will be written to the file stream. When the web response is complete, the file stream is closed. We can check if the file stream is closed by listening for the <code>close</code> event. When the file stream is closed, we call the <code>next()</code> function to move on to the next middleware function.</p> <p>The <code>https</code> client also has an <code>error</code> event that we can listen for. Should any other errors occur, such as network errors, we return an error and exit early.</p>","title":"Download Background Image Middleware"},{"location":"tutorials/image-api/#download-logo-image-middleware","text":"<p>To download the logo, we'll need to do the same thing as we did for the background image. Add the following function under the <code>downloadBackground</code> function.</p> <pre><code>function downloadLogo(req, res, next) {\n  const url = req.query.logo;\n  const file = fs.createWriteStream(`./${req.identifier}-logo.jpg`);\n\n  client.get(url, (webRes) =&gt; {\n    if (webRes.statusCode &lt; 200 || webRes.statusCode &gt; 299) {\n      return res.status(400).send(`Got status code ${webRes.statusCode} while downloading logo`);\n    }\n    webRes.pipe(file).once(\"close\", () =&gt; {\n      next();\n    });\n  }).on(\"error\",(err)=&gt;{\n    return res.status(500).send(\"error downloading logo\");\n  });\n}\n</code></pre>","title":"Download Logo Image Middleware"},{"location":"tutorials/image-api/#compose-image-middleware","text":"<p>Now we get to the heart of the API's function: putting the images and text together in a composition. The <code>canvas</code> module can do all of this for us. First, we'll need to import the <code>canvas</code> module. Add the following <code>require</code> line to the top of the <code>index.js</code> file:</p> <pre><code>const { createCanvas, loadImage, registerFont } = require(\"canvas\");\n</code></pre> <p>This imports two functions that we'll need from the <code>canvas</code> module. The <code>createCanvas</code> function creates a canvas object that we can draw our composite image on, and the <code>loadImage</code> function loads images from the file system. Using <code>loadImage</code> we can load the images we downloaded earlier, and then draw them to the canvas to create our composite image.</p> <pre><code>async function composeImage(req, res, next) {\n\n  const background = await loadImage(`./${req.identifier}-background.jpg`);\n  const logo = await loadImage(`./${req.identifier}-logo.jpg`);\n\n  const width = background.width;\n  const height = background.height;\n\n  registerFont(\"./ShortBaby.ttf\", { family: \"ShortBaby\" });\n  const canvas = createCanvas(width, height);\n  const context = canvas.getContext(\"2d\");\n\n  const logoPadding = 20;\n  context.drawImage(background, 0, 0, width, height);\n  context.drawImage(logo, width - logo.width - logoPadding, height - logo.height - logoPadding);\n\n  const textPadding = 30;\n  context.font = \"bold 70pt ShortBaby\";\n  context.textAlign = \"left\";\n  context.textBaseline = \"top\";\n\n  const textSize = context.measureText(req.query.text);\n  context.fillStyle = \"rgba(255, 255, 255, 0.8)\"\n  context.fillRect(0, 0, textSize.width + 2*textPadding, 200);\n\n  context.fillStyle = \"#444\";\n  context.fillText(req.query.text, textPadding, textPadding);\n\n\n  const buffer = canvas.toBuffer(\"image/png\");\n  req.compositeImageBuffer = buffer;\n  next();\n}\n</code></pre> <p>There is quite a bit of code in this function, so let's break it down. In the first two lines, we load up the <code>background</code> and <code>logo</code> images from file using the <code>loadImage</code> function, along with the identifier we stored in the <code>req</code> object. </p> <p>In the following two lines, we extract and store the width and height of the background image. Then we load up our font to use, before creating a new, blank canvas object with these dimensions. A blank canvas is like opening up Paint and creating a new file. After we create the canvas, we get a reference to the context of the canvas. The context is the interface to the canvas, and it's the way we draw onto the canvas. It has all the functions to add images, text, shapes, fills, etc. to your canvas. You can think of it as equivalent to the tools palette in Paint or Photoshop, with all the brushes, pens, buckets, etc. </p> <p>Because we want the logo to be a little indented from the right and bottom of the background image, we use the <code>logoPadding</code> variable to define the amount of padding we want. Then we draw the background image to the canvas, using the <code>drawImage()</code> function. The first argument to this function is the image we want to draw, and the second and third arguments are the x- and y-coordinates of where we'll place the top left corner of the image. The next two coordinates are the width and height of the image we want to draw. </p> <p>Then we draw the logo image to the canvas using the <code>drawImage()</code> function again. This time, we place it at the bottom right corner of the canvas, adjusted by the padding amount. </p> <p>Now we need to add the text to the image. We define a padding value for the text, as we want it offset from the sides of the image. We use the <code>textPadding</code> variable to define this amount. Then we define the font and size we want the text to be, along with the alignment when we draw it. </p> <p>Text drawn straight onto an image can be difficult to read, especially if the image has colors close to the text. To solve this problem, we'll first draw a background rectangle behind the text. This will give us a nice contrast between the text and the background. To find out how wide this background should be, we use the <code>measureText()</code> function. This function returns an object with the dimensions in pixels of the area the text will occupy, given the set font and size. We also set the <code>fillStyle</code> to specify the color the background should be. We're using <code>rgba</code> notation, which specifies the red, green, blue, and alpha values for the color. Alpha is the amount of transparency the fill should have, on a scale from 0 (totally transparent) to 1 (totally opaque). We then use the <code>fillRect()</code> function to draw the background rectangle. The first two arguments are the x- and y-coordinates of the top left corner of the rectangle, and the next two arguments are the width and height of the rectangle. We pad the edges of the background rectangle a bit to make sure the text is not too close to the edges of the background. </p> <p>Now we can finally draw the text. First thing is to set the font on the context, and specify the alignment. Then we change the <code>fillStyle</code> to the color we want for the text. This time, we're using Hex notation for the color, in RGB order. The code <code>#444</code> is dark gray. Then we use the <code>fillText()</code> function to draw the text. The first argument is the text we want to draw, and the next two arguments are the x- and y-coordinates of the top left corner of where we want to draw the text. This is our padding offset. </p> <p>Finally, we use the <code>toBuffer()</code> function to convert the canvas to a buffer, which is a binary representation of the image that we can use to write an image file. We then use the same trick we used to store the <code>identifier</code> on the request object <code>req</code>, so that it is available to the next middleware function to use.</p>","title":"Compose Image Middleware"},{"location":"tutorials/image-api/#returning-the-image","text":"<p>Now we need to send the image back to the API caller. Add the following function after the <code>composeImage</code> function:</p> <pre><code>async function sendImage(req, res, next) {\n  res.setHeader(\"Content-Type\", \"image/png\");\n  res.send(req.compositeImageBuffer);\n  next(); \n}\n</code></pre> <p>This function sets the header's <code>Content-Type</code> to <code>image/png</code>, which lets the API caller know the data type to expect. Then we use the <code>send</code> function on the result object <code>res</code> to send the image buffer we saved onto the <code>req</code> object back to the API caller. Then we call <code>next()</code> to move on to the next function in the pipeline.</p>","title":"Returning the Image"},{"location":"tutorials/image-api/#clean-up-middleware","text":"<p>The next step is to clean up the downloaded files, as we don't need them once the image has been created and sent back to the API caller. We add empty callbacks, as we don't really need the result of the operation. In a production system, you might log the result in case there is an error when deleting. Add the following function after the <code>sendImage</code> function:</p> <pre><code>async function cleanupFiles(req, res, next) {\n  fs.unlink(`./${req.identifier}-background.jpg`, () =&gt; {});\n  fs.unlink(`./${req.identifier}-logo.jpg`, () =&gt; {});\n  next();\n}\n</code></pre>","title":"Clean up Middleware"},{"location":"tutorials/image-api/#testing-the-api-out","text":"<p>Now that the API is complete, we can test it out. First we need to start the API. From a terminal, run the following command:</p> <p><pre><code>node index.js\n</code></pre> You should see the message <code>Image API listening on port 3000</code> in the terminal. Our API is now listening for requests on port 3000.</p> <p>Let's test our API out with some example images and text. We'll use the Code Capsules logo, and a stock image background image we've linked here. And of course, for the text, we'll use the classic \"Hello World\".</p> <p>Combining all this into the URL to call our API looks like this:</p> <pre><code>http://localhost:3000?background=https://codecapsules.io/docs/assets/tutorials/image-api/background.png&amp;logo=https://codecapsules.io/assets/images/v2/logo-code-capsules-brand-dark.svg&amp;text=Hello World\n</code></pre> <p>As we discussed earlier, before we call this, we need to URL encode the parameters. There are a few online services to do this, like https://www.urlencoder.io. After encoding the URL, it should look like this: </p> <pre><code>http://localhost:3000?background=https%3A%2F%2Fcodecapsules.io%2Fdocs%2Fassets%2Ftutorials%2Fimage-api%2Fbackground.png&amp;logo=https%3A%2F%2Fcodecapsules.io%2Fassets%2Fimages%2Fv2%2Flogo-code-capsules-brand-dark.svg&amp;text=Hello%20World\n</code></pre> <p>If you have <code>curl</code> installed, you can use the following command to test it out:</p> <p><pre><code>curl -X GET \"http://localhost:3000?background=https%3A%2F%2Fcodecapsules.io%2Fdocs%2Fassets%2Ftutorials%2Fimage-api%2Fbackground.png&amp;logo=https%3A%2F%2Fcodecapsules.io%2Fassets%2Fimages%2Fv2%2Flogo-code-capsules-brand-dark.svg&amp;text=Hello%20World\" &gt; output.png\n</code></pre> This will create the image, and save it to the file <code>output.png</code>. Open it up, and you should see the following:</p> <p></p> <p>You can also test it out directly in the browser by visiting the following URL:</p> <pre><code>http://localhost:3000?background=https%3A%2F%2Fcodecapsules.io%2Fdocs%2Fassets%2Ftutorials%2Fimage-api%2Fbackground.png&amp;logo=https%3A%2F%2Fcodecapsules.io%2Fassets%2Fimages%2Fv2%2Flogo-code-capsules-brand-dark.svg&amp;text=Hello%20World\n</code></pre>","title":"Testing the API out"},{"location":"tutorials/image-api/#add-commit-and-push-git-changes","text":"<p>Let's add and commit all the files we created to our local repository and then push them to the remote one. Do this by running the commands listed below in a terminal while in the project\u2019s root folder:</p> <pre><code>git add -a\ngit commit -m \"Added image editing files\"\ngit push -u origin main\n</code></pre> <p>Your remote repository will now be up to date with your local one.</p>","title":"Add, Commit, and Push Git Changes"},{"location":"tutorials/image-api/#deploy-to-code-capsules","text":"<p>The final step is to deploy our app. Log in to your Code Capsules account and link your remote GitHub repository to Code Capsules. Create a Backend Capsule to deploy your app. You can follow this deployment guide to see how to do so in greater detail.</p> <p>That\u2019s it! Your image editing app should be live and fully functional now.</p>","title":"Deploy to Code Capsules"},{"location":"tutorials/image-api/#next-steps","text":"<p>Nice work on building an API! Hopefully you've seen the possibilities of building APIs with Node.js and Express. If you'd like to learn more about Express, check out the Express website.</p> <p>Some things you can do to improve the API or just to experiment with it are:</p> <ul> <li>Allow the font to be passed as a parameter.</li> <li>Allow text color and background to be passed as a parameter.</li> <li>We use the <code>https</code> module to download the images. This only supports HTTPS requests. We can use the <code>http</code> module to download the images if we want to support HTTP requests as well. Or you can try another HTTP client library like <code>axios</code>.</li> <li>Advanced: Specify the resulting image size, and how it should resize the background.</li> </ul>","title":"Next Steps"},{"location":"tutorials/image-api/#credits","text":"<p>The background image we used is from https://opengameart.org/content/background-3.</p> <p>The font \"ShortBaby\" is from https://www.fontspace.com/short-baby-font-f34907.</p> <p>The logo is from Code Capsules. </p>","title":"Credits"},{"location":"tutorials/stripe-checkout-and-email-with-flask/","text":"<p></p>","title":"Adding Functionality to Your Web Application: Setting up Stripe Checkout and Email Subscription with Flask and Code Capsules"},{"location":"tutorials/stripe-checkout-and-email-with-flask/#what-well-cover","text":"<p>Constructing a frontend for your web application is the first step towards providing an interactive user experience. The next step is building a working backend, or making your web application functional. Buttons are nice to have, but it's more interesting to have those buttons do something. That's what we'll focus on today.</p> <p>Through a step-by-step process, we'll develop this functionality. We'll use Flask and a frontend template to create a web application that allows users to buy products through Stripe Checkout (a tool for creating a \"checkout\" process for products) and subscribe to an email list with help from the Mailgun email API service.</p> <p>Then, we'll host the web application on Code Capsules so people around the world can buy your product and subscribe to your mailing list.</p>","title":"What We'll Cover"},{"location":"tutorials/stripe-checkout-and-email-with-flask/#requirements","text":"<p>To successfully complete this project, we'll need:</p> <ul> <li>A text editor (like Sublime or VSCode) installed.</li> <li>Python 3.XX+ installed.</li> <li>Virtualenv installed.</li> <li>Git installed and a GitHub account.</li> <li>A Code Capsules account.</li> </ul>","title":"Requirements"},{"location":"tutorials/stripe-checkout-and-email-with-flask/#setting-up-the-frontend","text":"<p>We'll use the Laurel frontend template from https://cruip.com to add our functionality. This template is perfect for our project \u2013 there is already an email subscription box that just needs to be implemented and, with a few modifications, we'll implement a \"Buy Now\" button.</p> <p>After downloading the Laurel template:</p> <ol> <li> <p>Create a directory named <code>project</code>.</p> </li> <li> <p>Within the <code>project</code> directory, create a sub-directory named <code>templates</code>.</p> </li> <li> <p>Open the downloaded template and extract the files within the <code>laurel</code> directory into the <code>templates</code> subdirectory.</p> </li> </ol> <p>You can view the template by opening the <code>index.html</code> file in the <code>templates</code> subdirectory. We'll change the first \"Early access\" button to \"Buy Now\" and implement Stripe Checkout functionality for it.</p> <p>Then we'll change the second \"Early access\" button at the bottom of the template to \"Subscribe\", and implement the email subscription functionality for it.</p> <p>First, let's change the \"Early access\" button texts.</p>","title":"Setting Up the Frontend"},{"location":"tutorials/stripe-checkout-and-email-with-flask/#modifying-the-early-access-text","text":"<p>We'll start with changing the first \"Early access\" button to \"Buy Now\". Open the <code>index.html</code> file in a text editor.</p> <p>Find this line:</p> <pre><code>&lt;div class=\"hero-cta\"&gt;&lt;a class=\"button button-shadow\" href=\"#\"&gt;Learn more&lt;/a&gt;&lt;a class=\"button button-primary button-shadow\" href=\"#\"&gt;Early access&lt;/a&gt;&lt;/div&gt;\n</code></pre> <p>Replace it with:</p> <pre><code>&lt;div class=\"hero-cta\"&gt;\n    &lt;a class=\"button button-shadow\" href=\"#\"&gt;Learn more&lt;/a&gt;\n    &lt;a id=\"checkout-button\" class=\"button button-primary button-shadow\" href=\"#\"&gt;Buy Now&lt;/a&gt;\n&lt;/div&gt;\n</code></pre> <p>As well as changing \"Early access\" to \"Buy Now\", we've added [SOMETHING?], and given it an ID with <code>id=\"checkout-button\"</code>. This will be useful when implementing Stripe Checkout.</p> <p>Next, find this line:</p> <pre><code>&lt;a class=\"button button-primary button-block button-shadow\" href=\"#\"&gt;Early access&lt;/a&gt;\n</code></pre> <p>Replace \"Early access\" with \"Subscribe\".</p> <p>View the changes by saving the <code>index.html</code> file and re-opening it in a web browser. We have one more task before building our Flask backend.</p>","title":"Modifying the \"Early access\" text"},{"location":"tutorials/stripe-checkout-and-email-with-flask/#project-directory-restructuring","text":"<p>To make a functional web application out of our template, Flask requires a specific directory structure, so we will need to reorganize the <code>project</code> directory. To do this:</p> <ol> <li> <p>Create a new directory named <code>static</code> in the <code>project</code> directory.</p> </li> <li> <p>Navigate to the <code>templates</code> directory and then the <code>dist</code> directory.</p> </li> <li> <p>Copy all of the directories located in <code>dist</code> into the <code>static</code> directory that we created above.</p> </li> </ol> <p>Your <code>project</code> file structure should look like this:</p> <pre><code>project\n    static\n      css\n        + style.css\n      images\n        + iphone-mockup.png\n      js\n        + main.min.js\n    templates\n</code></pre> <p>This was necessary because Flask strictly serves CSS, JavaScript, and images from the <code>static</code> directory, and renders HTML files in the <code>templates</code> directory. Because we've moved our template's files around, we now need to edit our <code>index.html</code> file to point to their new locations.</p> <p>Flask uses the Jinja templating library to allow us to embed backend code in HTML. This code will be executed on the webserver before a given page is served to the user, allowing us to give that page dynamic functionality and make it responsive to user input.</p> <p>The first thing we will use Jinja templating for is to dynamically locate and load our <code>index.html</code> file's stylesheet. Open the <code>index.html</code> file in the <code>templates</code> folder and find this line:</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"dist/css/style.css\"&gt;\n</code></pre> <p>Replace the value of <code>href</code> with the string below.</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"{{url_for('static',filename='css/style.css')}}\"&gt;\n</code></pre> <p>In Jinja, anything between <code>{{</code> and <code>}}</code> is server-side code that will be evaluated before the page is served to users, i.e. when it is rendered. In this way, we can include the output of Python functions and the values of Python variables in our HTML. Jinja syntax is similar to Python, but not identical.</p> <p>In the Jinja code above, we're calling the function <code>url_for()</code>, which asks Flask to find the location of our <code>style.css</code> file in our <code>static</code> directory.</p> <p>Speaking of Flask, we're almost ready to implement our functionality.</p>","title":"Project directory restructuring"},{"location":"tutorials/stripe-checkout-and-email-with-flask/#setting-up-the-virtual-environment","text":"<p>We'll create a virtual environment for our project. The virtual environment will be useful later on when we host our web application on Code Capsules, as it will ensure that the Python libraries we use for development are installed in the Capsule.</p> <p>To create a virtual environment, navigate to the <code>project</code> directory in a terminal and enter <code>virtualenv env</code>.</p> <p>Activate the virtual environment with:</p> <p>Linux/MacOSX: <code>source env/bin/activate</code></p> <p>Windows: <code>\\env\\Scripts\\activate.bat</code></p> <p>If the virtual environment has activated correctly, you'll notice <code>(env)</code> to the left of your name in the terminal. Keep this terminal open \u2013 we'll install the project requirements next.</p>","title":"Setting Up the Virtual Environment"},{"location":"tutorials/stripe-checkout-and-email-with-flask/#installing-the-requirements","text":"<p>For our project, we'll use the following libraries:</p> <ul> <li> <p>Flask is a lightweight Python web development framework.</p> </li> <li> <p>Gunicorn is the WSGI server we'll use to host our application on Code Capsules.</p> </li> <li> <p>Requests is a Python library that allows us to send HTTP requests.</p> </li> <li> <p>Stripe is another Python library that will help us interact with the Stripe API.</p> </li> </ul> <p>Install these by entering the command below in the virtual environment.</p> <pre><code>pip3 install flask gunicorn requests stripe\n</code></pre> <p>Now we can build the backend for our web application.</p>","title":"Installing the requirements"},{"location":"tutorials/stripe-checkout-and-email-with-flask/#creating-the-flask-application","text":"<p>In the <code>projects</code> folder, create a new file named <code>app.py</code>. This file will contain all of our Flask code.</p> <p>Open the <code>app.py</code> file in a text editor and enter the following:</p> <pre><code>from flask import Flask, render_template, request\nimport requests, stripe\n\napp = Flask(__name__)\n\n@app.route(\"/\",methods=[\"GET\",\"POST\"])\ndef index():\n  return render_template(\"index.html\")\n\nif __name__== '__main__':\n  app.run(debug=True)   \n</code></pre> <p>We import the following functions from <code>flask</code>:</p> <ul> <li><code>Flask</code>, which provides the Flask application object.</li> <li><code>render_template()</code>, which will render our <code>index.html</code> file.</li> <li><code>request</code>, an object which contains any information sent to our web application \u2013 later this will be used to retrieve the email address entered in our subscription box. Be careful not to confuse this with the <code>requests</code> library.</li> </ul> <p>The <code>index</code> function has a route decorator which causes it to execute when Flask receives an HTTP <code>GET</code> or <code>POST</code> request for the \"/\" URL, i.e. when someone navigates to the website's domain or IP address in a browser.</p> <p>When <code>render_template(\"index.html\")</code> runs, Flask will look in the <code>templates</code> directory for a file named <code>index.html</code> and render it by executing its Jinja template code and serving the resulting HTML. To see this, run <code>app.py</code> with <code>flask run</code> in your terminal. Open the provided IP address in your browser \u2013 the web application should look like this:</p> <p></p> <p>Let's make this web application useful and implement the first bit of functionality \u2013 the email list feature.</p>","title":"Creating the Flask Application"},{"location":"tutorials/stripe-checkout-and-email-with-flask/#signing-up-for-mailgun","text":"<p>We'll use Mailgun to handle our email subscriber list. Mailgun is free up to 5,000 emails per month. Register with Mailgun and continue.</p> <p>With an account registered, create a mailing list by doing the following:</p> <ol> <li> <p>Log in to Mailgun.</p> </li> <li> <p>Click \"Sending\" then \"Mailing lists\" on the dashboard.</p> <p></p> </li> <li> <p>At the top right, click \"Create mailing list\".</p> </li> <li> <p>Enter whatever you'd like for the address prefix, name, and description \u2013 leave everything else default.</p> </li> <li> <p>Click \"Add mailing list\".</p> </li> </ol> <p>Navigate to the mailing list we just created. You'll see something called an alias address \u2013 Mailgun provides every new mailing list with one. When you send an email to your alias address, Mailgun sends a copy of the email to everyone who is subscribed to your mailing list. Jot down your alias address, we'll use it soon.</p> <p>Next, you'll need to retrieve the API key for your Mailgun account. We'll use this API key in our web application to validate your Mailgun account when people subscribe to your mailing list.</p> <p>Find the API key by clicking on your account at the top right of the screen. Click \"API keys\", and make a note of your private API key.</p>","title":"Signing up for Mailgun"},{"location":"tutorials/stripe-checkout-and-email-with-flask/#implementing-the-subscribe-button","text":"<p>With the mailing list created, we can implement the subscribe button.</p> <p>Re-open the <code>index.html</code> file. At the bottom of the file, find the line:</p> <pre><code> &lt;section class=\"newsletter section\"&gt;\n</code></pre> <p>From the above line down to its corresponding <code>&lt;/section&gt;</code> tag, replace all of the markup with the following:</p> <pre><code>&lt;section class=\"newsletter section\"&gt;\n  &lt;div class=\"container-sm\"&gt;\n    &lt;div class=\"newsletter-inner section-inner\"&gt;\n      &lt;div class=\"newsletter-header text-center\"&gt;\n        &lt;h2 class=\"section-title mt-0\"&gt;Stay in the know&lt;/h2&gt;\n        &lt;p class=\"section-paragraph\"&gt;Lorem ipsum is common placeholder text used to demonstrate the graphic elements of a document or visual presentation.&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;form method=\"POST\"&gt;\n        &lt;div class=\"footer-form newsletter-form field field-grouped\"&gt;\n          &lt;div class=\"control control-expanded\"&gt;\n            &lt;input class=\"input\" type=\"email\" name=\"email\" placeholder=\"Your best email&amp;hellip;\"&gt;\n          &lt;/div&gt;\n          &lt;div class=\"control\"&gt;\n            &lt;button class=\"button button-primary button-block button-shadow\" type=\"submit\"&gt;Subscribe&lt;/a&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/form&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/section&gt;\n</code></pre> <p>The important part of this HTML for our functionality is the <code>form</code> tag. Let's take a closer look at it.</p> <pre><code>      &lt;form method=\"POST\"&gt;\n        &lt;div class=\"footer-form newsletter-form field field-grouped\"&gt;\n          &lt;div class=\"control control-expanded\"&gt;\n            &lt;input class=\"input\" type=\"email\" name=\"email\" placeholder=\"Your best email&amp;hellip;\"&gt;\n          &lt;/div&gt;\n          &lt;div class=\"control\"&gt;\n            &lt;button class=\"button button-primary button-block button-shadow\" type=\"submit\"&gt;Subscribe&lt;/a&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/form&gt;\n</code></pre> <p>This contains one <code>input</code>, for the user's email address, and a <code>button</code> for submitting that email address. When the user clicks on the button, an HTTP request will be sent from their browser to our Flask backend, containing the email address. As per the <code>method</code> attribute of the <code>form</code> tag, this will be a [POST request.</p> <p>Recall that the Python code we entered in the last section provided for both <code>GET</code> and <code>POST</code> HTTP requests. As submitting this form will also send a request to \"/\", we can differentiate between a user browsing to our website (<code>GET</code>) and subscribing to our mailing list (<code>POST</code>) by looking at the HTTP method. We'll do that in the next section.</p>","title":"Implementing the Subscribe Button"},{"location":"tutorials/stripe-checkout-and-email-with-flask/#subscribe-functionality-in-flask","text":"<p>Return to the <code>app.py</code>  file. Find this line:</p> <pre><code>@app.route(\"/\",methods[\"GET\",\"POST\"])\n</code></pre> <p>Just above it, enter this code:</p> <pre><code>def subscribe(user_email, email_list, api_key):\n  return requests.post(\n        \"https://api.mailgun.net/v3/lists/\"+email_list+\"/members\",\n        auth=('api', api_key),\n        data={'subscribed': True,\n              'address': user_email,})\n</code></pre> <p>This function is called when a user clicks the \"Subscribe\" button. It takes three arguments:</p> <ul> <li> <p><code>user_email</code>: The email the user has entered.</p> </li> <li> <p><code>email_list</code>: Your Mailgun alias address.</p> </li> <li> <p><code>api_key</code>: Your Mailgun secret API key.</p> </li> </ul> <p>The real logic is contained in the <code>return</code> line. Here, we use <code>requests.post()</code> to add the <code>user_email</code> to our <code>email_list</code>, by sending (or \"posting\") all of the values in <code>data</code> to Mailgun's email list API.</p> <p>Next, modify the current <code>index()</code> function like below, replacing <code>MAILGUN_ALIAS</code> and <code>YOUR-MAILGUN-PRIVATE-KEY</code> with the email alias and private API key we previously retrieved:</p> <pre><code>@app.route(\"/\",methods[\"GET\",\"POST\"])\ndef index():\n  if request.method == \"POST\":\n    user_email = request.form.get('email')\n    response = subscribe(user_email,\n      'MAILGUN_ALIAS',\n      'YOUR-MAILGUN-PRIVATE-KEY')\n\n  return render_template(\"index.html\")\n</code></pre> <p>In the previous section, we added the <code>POST</code> method to the subscribe button. We will therefor know when someone has clicked the subscribe button with the line:</p> <pre><code>if request.method == \"POST\":\n</code></pre> <p>If they've clicked the subscribe button, we obtain the email they entered by referencing the relevant <code>input</code> field's <code>name</code> attribute in <code>request.form.get</code>, and adding the email to the mailing list our <code>subscribe</code> method.</p> <p>Try it out: enter an email address and hit \"Subscribe\". Navigate back to the \"Mailing lists\" tab on Mailgun and click on the list we created. You will find the email address you just submitted under \"Recipients\".</p> <p>All that's left is to add functionality to our \"Buy Now\" button.</p>","title":"Subscribe functionality in Flask"},{"location":"tutorials/stripe-checkout-and-email-with-flask/#implementing-buy-now-with-stripe-checkout","text":"<p>Stripe Checkout allows business owners to accept payments on their web applications. Let's create an account. After creating an account, log in and find your API keys by clicking \"Developers\" then \"API keys\" on the dashboard.</p> <p></p> <p>Here we'll see two API keys \u2013 a publishable API key, and a secret API key. You can think of these as a username and password. Stripe uses the publishable API key to identify your account, and the secret API key to ensure it's really you using it.</p> <p>Open the <code>app.py</code> file. Above the subscribe function, add the following lines, replacing <code>YOUR PUBLISHABLE KEY HERE</code> and <code>YOUR SECRET KEY HERE</code> appropriately:</p> <pre><code>app.config['STRIPE_PUBLISH_KEY'] = 'YOUR PUBLISHABLE KEY HERE'\napp.config['STRIPE_SECRET_KEY'] = 'YOUR SECRET KEY HERE'\nstripe.api_key = app.config['STRIPE_SECRET_KEY']\n</code></pre> <p>In thid code, we place the two Stripe keys in our Flask app's configuration settings for ease of access, then set our Stripe secret API key.</p> <p>These are test API keys that we'll use to check out our product. With these keys, no charges will be incurred when making payments. However, before we can make a payment, we need a product, so let's create one. Return to Stripe, log in, and navigate to the \"Products\" tab on the dashboard.</p>","title":"Implementing \"Buy Now\" with Stripe Checkout"},{"location":"tutorials/stripe-checkout-and-email-with-flask/#creating-a-product","text":"<p>Create a product by doing the following:</p> <ol> <li>Click \"Add product\" on the top right.</li> <li>Name the product.</li> <li>Add a description and price.</li> <li>Choose \"One time\" payment.</li> <li>Click \"Save product\"</li> </ol> <p>After the last step, save the API key found in the \"Pricing\" section. We'll use this API key to tell Stripe which product we want our customers to pay for.</p>","title":"Creating a product"},{"location":"tutorials/stripe-checkout-and-email-with-flask/#adding-functionality-in-flask","text":"<p>Time to create the \"Buy Now\" button logic. Open <code>app.py</code> again and modify the index function accordingly. Replace \"YOUR-PRICE-API-KEY\" with the API key for your product, that we saved in the previous section.</p> <pre><code>@app.route(\"/\",methods=[\"GET\",\"POST\"])\ndef index():\n  session = stripe.checkout.Session.create(\n    payment_method_types=['card'],\n    mode = 'payment',\n    success_url = 'https://example.com/success',\n    cancel_url = 'https://example.com/cancel',\n    line_items=[{'price':'YOUR-PRICE-API-KEY',\n          'quantity':1,\n    }]\n    )\n\n  if request.method == \"POST\":\n    user_email = request.form.get('email')\n\n    response = subscribe(user_email,\n      'MAILGUN_ALIAS',\n      'YOUR-MAILGUN-PRIVATE-KEY')\n\n  return render_template(\"index.html\",\n    checkout_id=session['id'],\n    checkout_pk=app.config['STRIPE_PK'],\n    )\n</code></pre> <p>We use the <code>stripe</code> library to create a new \"Session\" object. This object contains multiple variables affecting how our customers interact with the \"Buy Now\" button. For more information on these variables, see Stripe's documentation.</p> <p>We also return two new variables \u2013 <code>checkout_id</code> and <code>checkout_pk</code>. <code>checkout_id</code>, which we get from Stripe, stores information about the potential purchase (price, payment type, etc). <code>checkout_pk</code> stores our private API key, which we added to the Flask app's configuration settings above. When a customer buys our product, their money is sent to the account associated with this private API key.</p> <p>Let's see how our HTML will use these new variables and redirect us to the Stripe Checkout page.</p>","title":"Adding functionality in Flask"},{"location":"tutorials/stripe-checkout-and-email-with-flask/#buy-now-button-functionality-in-the-html-file","text":"<p>With our Flask logic finished, we can implement the \"Buy Now\" button functionality in our <code>index.html</code> file. Open the <code>index.html</code> and find this section:</p> <pre><code>&lt;div class=\"hero-copy\"&gt;\n  &lt;h1 class=\"hero-title mt-0\"&gt;Landing template for startups&lt;/h1&gt;\n  &lt;p class=\"hero-paragraph\"&gt;Our landing page template works on all devices, so you only have to set it up once, and get beautiful results forever.&lt;/p&gt;\n  &lt;div class=\"hero-cta\"&gt;&lt;a class=\"button button-shadow\" href=\"#\"&gt;Learn more&lt;/a&gt;&lt;a id='checkout-button' class=\"button button-primary button-shadow\" href=\"#\"&gt;Buy Now&lt;/a&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>Directly below the <code>&lt;/div&gt;</code> line, add:</p> <pre><code>&lt;script src=\"https://js.stripe.com/v3/\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  const checkout_pk= '{{checkout_pk}}';\n  const checkout_id = '{{checkout_id}}';\n  var stripe = Stripe(checkout_pk)\n  const button = document.querySelector('#checkout-button')\n\n  button.addEventListener('click', event =&gt;{\n    stripe.redirectToCheckout({\n        sessionId: checkout_id\n      }).then(function(result){\n\n        });\n    })\n&lt;/script&gt;\n</code></pre> <p>This code adds a JavaScript event which will trigger when the customer clicks the \"Buy Now\" button, and will redirect them to the Stripe Checkout page. The Stripe Checkout page changes according to the information stored in <code>checkout_id</code>.</p> <p>Also, take a look at the Jinja code in these lines:</p> <pre><code>const checkout_pk= '{{checkout_pk}}';\nconst checkout_id = '{{checkout_id}}';\n</code></pre> <p>When the <code>index.html</code> template is rendered before being served to the user, Flask will substitute in the current values of the Python variables that we passed to <code>render_template()</code>. While <code>checkout_pk</code> will remain the same throughout, <code>checkout_id</code> will be unique for each purchase.</p> <p>The \"Buy Now\" button is good to go \u2013 run <code>app.py</code> again. Try making a payment using the test credit card number <code>4242 4242 4242 4242</code> with any name, expiration date, and security code. No charges will be incurred.</p>","title":"\"Buy Now\" button functionality in the HTML file"},{"location":"tutorials/stripe-checkout-and-email-with-flask/#hosting-the-application-on-code-capsules","text":"<p>Now that we've added all the functionality, we need to create some files that Code Capsules will use when hosting our application. We'll also take a look at a security problem  in our current application, and how to fix it before we go live.</p>","title":"Hosting the Application on Code Capsules"},{"location":"tutorials/stripe-checkout-and-email-with-flask/#creating-the-requirementstxt-file-and-procfile","text":"<p>To host this application on Code Capsules, we need to create a <code>requirements.txt</code> file and a <code>Procfile</code>.</p> <ol> <li> <p>In the <code>project</code> directory, ensure the virtual environment is activated and then enter <code>pip3 freeze &gt; requirements.txt</code>.</p> </li> <li> <p>Create another file named <code>Procfile</code>, containg the line <code>web: gunicorn app:app</code>.</p> </li> </ol> <p>With the <code>requirements.txt</code> file, Code Capsules will now know what libraries to install to run the application. The <code>Procfile</code> tells Code Capsules to use the <code>gunicorn</code> WSGI server to serve HTML rendered by Flask to end-users.</p> <p>Now we can fix that security problem mentioned before, and host the application.</p>","title":"Creating the \"requirements.txt\" file and procfile"},{"location":"tutorials/stripe-checkout-and-email-with-flask/#removing-secret-keys","text":"<p>We need to send our application to GitHub so Code Capsules can host it. But currently this project's code contains all of our API keys. It is considered very poor practice to send personal API keys to GitHub, especially public repositories. Anyone could find them and incur charges on your debit card. Luckily, there is a workaround.</p> <p>By working with environment variables, we can use our API keys on Code Capsules without exposing them on GitHub. We will alter our application to retrieve our API keys from environment variables, which we will set on Code Capsules.</p> <p>To do this, change the code at the top of <code>app.py</code> as follows:</p> <pre><code>from flask import Flask, render_template, request\nimport requests, stripe, os\n\n\napp = Flask(__name__)\napp.config['STRIPE_PK'] = os.getenv(\"STRIPE_PK\")\napp.config['STRIPE_SK'] = os.getenv(\"STRIPE_SK\")\nstripe.api_key = app.config['STRIPE_SK']\n</code></pre> <p>Notice that we've imported a new Python module, os, which allows us to retrieve with environment variables using the <code>os.getenv()</code> method.</p> <p>We've now done this with our Stripe publishable and secret API keys and our Mailgun secret key. On Code Capsules, we'll set environment variables named <code>'STRIPE_PK'</code>, <code>'STRIPE_SK'</code>, and <code>'MAILGUN_SK'</code>. This way, our API keys do not have to be stored on GitHub and will remain secret. Notice, we aren't adding environment variables for the Stripe product API key. This doesn't contain any sensitive information. It just displays a product's price.</p> <p>Your final <code>app.py</code> code should look like this:</p> <pre><code>from flask import Flask, render_template, request\nimport requests, stripe, os\n\napp = Flask(__name__)\napp.config['STRIPE_PK'] = os.getenv(\"STRIPE_PK\")\napp.config['STRIPE_SK'] = os.getenv(\"STRIPE_SK\")\nstripe.api_key = app.config['STRIPE_SK']\n\n\ndef subscribe(user_email, email_list, api_key):\n  return requests.post(\n        \"https://api.mailgun.net/v3/lists/\"+email_list+\"/members\",\n        auth=('api', api_key),\n        data={'subscribed': True,\n              'address': user_email,})\n\n@app.route(\"/\",methods=[\"GET\",\"POST\"])\ndef index():\n\n  session = stripe.checkout.Session.create(\n    payment_method_types=['card'],\n    mode = 'payment',\n    success_url = 'https://example.com/success',\n    cancel_url = 'https://example.com/cancel',\n    line_items=[{'price':'YOUR-PRICE-API-KEY',\n          'quantity':1,\n    }]\n    )\n\n  if request.method == \"POST\":\n    user_email = request.form.get('email')\n\n    response = subscribe(user_email,\n      'MAILGUN_ALIAS',\n      os.getenv(\"MAILGUN_SK\"))\n\n  return render_template(\"index.html\",\n    checkout_id=session['id'],\n    checkout_pk=app.config['STRIPE_PK'],\n    )\n\nif __name__== '__main__':\n  app.run(debug=True)   \n</code></pre> <p>We can now safely host our application.</p>","title":"Removing secret keys"},{"location":"tutorials/stripe-checkout-and-email-with-flask/#pushing-to-github-and-hosting-the-application-on-code-capsules","text":"<p>Before we create the Capsule that will host our code, take the following steps:</p> <ol> <li>Create a GitHub repository for the application.</li> <li>Send all code within the <code>project</code> directory to the repository on GitHub.</li> <li>Log in to Code Capsules.</li> <li>Grant Code Capsules access to the repository.</li> <li>Create a Team and Space as necessary.</li> </ol> <p>Now let's create the Capsule:</p> <ol> <li>Click \"Create A New Capsule\".</li> <li>Select your repository.</li> <li>Choose the Backend Capsule type.</li> <li>Create the Capsule.</li> </ol> <p>All that's left is to set the environment variables. Navigate to the Capsule and click on the \"Config\" tab. Use the image below as a guide to properly add your environment variables. Replace each value with the appropriate API key.</p> <p></p> <p>After entering the API keys, make sure to click \"Update\".</p> <p>All done \u2013 now anyone can view the web application and interact with the \"Buy Now\" and \"Subscribe\" buttons.</p>","title":"Pushing to GitHub and hosting the application on Code Capsules"},{"location":"tutorials/stripe-checkout-and-email-with-flask/#further-reading","text":"<p>We covered a lot in this tutorial: how to use Flask to implement functionality for frontend code, how to set up an email subscriber list, and how to work with Stripe.</p> <p>Earlier I mentioned more information on the <code>url_for()</code> function. Check out Flask's documentation for more information.</p> <p>For further information on how Jinja templates work and what can be done with them, check out this link to learn more about Flask templating and Jinja2.</p> <p>Now that you have a functional email subscriber list, you may be interested in sending emails to your list.</p>","title":"Further Reading"},{"location":"videos/","text":"<p>If you prefer watching videos to reading text then you can watch videos for the tutorials and deployment guides listed below on our YouTube Channel.</p>     Python Telegram  Bot (Webhooks)      MERN Job Board      Angular      React      Express and Mongo      Express      MEAN Stack","title":"Video Guides"}]}